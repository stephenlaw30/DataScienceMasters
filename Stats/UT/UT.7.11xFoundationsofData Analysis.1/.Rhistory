kcm.test.norm.kcaa
kmc.train.norm.kcaa
kmc.train.norm.kcaa <- as.kcca(kmc.train.norm, train.limited.norm)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
kcm.test.norm.kcaa <- as.kcca(kmc.train.norm, test.limited.norm)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
as.kcca
?as.kcca
set.seed(144)
kmc.test.norm <- kmeans(test.limited, centers = 2, iter.max = 1000)
str(kmc.test.norm)
head(kmc.test.norm)
kmc.train.norm.kcaa <- ?as.kcca(kmc.train.norm, train.limited.norm)
cluster.train.norm <- predict(kmc.train.norm.kcaa)
kcm.test.norm.kcaa <- as.kcca(kmc.train.norm, test.limited.norm)
cluster.test.norm <- predict(kcm.test.norm.kcaa)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
kmc.test.norm
str(kmc.test.norm)
head(kmc.test.norm)
kcm.test.norm.kcaa <- as.kcca(kmc.test.norm, test.limited.norm)
cluster.test.norm <- predict(kcm.test.norm.kcaa)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm$cluster == 2)
head(kmc.test.norm)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kmc.test.norm$cluster == 1)
test.cluster2 <- subset(test, kmc.test.norm$cluster == 2)
logModelPredictions2 <- predict(model2, test.cluster1, type = "response")
table(test.cluster1$GenSolarBinary, logModelPredictions2 > 0.5)
2+22/nrow(test.cluster1)
(40*20) + (40*4) + (35*32) + (35*0)
library(SDSFoundations)
animaldata <- AnimalData
install.packages("C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
library(SDSFoundations)
animaldata <- AnimalData
table(animaldata$Age.Intake)
str(animaldata)
table(animaldata$Age.Intake)
adultAnimals <- subset(animaldata, Age.Intake >= 1)
adultAnimals
table(adultAnimals$Age.Intake)
table(adultAnimals$Animal.Type)
adultDogs <- subset(adultDogs, Animal.Type == 'Dog')
adultDogs <- subset(adultAnimals, Animal.Type == 'Dog')
adultCats <- subset(adultAnimals, Animal.Type == 'Cat')
ggplot(adultAnimals) + geom_histogram(aes(x = adultDogs))
ggplot(adultDogs) + geom_histogram(aes(x = Weight))
library(ggplot2)
ggplot(adultDogs) + geom_histogram(aes(x = Weight))
ggplot(adultCats) + geom_histogram(aes(x = Weight))
mean(adultCats$Weight)
sd(adultCats$Weight)
(13 - 8.6)/1.9
mean(adultAnimals$Weight)
sd(adultAnimals$Weight)
(13 - 30.29539) / 23.6356
zScore.cat <- 2.3
1-pnorm(zScore.cat)
fivenum(adultDogs$Weight)
fivenum(adultCats$Weight)
mean(adultDogs$Weight)
sd(adultDogs$Weight)
(13 - 35.67) / 23.47
zScore.dog <- -0.97
1-pnorm(zScore.dog)
(4.5 - 6.7) / 1.1
(5.38 - 6.7) / 1.1
(8.79 - 6.7) / 1.1
minutesStudying <- c(30,45,180,95,130,140,30,80,60,110,0,80)
grade <- c(74,68,87,90,94,84,92,88,82,93,65,90)
cbind(minutesStudying,grade)
df <- data.frame(cbind(minutesStudying,grade))
df
cor(df$minutesStudying,df$grade)
1 - (0.597**2)
library(ggplot2)
ggplot(df) + geom_point(aes(x = minutesStudying, y = grade))
new.df <- df[!df$grade == 92]
new.df <- df[!df$grade == 92,]
new.df
cor(new.df$minutesStudying,new.df$grade) #0.5967026 = 0.597
0.597**2
(0.597**2)
state <- c('CT','DE','MN','MA','NH','NJ','NY','PA','RI','VT')
millionares <- c(86,18,22,141,25,207,368,228,20,11)
pop <- c(35,8,13,64,13,87,193,124,11,6)
df <- cbind(state,millionares,pop)
df
rownames(df) <- state
rownames
df
df <- cbind(millionares,pop)
rownames(df) <- state
df
df
cor(df$millionares,df$pop)
df <- as.data.frame(df)
df
df <- cbind(millionares,pop)
df <- as.data.frame(df)
rownames(df) <- state
df
cor(df$millionares,df$pop
)
cor(df$millionares,df$pop)^2
df$new_pop <- df$State.Population – min(df$State.Population)
df$new_pop <- df$State.Population – min(df$State.Population)
df$new_pop <- df$pop – min(df$pop)
new_pop <- pop - min(pop)
new_pop
df$new_pop <- new_pop
library(SDSFoundations)
linFit(df$pop, df$millionares)
linFit(df$new_pop, df$millionares)
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
runs$X <- NULL
head(runs,2)
library(lubridate)
runs$Time <- as.POSIXct(runs$Time)#, format = '%H:%M:%S')
runs$Avg.Pace <- as.POSIXct(runs$Avg.Pace)#, format = '%H:%M:%S')
runs$Date <- as.POSIXct(runs$Date)
runs$StartTime <- hour(strptime(runs$StartTime, format = '%H:%M'))
str(runs)
runs$Month <- factor(runs$Month, ordered = TRUE, levels = c("Jul","Aug","Sep","Oct","Nov"))
library(ggplot2)
library(RColorBrewer)
#distance histogram
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..), colour = "black", boundary = 2) +
scale_x_continuous(limits=c(0, 30)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
guides(fill=FALSE)
summary(runs$Distance)
#miles by month bars
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Total Miles") +
guides(fill=FALSE) +
ggtitle("Total Miles by Month")
ggplot(data = runs, aes(x = weekNumber, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Week of Plan") +
ylab("Total Miles") +
#guides(fill=FALSE) +
ggtitle("Total Miles by Week of Plan")
runs[runs$weekNumber == 11,c('Name','weekNumber','Date','DOW','Distance')]
#avg. cadence grouped by month
ggplot(data = runs, aes(Month, Cad)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("") +
ylab("Cadence (Steps/Min)") +
guides(fill=FALSE) +
ggtitle("Cadence by Month")
#avg. HR grouped by month
ggplot(data = runs, aes(Month, Avg.HR)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("Month") +
ylab("Avg. Heart Rate") +
ggtitle("Average Heart Rate per Month")
#avg. cadence grouped by month
pl <- ggplot(data = runs, aes(RunType, Cad)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Cadence") +
guides(fill=FALSE) +
coord_flip() +
ggtitle("Cadence per Run Type")
print(pl)
#avg. cadence grouped by month
ggplot(data = runs, aes(RunType, Avg.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
xlab("Run Type") +
ylab("Avg Heart Rate") +
guides(fill=FALSE) +
ggtitle("Average Heart Rate per Run Type")
runs[which.max(runs$Avg.HR),]
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
table(runs$RunType)
#apply(runs$Cadence, runs$RunType, function(x) (Cad*(hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60)))
ggplot(data = runs, aes(RunType, (Cad*((hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60))))) +
geom_bar(aes(fill = RunType), stat = "identity") +
xlab("Run Type") +
ylab("Steps") +
guides(fill=FALSE) +
ggtitle("Total Steps Taken by Run Type")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
ggtitle("Average Hear Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=RunType, y=Max.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType), outlier.colour = "black", alpha = 0.5) +
xlab("Run Type") +
ylab("Max Heart Rate (BPM)") +
ggtitle("Max Heart Rate by Run Type")
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(-110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = FALSE) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/UT.7.11xFoundationsofData Analysis.1')
bank <- read.csv('WorldBankData.csv')
str(bank)
summary(bank)
head(bank)
head(bank[bank$IncomeGroup == 'Low income',])
bank$rural.population[bank$Country == 'Aruba' & bank$year ==1970 ]
bank[bank$Country == 'Australia',]
head(bank[bank$IncomeGroup == 'Low income',])
bank$rural.population[bank$Country == 'Aruba' & bank$year ==1970]
subset(bank, Country == 'United States')
usa <- subset(bank, Country == 'United States')
us90 <- subset(usa, year >=1990 & year <= 1999)
us90
library(SDSFoundations)
linFit(us90$internet.users,us90$year)
linFit(us90$year,us90$internet.users)
expFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
logisticFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
linFit(us90$year,us90$internet.users)
linFit(us90$year,us90$internet.users)
-22238274928 + 11166788*(2006)
expFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
tripleFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
expFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
function (x, y, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)))
tripleFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
tripleFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
us90$internet.users.mil <- us90$internet.users/1000000
us90$yearsSince90 <- us90$year - 1990
us90$yearsSince90
linFit(us90$yearsSince90,us90$internet.users.mil)
expFit(us90$yearsSince90, us90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
logisticFit(us90$year, us90$internet.users, xlab = 'Year', ylab = 'Internet Users')
logisticFit(us90$yearsSince90, us90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
tripleFit(us90$yearsSince90, us90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
-16.36681 + 11.16679*((2006-1990)) # = 162301800
1.87184*(1.60845)^((2006-1990))
1.87184*(1.60845)^(2006-1990) #3756.555 M
127.7935/(1+121.4*1.96391^(2006-1990))
127.7935/(1+121.4*(1.96391)^(2006-1990))
127.7935/(1+121.4*(1.96391)^-(2006-1990))
expFitPred(us_select_10$time, us_select_10$internet.mil, 16)
expFitPred(us90$yearsSince90, us90$internet.users.mil, 16)
logisticFitPred(us90$yearsSince90, us90$internet.users.mil, 16)
logisticFitPred(us90$yearsSince90, us90$internet.users.mil, (2006-1990)) #= 127.477 M
us90
usa$internet.users[usa$year == 2006]/1000000
3756.413-205.6768.
3756.413-205.6768
205.6768 - 127.477
expFit(us90$yearsSince90, us90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/UT.7.11xFoundationsofData Analysis.1')
bank <- read.csv('WorldBankData.csv')
denmark <- subset(bank, Country == 'Denmark')
denmark$internet.prop <- denmark$internet.users / denmark$population
denmark90 <- subset(denmark, year > 1990)
denmark90$yearsSince90 <- denmark90$year - 1990
linFit(denmark90$yearsSince90,denmark90$internet.prop)
expFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion Internet Users')
logisticFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
tripleFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Internet Users')
denmark$internet.users.mil <- denmark$internet.users/1000000
logisticFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
linFit(denmark90$yearsSince90,denmark90$internet.prop)
linFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
denmark90$internet.users.mil
denmark$internet.users.mil <- denmark$internet.users/1000000
linFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
internet.users.mil
denmark$internet.users.mil
denmark90 <- subset(denmark, year > 1990)
denmark90$yearsSince90 <- denmark90$year - 1990
linFit(denmark90$yearsSince90,denmark90$internet.prop)
linFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
expFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
logisticFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
bank <- read.csv('WorldBankData.csv')
denmark <- subset(bank, Country == 'Denmark')
denmark$internet.prop <- denmark$internet.users / denmark$population
denmark$internet.users.mil <- denmark$internet.users/1000000
denmark90 <- subset(denmark, year >= 1990)
denmark90$yearsSince90 <- denmark90$year - 1990
linFit(denmark90$yearsSince90,denmark90$internet.prop)
linFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
expFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
expFit(denmark90$yearsSince90, denmark90$internet.users.mil, xlab = 'Year', ylab = 'Internet Users')
logisticFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
tripleFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Internet Users')
tripleFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Internet Users')
logisticFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
expFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
logisticFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
ln(0.7/0.00585) / ln(1.34666)
log(0.7/0.00585) / log(1.34666)
expFitPred(16.07593)
expFitPred(denmark90$yearsSince90, denmark90$internet.prop,16.07593)
log(0.7/0.00585) / log(1.34666)
log(((0.89668/0.7) - 1)/308.8345) / log(1.73124)
tripleFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Internet Users')
logisticFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
expFit(denmark90$yearsSince90, denmark90$internet.prop, xlab = 'Year', ylab = 'Proportion of Internet Users')
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/UT.7.11xFoundationsofData Analysis.1')
bank <- read.csv('WorldBankData.csv')
brazil95 <- subset(bank, Country == 'Brazil', year >= 1995)
brazil95
brazil95
subset(bank, Country == 'Brazil', year >= 1995)
bank
names(bank)
brazil95 <- subset(bank, Country == 'Brazil' & year >= 1995)
brazil95
head(brazil95)
head(brazil95,15)
brazil95
brazil95$yearsSince95 <- brazil95$year - 1995
brazil95$mobile.users.mill <- brazil95$mobile.users/1000000
brazil95$mobile.users.mill[brazil95$year == 2000]
brazil95[,c('year','mobile.users')]
brazil95[,c('year','mobile.users.mill')]
tripleFit(brazil95$yearsSince95,brazil95$mobile.users.mill)
linFit(tripleFit(brazil95$yearsSince95,brazil95$mobile.users.mill))
expFit(tripleFit(brazil95$yearsSince95,brazil95$mobile.users.mill))
logisticFit(tripleFit(brazil95$yearsSince95,brazil95$mobile.users.mill))
linFit(tripleFit(brazil95$yearsSince95, brazil95$mobile.users.mill))
linFit(brazil95$yearsSince95, brazil95$mobile.users.mill)
function (x, y, xlab = deparse(substitute(x)), ylab = deparse(substitute(y)))
expFit(brazil95$yearsSince95, brazil95$mobile.users.mill)
expFit(brazil95$yearsSince95, brazil95$mobile.users.mill)
logisticFit(brazil95$yearsSince95, brazil95$mobile.users.mill)
tripleFit(brazil95$yearsSince95, brazil95$mobile.users.mill)
347.9316 / (1 + 72.74891*(1.3595)^-20
347.9316 / (1 + 72.74891*(1.3595)^-20)
logisticFitPred(brazil95$yearsSince95, brazil95$mobile.users.mill,25)
logisticFitPred(brazil95$yearsSince95, brazil95$mobile.users.mill,20) #336.596
347.9316 / (1 + 72.74891*(1.3595)^-30) #300.8743
logisticFitPred(brazil95$yearsSince95, brazil95$mobile.users.mill,30) #300.875
76.64*(1.46)^14
76.64*(1.46)^14
3273.31 / (1 + 43.59*(1.57)^-14)
4379 - 15324.82
4379 - 15325
4379 - 3034
years <- c(1996,1998)
yearsSinceStart <- c(1,3)
wolves <- c(25,45)
rbind(years,yearsSinceStart,wolves)
cbind(years,yearsSinceStart,wolves)
wolf <- as.data.frame(cbind(years,yearsSinceStart,wolves))
wolf
expFit(wolf$yearsSinceStart,wolf$wolves)
15 + 10*7
18.6339*(1.34164)^7
og(325/18.6339)/log(1.34164)
log(325/18.6339)/log(1.34164)
log(152.10)/log(2.17)
log(152.10)/log(2.17)
2000/(1+152.10*(2.17)^-(log(152.10)/log(2.17)))
2000/(1+152.10*(2.17)^-(9)))
2000/(1+152.10*(2.17)^-(9))
