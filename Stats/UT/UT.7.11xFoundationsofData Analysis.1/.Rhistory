table(test$GenSolarBinary[test$presidential.results == 0], democratLogModelPredictions > 0.5)
democratLogModelPredictions <- predict(model1, test[test$presidential.results == 1,], type = "response")
table(test$GenSolarBinary[test$presidential.results == 1], democratLogModelPredictions > 0.5)
(90+2)/nrow(test[test$presidential.results == 0])
(90+2)/nrow(test[test$presidential.results == 0,])
table(test$GenSolarBinary[test$presidential.results == 1], democratLogModelPredictions > 0.5)
(64+16)/nrow(test[test$presidential.results == 1,])
train.limited <- train[,c('CumlRegulatory','CumlFinancial','presidential.results','Total.salary','Import')]
test.limited <- test[,c('CumlRegulatory','CumlFinancial','presidential.results','Total.salary','Import')]
library(caret)
preProcess(train.limited)
library(caret)
reproc = preProcess(train.limited)
train.limited.norm = predict(preproc, train.limited)
library(caret)
preproc = preProcess(train.limited)
train.limited.norm = predict(preproc, train.limited)
preproc2 = preProcess(test.limited)
test.limited.norm = predict(preproc2, test.limited)
set.seed(144)
kmc.train.norm <- kmeans(train.limited, centers = 2, iter.max = 1000)
str(kmc.train.norm)
head(kmc.train.norm)
install.packages("flexclust")
library(flexclust)
?flexclust
?as.kcca
kmc.train.norm.kcaa <- as.kcca(kmc.train.norm, train.limited.norm)
cluster.train.norm <- predict(kmc.train.norm.kcaa)
cluster.train.norm
str(kmc.train.norm)
head(kmc.train.norm)
train.cluster1 <- subset(train.limited.norm, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train.limited.norm, kmc.train.norm$cluster == 2)
summary(train.cluster1)
summary(train.cluster2)
train.limited.norm
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
summary(train.cluster1)
summary(train.cluster2)
cluster.train.norm
model2 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import,
data = train.cluster1, family = "binomial")
summary(model2)
test.cluster1 <- subset(test, kmc.train.norm$cluster == 1)
test.cluster2 <- subset(test, kmc.train.norm$cluster == 2)
logModelPredictions2 <- predict(model2, test, type = "response")
table(test.cluster1$GenSolarBinary, logModelPredictions2 > 0.5)
test.cluster1
logModelPredictions2
logModelPredictions2 <- predict(model2, test.cluster1, type = "response")
table(test.cluster1$GenSolarBinary, logModelPredictions2 > 0.5)
(126+25)/nrow(test.cluster1)
logModelPredictions2 <- predict(model2, test.limited.norm, type = "response")
table(test.limited.norm$GenSolarBinary, logModelPredictions2 > 0.5)
?cluster.test
logModelPredictions2 <- predict(model2, test.limited.norm, type = "response")
table(test.limited.norm$GenSolarBinary, logModelPredictions2 > 0.5)
logModelPredictions2 <- predict(model2, test.cluster1, type = "response")
table(test.cluster1$GenSolarBinary, logModelPredictions2 > 0.5)
(126+25)/nrow(test.cluster1)
test.cluster1
nrow(test.cluster1)
(126+25)/nrow(test.cluster1)
logModelPredictions2 <- predict(model2, test.cluster1, type = "response")
table(test.cluster1$GenSolarBinary, logModelPredictions2 > 0.5)
(126+13)(126+13+18+25)
(126+13)/(126+13+18+25)
kmc.train.norm.kcaa <- as.kcca(kmc.train.norm, train.limited.norm)
cluster.train.norm <- predict(kmc.train.norm.kcaa)
kmc.train.norm.kcaa <- as.kcca(kmc.train.norm, train.limited.norm)
cluster.train.norm <- predict(kmc.train.norm.kcaa)
kcm.test.norm.kcaa <- as.kcca(kmc.train.norm, test.limited.norm)
cluster.test.norm <- predict(kcm.test.norm.kcaa)
cluster.test.norm
kcm.test.norm.kcaa
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
kcm.test.norm.kcaa
kmc.train.norm.kcaa
kmc.train.norm.kcaa <- as.kcca(kmc.train.norm, train.limited.norm)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
kcm.test.norm.kcaa <- as.kcca(kmc.train.norm, test.limited.norm)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
as.kcca
?as.kcca
set.seed(144)
kmc.test.norm <- kmeans(test.limited, centers = 2, iter.max = 1000)
str(kmc.test.norm)
head(kmc.test.norm)
kmc.train.norm.kcaa <- ?as.kcca(kmc.train.norm, train.limited.norm)
cluster.train.norm <- predict(kmc.train.norm.kcaa)
kcm.test.norm.kcaa <- as.kcca(kmc.train.norm, test.limited.norm)
cluster.test.norm <- predict(kcm.test.norm.kcaa)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
kmc.test.norm
str(kmc.test.norm)
head(kmc.test.norm)
kcm.test.norm.kcaa <- as.kcca(kmc.test.norm, test.limited.norm)
cluster.test.norm <- predict(kcm.test.norm.kcaa)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm.kcaa$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm.kcaa$cluster == 2)
test.cluster1 <- subset(test, kcm.test.norm$cluster == 1)
test.cluster2 <- subset(test, kcm.test.norm$cluster == 2)
head(kmc.test.norm)
train.cluster1 <- subset(train, kmc.train.norm$cluster == 1)
train.cluster2 <- subset(train, kmc.train.norm$cluster == 2)
test.cluster1 <- subset(test, kmc.test.norm$cluster == 1)
test.cluster2 <- subset(test, kmc.test.norm$cluster == 2)
logModelPredictions2 <- predict(model2, test.cluster1, type = "response")
table(test.cluster1$GenSolarBinary, logModelPredictions2 > 0.5)
2+22/nrow(test.cluster1)
(40*20) + (40*4) + (35*32) + (35*0)
library(SDSFoundations)
animaldata <- AnimalData
install.packages("C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/SDSFoundations_1.1.zip", repos = NULL, type = "win.binary")
library(SDSFoundations)
animaldata <- AnimalData
table(animaldata$Age.Intake)
str(animaldata)
table(animaldata$Age.Intake)
adultAnimals <- subset(animaldata, Age.Intake >= 1)
adultAnimals
table(adultAnimals$Age.Intake)
table(adultAnimals$Animal.Type)
adultDogs <- subset(adultDogs, Animal.Type == 'Dog')
adultDogs <- subset(adultAnimals, Animal.Type == 'Dog')
adultCats <- subset(adultAnimals, Animal.Type == 'Cat')
ggplot(adultAnimals) + geom_histogram(aes(x = adultDogs))
ggplot(adultDogs) + geom_histogram(aes(x = Weight))
library(ggplot2)
ggplot(adultDogs) + geom_histogram(aes(x = Weight))
ggplot(adultCats) + geom_histogram(aes(x = Weight))
mean(adultCats$Weight)
sd(adultCats$Weight)
(13 - 8.6)/1.9
mean(adultAnimals$Weight)
sd(adultAnimals$Weight)
(13 - 30.29539) / 23.6356
zScore.cat <- 2.3
1-pnorm(zScore.cat)
fivenum(adultDogs$Weight)
fivenum(adultCats$Weight)
mean(adultDogs$Weight)
sd(adultDogs$Weight)
(13 - 35.67) / 23.47
zScore.dog <- -0.97
1-pnorm(zScore.dog)
(4.5 - 6.7) / 1.1
(5.38 - 6.7) / 1.1
(8.79 - 6.7) / 1.1
minutesStudying <- c(30,45,180,95,130,140,30,80,60,110,0,80)
grade <- c(74,68,87,90,94,84,92,88,82,93,65,90)
cbind(minutesStudying,grade)
df <- data.frame(cbind(minutesStudying,grade))
df
cor(df$minutesStudying,df$grade)
1 - (0.597**2)
library(ggplot2)
ggplot(df) + geom_point(aes(x = minutesStudying, y = grade))
new.df <- df[!df$grade == 92]
new.df <- df[!df$grade == 92,]
new.df
cor(new.df$minutesStudying,new.df$grade) #0.5967026 = 0.597
0.597**2
(0.597**2)
state <- c('CT','DE','MN','MA','NH','NJ','NY','PA','RI','VT')
millionares <- c(86,18,22,141,25,207,368,228,20,11)
pop <- c(35,8,13,64,13,87,193,124,11,6)
df <- cbind(state,millionares,pop)
df
rownames(df) <- state
rownames
df
df <- cbind(millionares,pop)
rownames(df) <- state
df
df
cor(df$millionares,df$pop)
df <- as.data.frame(df)
df
df <- cbind(millionares,pop)
df <- as.data.frame(df)
rownames(df) <- state
df
cor(df$millionares,df$pop
)
cor(df$millionares,df$pop)^2
df$new_pop <- df$State.Population – min(df$State.Population)
df$new_pop <- df$State.Population – min(df$State.Population)
df$new_pop <- df$pop – min(df$pop)
new_pop <- pop - min(pop)
new_pop
df$new_pop <- new_pop
library(SDSFoundations)
linFit(df$pop, df$millionares)
linFit(df$new_pop, df$millionares)
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
runs$X <- NULL
head(runs,2)
library(lubridate)
runs$Time <- as.POSIXct(runs$Time)#, format = '%H:%M:%S')
runs$Avg.Pace <- as.POSIXct(runs$Avg.Pace)#, format = '%H:%M:%S')
runs$Date <- as.POSIXct(runs$Date)
runs$StartTime <- hour(strptime(runs$StartTime, format = '%H:%M'))
str(runs)
runs$Month <- factor(runs$Month, ordered = TRUE, levels = c("Jul","Aug","Sep","Oct","Nov"))
library(ggplot2)
library(RColorBrewer)
#distance histogram
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..), colour = "black", boundary = 2) +
scale_x_continuous(limits=c(0, 30)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
guides(fill=FALSE)
summary(runs$Distance)
#miles by month bars
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Total Miles") +
guides(fill=FALSE) +
ggtitle("Total Miles by Month")
ggplot(data = runs, aes(x = weekNumber, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Week of Plan") +
ylab("Total Miles") +
#guides(fill=FALSE) +
ggtitle("Total Miles by Week of Plan")
runs[runs$weekNumber == 11,c('Name','weekNumber','Date','DOW','Distance')]
#avg. cadence grouped by month
ggplot(data = runs, aes(Month, Cad)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("") +
ylab("Cadence (Steps/Min)") +
guides(fill=FALSE) +
ggtitle("Cadence by Month")
#avg. HR grouped by month
ggplot(data = runs, aes(Month, Avg.HR)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("Month") +
ylab("Avg. Heart Rate") +
ggtitle("Average Heart Rate per Month")
#avg. cadence grouped by month
pl <- ggplot(data = runs, aes(RunType, Cad)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Cadence") +
guides(fill=FALSE) +
coord_flip() +
ggtitle("Cadence per Run Type")
print(pl)
#avg. cadence grouped by month
ggplot(data = runs, aes(RunType, Avg.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
xlab("Run Type") +
ylab("Avg Heart Rate") +
guides(fill=FALSE) +
ggtitle("Average Heart Rate per Run Type")
runs[which.max(runs$Avg.HR),]
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
table(runs$RunType)
#apply(runs$Cadence, runs$RunType, function(x) (Cad*(hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60)))
ggplot(data = runs, aes(RunType, (Cad*((hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60))))) +
geom_bar(aes(fill = RunType), stat = "identity") +
xlab("Run Type") +
ylab("Steps") +
guides(fill=FALSE) +
ggtitle("Total Steps Taken by Run Type")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
ggtitle("Average Hear Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=RunType, y=Max.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType), outlier.colour = "black", alpha = 0.5) +
xlab("Run Type") +
ylab("Max Heart Rate (BPM)") +
ggtitle("Max Heart Rate by Run Type")
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(-110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = FALSE) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/UT.7.11xFoundationsofData Analysis.1')
wr<- read.csv('WorldRecords.csv')
str(wr)
summart(wr)
str(wr)
summary(wr)
wr[wr$Athlete='Usain Bolt',]
wr[wr$Athlete=='Usain Bolt',]
table(wr$Event)
wr[wr$Event=='Womens Mile' & wr$Record < 260]
wr[wr$Event=='Womens Mile' & wr$Record < 260,]
mens <- subset(wr, Event == 'Mens Shotput')
womens <- subset(wr, Event == 'Womens Shotput')
womens
mens
library(ggplot2)
ggplot(mens) + geom_point(aes(Year, Record))
ggplot(womens) + geom_point(aes(Year, Record))
ggplot(mens) + geom_point(aes(Year, Record)) + ggtitle('mens')
ggplot(womens) + geom_point(aes(Year, Record)) + ggtitle('womens')
ggplot(mens) + geom_point(aes(Year, Record)) + ggtitle('mens') +
geom_smooth(aes(x = Year, y = Record), method = "lm", se = FALSE)
ggplot(womens) + geom_point(aes(Year, Record)) + ggtitle('womens') +
geom_smooth(aes(x = Year, y = Record), method = "lm", se = FALSE)
linFit(mens$Year,mens$Record)
linFit(womens$Year,womens$Record)
library(SDSFoundations)
linFit(mens$Year,mens$Record)
linFit(womens$Year,womens$Record)
rm(list = ls(all = TRUE))
'Lab 4: Track and Field World Records
Every 4 years, track and field athletes take the world stage at the Summer Olympics.  Some of the most exciting events
during each Olympics are those in which athletes push the limits of their sport, breaking their own personal best
records, national records, or even world records.  We have compiled the world record times for track events like the
100m dash and record distances for field events like the shotput into a single dataset. This dataset includes info on
the person who broke the record, his/her nationality, where the record was broken, and year it was broken. Note that
not all world records are broken during the Olympics, with many occurring in regional or national competitions.
**Primary Research Question** - How has the men’s shotput world record changed over time?  What about the women’s?'
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UT/UT.7.11xFoundationsofData Analysis.1')
wr<- read.csv('WorldRecords.csv')
str(wr)
summary(wr)
'10 different types of events (e.g. "Mens 100m," "Womens shotput," etc.) are represented in the dataset.'
wr[wr$Athlete=='Usain Bolt',]
'Usain Bolt first break the world record for the men 100m dash in 2008'
table(wr$Event)
wr[wr$Event=='Womens Mile' & wr$Record < 260,]
'Mary Slaney was the first woman to break the women’s 1 mile world record with a time of less than 260 seconds
Let us find the variables we need to answer the question (variables of interest). RECORD tells us the record-setting
time or distance, and its quantitative. YEAR tells us when the record was broken and its quantitative.
2 points possible (graded)
For each sex, we will begin our analysis by generating a scatterplot of shotput distance and year because it will
show us if these 2 numeric variables are linearly related.
Once we fit a linear model to this shotput world record data, we will be able to report the average rate of change
in world record shotput distance per year.
1. Create 2 subsets of the dataset that contain only the World Record cases for mens and then womens shotput.'
mens <- subset(wr, Event == 'Mens Shotput')
womens <- subset(wr, Event == 'Womens Shotput')
#3. Create a scatterplot of year and record shotput distance: one for men and one for women.
library(ggplot2)
ggplot(mens) + geom_point(aes(Year, Record)) + ggtitle('mens')
ggplot(womens) + geom_point(aes(Year, Record)) + ggtitle('womens')
#4. Confirm from these plots that a linear model is appropriate and run a linear model for each event
ggplot(mens) + geom_point(aes(Year, Record)) + ggtitle('mens') +
geom_smooth(aes(x = Year, y = Record), method = "lm", se = FALSE)
ggplot(womens) + geom_point(aes(Year, Record)) + ggtitle('womens') +
geom_smooth(aes(x = Year, y = Record), method = "lm", se = FALSE)
library(SDSFoundations)
linFit(mens$Year,mens$Record)
linFit(womens$Year,womens$Record)
cor(mens$Year,mens$Record)
cor(mens$Year,mens$Record)
cor(mens$Year,mens$Record)^2
inFit(womens$Year,womens$Record)
linFit(womens$Year,womens$Record)
cor(womens$Year,womens$Record)
cor(womens$Year,womens$Record)^2
linFit(mens$Year,mens$Record)
linFit(womens$Year,womens$Record)
