cor(clin.sci$BDI,clin.sci$QoL) # -0.3746403
cor(clin.sci$BDI,clin.sci$QoL,use = "pairwise.complete.obs") # -0.3746403
cor(clin.sci$BDI,clin.sci$QoL,use = "pairwise.complete.obs") # -0.3746403
cor(clin.sci[,vars]) # -0.3746403
cor(clin.sci[,vars],use = "pairwise.complete.obs") # -0.3746403
vars <- c('BDI','QoL')
round(corr.test(clin.sci[,vars]),3)
vars <- c('BDI','QoL')
round(cor(clin.sci[,vars]),3)
cor(clin.sci[,vars])
corr.test(clin.sci[,vars])$t
round(corr.test(clin.sci[,vars])$t,3)
summary(clin.sci.model)$r
summary(clin.sci.model)
summary(clin.sci.model2)
lmBeta(clin.sci.model2)
round(lmBeta(clin.sci.model2),3)
round(pCorr(clin.sci.model2),3)
round(100*pCorr(clin.sci.model2),3)
round(100*pCorr(clin.sci.model2),2)
summary(clin.sci.model2
)
library(SDSFoundations)
res <- TempskiResilience
res <- TempskiResilience
table(res$Group)
bas.sci <- res[res$Group == 'Basic Sciences']
bas.sci <- res[res$Group == 'Basic Sciences',]
names(bas.sci)
whoModel <- lm(QoL ~ WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, bas.sci)
summary(whoModel)
library(car)
vif(whoModel)
1/vif(whoModel)
plot(whoModel, which = 1)
cutoff <- 4/(whoModel$df)
plot(whoModel, which = 4, cook.levels = cutoff, id.n = 5)
lmBeta(whoModel)
round(pCorr(whoModel), 4)
round(100*pCorr(whoModel),2) # 8.23
corr.test(bas.sci[,vars])$r
vars <- c('QoL', 'WHOQOL.PH', 'WHOQOL.PSY', 'WHOQOL.SOC', 'WHOQOL.ENV')
corr.test(bas.sci[,vars])$r
cor(bas.sci[,vars])
cor(bas.sci[,vars])$r
vars <- c('QoL', 'WHOQOL.PH', 'WHOQOL.PSY', 'WHOQOL.SOC', 'WHOQOL.ENV')
cor(bas.sci[,vars])
vars <- c('QoL', 'WHOQOL.PH', 'WHOQOL.PSY', 'WHOQOL.SOC', 'WHOQOL.ENV')
cor(res[,vars])
whoModel <- lm(MS.QoL ~ WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, bas.sci)
summary(whoModel)
vars <- c('MS.QoL', 'WHOQOL.PH', 'WHOQOL.PSY', 'WHOQOL.SOC', 'WHOQOL.ENV')
vars <- c('MS.QoL', 'WHOQOL.PH', 'WHOQOL.PSY', 'WHOQOL.SOC', 'WHOQOL.ENV')
cor(res[,vars])
corr.test(res[,vars])$r
vars <- c('MS.QoL', 'WHOQOL.PH', 'WHOQOL.PSY', 'WHOQOL.SOC', 'WHOQOL.ENV')
corr.test(res[,vars])$r
corr.test(res[,vars],use = "pairwise.complete.obs)$r
corr.test(res[,vars], use = "pairwise.complete.obs')$r
corr.test(res[,vars], use = "pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
corr.test(res[,vars], use = 'pairwise.complete.obs')
corr.test(res[,vars], use = 'pairwise.complete.obs')$r
vif(whoModel)
1/vif(whoModel)
whoModel
whoModel <- lm(MS.QoL ~ WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, bas.sci)
summary(whoModel)
vif(whoModel)
plot(whoModel, which = 1)
cutoff <- 4/(whoModel$df)
plot(whoModel, which = 4, cook.levels = cutoff, id.n = 5)
lmBeta(whoModel)
function (model)
round(100*pCorr(whoModel),2) # 8.23
round(100*pCorr(whoModel),2) # 8.23
whoModel$t
whoModel
res <- TempskiResilience
clin.sci <- res[res$Group == 'Clinical Sciences',]
clin.sci
summary(lm(BDI~Age+State.Anxiety+Trait.anxiety,clin.sci))
summary(lm(BDI~Gender+State.Anxiety+Trait.anxiety,clin.sci))
summary(lm(BDI~Gender+Age+State.Anxiety+Trait.anxiety,clin.sci))
summary(lm(BDI~Age+State.Anxiety+Trait.anxiety,clin.sci))
summary(lm(BDI~Female+State.Anxiety+Trait.anxiety,clin.sci))
summary(lm(BDI~Female+Age+State.Anxiety+Trait.anxiety,clin.sci))
model1 <- summary(lm(BDI~Female+Age+State.Anxiety+Trait.anxiety,clin.sci))
summary(model1)
summary(model1)
model1 <- lm(BDI~Female+Age+State.Anxiety+Trait.anxiety,clin.sci)
summary(model1)
lmBeta(model1)
round(lmBeta(model1),3)
round(100*pCorr(model1),2)
SS = 1848.76
df <- 20-2
SS = 1848.76
SS = 1848.76
df <- 20-2
25592/2646
-23.4325 / 12.74
22.245*421
8.32*0.1528
480.78 / 1848.76
480.78 / (1848.76+480.78)
480.78 / (1848.76 - 480.78)
1848.76 / (1848.76 - 480.78)
1848.76 / (1848.76 + 480.78)
install.packages('rattle')
install.packages('RGTK2')
install.packages('RGtk2')
partial <- c(10, 20, NA, 30)
mean(partial)
mean(partial, na.rm = T)
dbinom(x = 4, size = 20, prob = 1/6)
dbinom(1,20,1/2)
dbinom(1,100,1/2)
pbinom(q = 4, size = 20, prob = 1/6)
dbinom(x = 4, size = 20, prob = 1/6)
qbinom(p = 0.75, size = 20, prob = 1/6)
pbinom(q = 3, size = 20, prob = 1/6) #76.87%
pbinom(q = 3, size = 20, prob = 1/6) #56.65%
rbinom( n = 100, size = 20, prob = 1/6 )
dnorm( x = 1, mean = 1, sd = 0.1 )
?dnorm
normal.a <- rnorm(1000, mean = 0, sd = 1)
library(ggplot2)
ggplot + geom_histogram(normal.a)
ggplot + geom_histogram(aes(normal.a))
ggplot() + geom_histogram(aes(normal.a))
?rchisq
chisq.a <- rchisq(1000, df = 3)
library(ggplot2)
ggplot() + geom_histogram(aes(chisq.a))
chi.sq.3 <- (normal.a)^2 + (normal.a)^2 + (normal.a)^2
ggplot() + geom_histogram(aes(chi.sq.3))
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
normal.d / sqrt(scaled.chisq.3)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() + geom_histogram(aes(t.3))
scaled.chisq.3 <- chi.sq.3/3
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() + geom_histogram(aes(t.3))
ggplot() + geom_histogram(aes(t.3), bins = 4)
ggplot() + geom_histogram(aes(t.3), bins = 10)
normal.b <- rnorm(1000)
normal.3 <- rnorm(1000)
chi.sq.3 <- (normal.a)^2 + (normal.a)^2 + (normal.a)^2
ggplot() + geom_histogram(aes(chi.sq.3))
# create t-distribution from scaled chi-squared
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() + geom_histogram(aes(t.3), bins = 10)
normal.a <- rnorm(1000, mean = 0, sd = 1)
library(ggplot2)
ggplot() + geom_histogram(aes(normal.a))
# generate 1000 values in a chi-squared distribution w/ dF = 3
chisq.a <- rchisq(1000, df = 3)
ggplot() + geom_histogram(aes(chisq.a))
# way #2 --> sum of squares
# square values of 3 distributions and sum
normal.b <- rnorm(1000)
normal.3 <- rnorm(1000)
chi.sq.3 <- (normal.a)^2 + (normal.a)^2 + (normal.a)^2
ggplot() + geom_histogram(aes(chi.sq.3))
# create t-distribution from scaled chi-squared
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() + geom_histogram(aes(t.3), bins = 10)
chi.sq.20 <- rchisq( 1000, 20)
scaled.chi.sq.20 <- chi.sq.20 / 20
F.3.20 <- scaled.chi.sq.3 / scaled.chi.sq.20
ggplot() + geom_histogram(aes(F.3.20))
F.3.20 <- scaled.chi.sq.3 / scaled.chi.sq.20
chi.sq.20 <- rchisq( 1000, 20)
scaled.chi.sq.20 <- chi.sq.20 / 20
F.3.20 <- scaled.chisq.3 / scaled.chi.sq.20
ggplot() + geom_histogram(aes(F.3.20))
?binom.test
binom.test(x = 62, n = 100, p = .5 )
probabilities <- c(clubs = .25, diamonds = .25, hearts = .25, spades = .25)
library(ggplot2)
data(diamonds)
library(tidyverse)
glimpse(diamonds)
levels(diamonds$cut)
?diamonds
ggplot(diamonds) +
geom_histogram(price)
ggplot(diamonds) +
geom_histogram(price)
ggplot(diamonds) +
geom_histogram(aes(price))
summary(diamonds$price)
count(diamonds$price < 5000)
count(diamonds$price < 5000)
sum(diamonds$price < 5000)
diamonds$price < 500
sum(diamonds$price < 500)
sum(diamonds$price < 500)
sum(diamonds$price < 250)
sum(diamonds$price >= 15000)
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 100) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,100))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 100) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0,1000,100)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
# explore peak
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 100) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0,5000,100)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
# explore peak
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 1000) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0,5000,1000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 1000) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0,5000,500)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 500) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0,5000,500)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
# explore peak
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 100) +
scale_x_continuous(limits = c(0, 5000), breaks = seq(0,5000,500)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
ggplot(diamonds) +
geom_histogram(aes(price))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
scale_x_continuous(limits = c(0, 500)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<$1,000)')
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(ylim = c(500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(ylim = c(500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(ylim = c(0,500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,1000))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,2000))
ggplot(diamonds) +
geom_histogram(aes(price))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,2000))
# explore peak
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000), , breaks = seq(300,100)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000), breaks = seq(300,100)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 1) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
# histogram of cut
ggplot(diamonds) +
geom_histogram(aes(cut))
summary(diamonds$cut)
by(diamonds$price,diamonds$cut,summary)
ggplot(diamonds) +
geom_histogram(aes(price)) +
facet_wrap(~ cut)
by(diamonds$price,diamonds$cut,summary)
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 50) +
facet_wrap(~ cut)
# histogram of price broken out by cut
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 1000) +
facet_wrap(~ cut)
by(diamonds$price,diamonds$cut,summary)
?facet_wrap
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 1000) +
facet_wrap(~ cut, scales = "free_y")
ggplot(diamonds) +
geom_histogram(aes(price/carat))
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000)
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white
')'
)
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white') +
scale_x_log10()
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white') +
scale_x_log10()
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
+
scale_x_log10()
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 1000, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 1, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.5, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white') +
facet_grid(~cut)
# break out by cut
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.05, color = 'white') +
facet_grid(~cut)
ggplot(diamonds) +
geom_boxplot(aes(price, clarity))
ggplot(diamonds) +
geom_boxplot(aes(clarity, price))
ggplot(diamonds) +
geom_boxplot(aes(cut, price))
ggplot(diamonds) +
geom_boxplot(aes(color, price))
ggplot(diamonds) +
geom_boxplot(aes(clarity, price)) +
coord_cartesian(ylim = c(0,7500))
by(diamonds$price,diamonds$clarity,summary)
ggplot(diamonds) +
geom_boxplot(aes(cut, price))
ggplot(diamonds) +
geom_boxplot(aes(cut, price)) +
coord_cartesian(ylim = c(0,7500))
by(diamonds$price,diamonds$cut,summary)
# all relatively similar max and min prices
ggplot(diamonds) +
geom_boxplot(aes(color, price))
ggplot(diamonds) +
geom_boxplot(aes(color, price)) +
coord_cartesian(ylim = c(0,7600))
by(diamonds$price,diamonds$color,summary)
iqr(diamonds$price)
library(lsr)
iqr(diamonds$price)
library(SDSFoundations)
iqr(diamonds$price)
IQR(diamonds$price)
?IQR
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
ggplot(diamonds) +
geom_boxplot(aes(color, price/carat))
ggplot(diamonds) +
geom_boxplot(aes(color, price/carat)) +
coord_cartesian(ylim = c(0,6000))
by(diamonds$price/diamonds$carat,diamonds$color,summary)
diamonds$price/diamonds$carat
by(diamonds$price/diamonds$carat,diamonds$color,summary)
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, y = ..count../sum(..count..), binwidth = 10)
)
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 50))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 100))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 100)) +
scale_x_continuous()
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 100)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 10)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 5)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .1)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .1)) +
scale_x_continuous(breaks = seq(0,5,.1))
table(diamonds$carat)
table(diamonds$carat) > 2000
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(breaks = seq(0,5,.1))
table(diamonds$carat) > 2000
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(xlim(c(0,5)) breaks = seq(0,5,.1))
table(diamonds$carat) > 2000
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(limits = c(0,3) breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,5,.1))
setwd('C:/Users/NEWNSS/Dropbox/DataScienceMasters/Stats/LSR/sample-master')
load('zeppo.Rdata')
grades
mean(grades)
z <- (x_bar - mu_null) / sem
z
load('zeppo.Rdata')
grades
mean(grades)
#higher than class average of 67.5
# 1
x_bar <- mean(grades)
# 2
sig_true <- 9.5 # true SD from assumptions
mu_null <- 6.75 # mean that null (H0) specifies
# 3
n = length(grades) # sample size
# 4
sem <- sig_true / sqrt(n)
# 5
z <- (x_bar - mu_null) / sem
grades
mean(grades)
#higher than class average of 67.5
# 1
x_bar <- mean(grades)
# 2
sig_true <- 9.5 # true SD from assumptions
mu_null <- 67.5 # mean that null (H0) specifies
# 3
n = length(grades) # sample size
# 4
sem <- sig_true / sqrt(n)
# 5
z <- (x_bar - mu_null) / sem
upper.area <- pnorm(q = z, lower.tail = FALSE)# lower.tail = F ==> calculate AUC from 2.26 upwards
upper.area
lower.area <- pnorm(q = -z, lower.tail = TRUE)
lower.area
p.value <- lower.area + upper.area
p.value
