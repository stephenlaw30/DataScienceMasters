geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(ylim = c(500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(ylim = c(500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(ylim = c(0,500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,500))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,1000))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,2000))
ggplot(diamonds) +
geom_histogram(aes(price))
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,2000))
# explore peak
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(0,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000), , breaks = seq(300,100)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000), breaks = seq(300,100)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 1) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and
# histogram of cut
ggplot(diamonds) +
geom_histogram(aes(cut))
summary(diamonds$cut)
by(diamonds$price,diamonds$cut,summary)
ggplot(diamonds) +
geom_histogram(aes(price)) +
facet_wrap(~ cut)
by(diamonds$price,diamonds$cut,summary)
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 50) +
facet_wrap(~ cut)
# histogram of price broken out by cut
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 1000) +
facet_wrap(~ cut)
by(diamonds$price,diamonds$cut,summary)
?facet_wrap
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 1000) +
facet_wrap(~ cut, scales = "free_y")
ggplot(diamonds) +
geom_histogram(aes(price/carat))
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000)
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white
')'
)
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white') +
scale_x_log10()
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white') +
scale_x_log10()
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
+
scale_x_log10()
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 1000, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 1, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.5, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white') +
facet_grid(~cut)
# break out by cut
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.05, color = 'white') +
facet_grid(~cut)
ggplot(diamonds) +
geom_boxplot(aes(price, clarity))
ggplot(diamonds) +
geom_boxplot(aes(clarity, price))
ggplot(diamonds) +
geom_boxplot(aes(cut, price))
ggplot(diamonds) +
geom_boxplot(aes(color, price))
ggplot(diamonds) +
geom_boxplot(aes(clarity, price)) +
coord_cartesian(ylim = c(0,7500))
by(diamonds$price,diamonds$clarity,summary)
ggplot(diamonds) +
geom_boxplot(aes(cut, price))
ggplot(diamonds) +
geom_boxplot(aes(cut, price)) +
coord_cartesian(ylim = c(0,7500))
by(diamonds$price,diamonds$cut,summary)
# all relatively similar max and min prices
ggplot(diamonds) +
geom_boxplot(aes(color, price))
ggplot(diamonds) +
geom_boxplot(aes(color, price)) +
coord_cartesian(ylim = c(0,7600))
by(diamonds$price,diamonds$color,summary)
iqr(diamonds$price)
library(lsr)
iqr(diamonds$price)
library(SDSFoundations)
iqr(diamonds$price)
IQR(diamonds$price)
?IQR
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
ggplot(diamonds) +
geom_boxplot(aes(color, price/carat))
ggplot(diamonds) +
geom_boxplot(aes(color, price/carat)) +
coord_cartesian(ylim = c(0,6000))
by(diamonds$price/diamonds$carat,diamonds$color,summary)
diamonds$price/diamonds$carat
by(diamonds$price/diamonds$carat,diamonds$color,summary)
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, y = ..count../sum(..count..), binwidth = 10)
)
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 50))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 100))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 100)) +
scale_x_continuous()
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 100)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 10)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = 5)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .1)) +
scale_x_continuous(breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .1)) +
scale_x_continuous(breaks = seq(0,5,.1))
table(diamonds$carat)
table(diamonds$carat) > 2000
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(breaks = seq(0,5,.1))
table(diamonds$carat) > 2000
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(xlim(c(0,5)) breaks = seq(0,5,.1))
table(diamonds$carat) > 2000
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(limits = c(0,3) breaks = seq(0,5,.1))
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,5,.1))
library(ggplot2)
data(diamonds)
library(tidyverse)
glimpse(diamonds)
levels(diamonds$cut)
# histogram of price
ggplot(diamonds) +
geom_histogram(aes(price))
summary(diamonds$price)
sum(diamonds$price < 500)
sum(diamonds$price < 250)
sum(diamonds$price >= 15000)
# explore peak
ggplot(diamonds) +
geom_histogram(aes(price), color = 'black', binwidth = 50) +
coord_cartesian(xlim = c(300,2000)) +
xlab('Price') +
ylab('Count') +
ggtitle('Limited Set of Diamond Price (<= $2,000)')
# see no diamonds cost $1500, and most are around $700
# histogram of price broken out by cut
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 1000) +
facet_wrap(~ cut)
by(diamonds$price,diamonds$cut,summary)
# odd that ideal diamond cut is tied for lowest price (with premium, the next highest cut)
# also odd that ideal diamond has lowest median, and premium has the most-expensive diamond
# looking at the medians and quartiles --> they are reasonably close = distributions should be smaller
# histograms don't show that
# Fair and good seem somewhat more uniform, excluding long tail to the right
# remove fixed-y axis
ggplot(diamonds) +
geom_histogram(aes(price), binwidth = 1000) +
facet_wrap(~ cut, scales = "free_y")
# now they look more similar
# histogram of price per carat
ggplot(diamonds) +
geom_histogram(aes(price/carat), binwidth = 1000, color = 'white')
#right-skew
# transform x-axis
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.1, color = 'white')
# looks more normal
# break out by cut
ggplot(diamonds) +
geom_histogram(aes(log10(price/carat)), binwidth = 0.05, color = 'white') +
facet_grid(~cut)
# all look relatively normal, with very good looking a bit bimodal (premium a bit less so)
# boxplots
ggplot(diamonds) +
geom_boxplot(aes(clarity, price)) +
coord_cartesian(ylim = c(0,7500))
# clarity of S2 has highest median price, while IF and VVS1 have lowest, as well as least variability
# VS2 and VS1 have most variability (tallest boxes)
by(diamonds$price,diamonds$clarity,summary)
# all relatively similar max and min prices
ggplot(diamonds) +
geom_boxplot(aes(cut, price)) +
coord_cartesian(ylim = c(0,7500))
# cut of Premium has highest median price, while Ideal, Fair has least variability
# Premium also has most variability
by(diamonds$price,diamonds$cut,summary)
# all relatively similar max and min prices
ggplot(diamonds) +
geom_boxplot(aes(color, price)) +
coord_cartesian(ylim = c(0,7600))
# J "worst" color has highest median price, while "best" D is 2nd to lowest
# "worse" colors increase in median price, as well as variability
by(diamonds$price,diamonds$color,summary)
IQR(subset(diamonds, color == 'D')$price)
IQR(subset(diamonds, color == 'J')$price)
# price per carat across colors
ggplot(diamonds) +
geom_boxplot(aes(color, price/carat)) +
coord_cartesian(ylim = c(0,6000))
# relatively similar, while H is highest median, and E is lowest median
by(diamonds$price/diamonds$carat,diamonds$color,summary)
# weight of diamonds (carat) with frequency polygon
ggplot(diamonds) +
geom_freqpoly(aes(x = carat, binwidth = .01)) +
scale_x_continuous(limits = c(0,3), breaks = seq(0,5,.1))
table(diamonds$carat) > 2000
library(statsr)
library(dplyr)
library(ggplot2)
data(kobe_basket)
glimpse(kobe_basket)
head(kobe_basket)
?calc_streak
kobe_streak <- calc_streak(kobe_basket$shot)
kobe_streak
ggplot(kobe_streak) +
geom_histogram(aes(length), binwidth = 1)
IQR(kobe_streak)
IQR(kobe_streak)
kobe_streak
IQR(kobe_streak$length)
summary(kobe_streak)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, 100, TRUE)
table(sim_fair_coin)
sim_fair_coin <- sample(coin_outcomes, 100, TRUE, c(.2,.8))
table(sim_fair_coin)
shot_outcomes <- c("H", "M")
independent_shooter <- sample(shot_outcomes, 1, TRUE)
independent_shooter
independent_shooter <- sample(shot_outcomes, 1, TRUE, c(.45,.55))
independent_shooter
sim_basket <- sample(shot_outcomes, 133, TRUE, c(.45,.55))
sim_streak <- calc_streak(sim_basket)
sim_streak
summary(sim_streak)
sim_streak
ggplot(sim_streak) +
geom_histogram(aes(length), binwidth = 1)
summary(sim_streak)
pnorm(24,21,5)
(24-21)/5
pnorm(24,21,5)
(24-21)/5
qnorm(.90, 1500, 300)
qnorm(.1, 21, 5)
1 - pnorm(50,45,3.2)
(50 - 45)/3.2
qnorm(.2, 77, 5)
-.84(5) + 77
-0.84(5) + 77
-0.84*5 + 77
library(ggplot2)
library(tidyverse)
ggplot(diamonds) +
geom_bar(aes(cut, colour = cut))
#color bars w/ fill
ggplot(diamonds) +
geom_bar(aes(cut, fill = cut))
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity))
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity), alpha = 0.2, position = 'identity')
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity), position = 'identity',  alpha = 0.2)
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity), position = 'identity',  fill = NA)
ggplot(data = diamonds, mapping = aes(x = cut, colour = clarity)) +
geom_bar(fill = NA, position = "identity")
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity), position = 'identity',  fill = NA)
ggplot(diamonds) +
geom_bar(aes(cut, color = clarity), position = 'identity',  fill = NA)
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity), position = 'fill')
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity), position = 'dodge')
ggplot(mpg) +
geom_point(aes(displ,hwy), position = "jitter")
ggplot(mpg) +
geom_point(aes(displ,hwy))
ggplot(mpg) +
geom_jitter(aes(displ,hwy))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
?geom_jitter
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter(amount= 3)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_jitter()
?geom_boxplot
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, group = derv)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = cty, group = drv)) +
geom_boxplot()
?geom_boxplot
ggplot(data = mpg, mapping = aes(class, hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(class, hwy)) +
geom_boxplot(position = 'fill')
ggplot(data = mpg, mapping = aes(class, hwy, color = class)) +
geom_boxplot(position = 'fill')
ggplot(data = mpg, mapping = aes(class, hwy, color = class)) +
geom_boxplot(position = 'identity')
ggplot(data = mpg, mapping = aes(class, hwy, color = class)) +
geom_boxplot(position = 'dodge')
ggplot(mpg, aes(class, hwy, color = class)) +
geom_boxplot(position = 'identity')
ggplot(mpg, aes(class, hwy, color = class)) +
geom_boxplot() +
coord_flip()
nz <- map_data("nz")
install.packages(c("nycflights13", "gapminder", "Lahman"))
install.packages("maps")
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
bar <- ggplot(diamonds) +
geom_bar((cut, fill = cut), show.legend = FALSE, width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar <- ggplot(diamonds) +
geom_bar(aes(cut, fill = cut), show.legend = FALSE, width = 1) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar
bar + coord_flip()
bar + coord_polar()
ggplot(diamonds) +
geom_bar(aes(cut, fill = clarity)) +
coord_polar()
?labs
p <- ggplot(mtcars, aes(mpg, wt, colour = cyl)) + geom_point()
p + labs(colour = "Cylinders")
p + labs(x = "New x label")
p + labs(colour = "Cylinders")
ggplot(mtcars, aes(mpg, wt, colour = cyl)) +
geom_point() +
labs(colour = "Cylinders") + # legend
labs(x = "New x label") # x-axis
?coord_quickmap
nzmap + coord_map()
nz + coord_map()
ggplot(nz, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_map()
ggplot(nz, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
ggplot(nz, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_map()
nz <- map_data("nz")
ggplot(nz, aes(x = long, y = lat, group = group))
ggplot(nz, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_map()
ggplot(nz, aes(x = long, y = lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_abline()
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
?coord_fixed
?geom_abline
setwd('C:/Users/NEWNSS/Dropbox/DataScienceMasters/Stats/LSR/sample-master')
load('harpo.Rdata')
library(lsr)
independentSamplesTTest(grade ~ tutor, harpo, var.equal = F)
load( "chico.Rdata" )
chico <- read.csv("chico.Rdata" )
chico <- read.csv("chico.Rdata")
dir
ls
dir()
choose(n = 9, k = 2)
9! / (2!*(9 - 2)!)
factorial(9) / (factorial(2)*factorial(9 - 2))
n_choose_k <- choose(n = 10, k = 8)
n = 10
k = 8
p = .13
f = 1 - p
n_choose_k <- choose(n,k)
p_success <- n_choose_k*(p^k)*(f^(n-k)
)
p_success
choose(n,n)
choose(n,0)
choose(n,1)
choose(n,(n-1))
p_success <- n_choose_k*((p)^k)*((f)^(n-k)))
p_success <- n_choose_k*((p)^k)*((f)^(n-k))
n_choose_k
n = 10
k = 8
p = .13
f = 1 - p
n_choose_k <- choose(n,k)
(p)^k
?dbinom
dbinom(10,8,.13(
dbinom(10,8,.13)
dbinom(10,8,.13)
dbinom(10,8,.13)
dbinom(8,10,.13)
dbinom(5,20,.262)
sqrt(100*.262*(1-.262))
sqrt(1000*.262*(1-.262))
