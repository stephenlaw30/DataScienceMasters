mutate(flights,
dep_midnight = as.integer(dep_time %/% 60)*60 + as.integer(dep_time %% 60)) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = as.integer(dep_time %/% 60)*60) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = dep_time[1]*60) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = dep_time[1])
mutate(flights,
dep_midnight = dep_time[1]) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = dep_time[[1]]) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = (dep_time %/% 100)*60 + (dep_time %% 60)) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = (dep_time %/% 100)*60) %>% # + (dep_time %% 60)) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = (dep_time %/% 100) %>% # + (dep_time %% 60)) %>%
select(dep_time,dep_midnight)
)
mutate(flights,
dep_midnight = (dep_time %/% 100)) %>% # + (dep_time %% 60)) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = (dep_time %/% 100)*60 + (dep_time %% 60)) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = (dep_time %/% 100)*60 + (dep_time %% 100)) %>%
select(dep_time,dep_midnight)
mutate(flights,
dep_midnight = (dep_time %/% 100)*60 + (dep_time %% 100),
sched_dep_time_after_midnight = (sched_dep_time %/% 100)*60 + (sched_dep_time %% 100)) %>%
select(dep_time,dep_midnight,sched_dep_time_after_midnight,sched_dep_time)
mutate(flights,
dep_midnight = (dep_time %/% 100)*60 + (dep_time %% 100),
sched_dep_time_after_midnight = (sched_dep_time %/% 100)*60 + (sched_dep_time %% 100)) %>%
select(dep_time,dep_midnight,sched_dep_time,sched_dep_time_after_midnight)
mutate(flights,
air_time_2 = arr_time - dep_time) %>%
select(air_time, air_time_2)
head(flights)
mutate(flights,
air_time_2 = ((arr_time %/% 100)*60 + (arr_time %% 100)) - ((dep_time %/% 100)*60 + (dep_time %% 100))) %>%
select(air_time, air_time_2)
select(flights, sched_dep_time, dep_time, dep_delay)
mutate(flights, dep_delay2 = dep_time - sched_dep_time) %>%
select(sched_dep_time, dep_time, dep_delay, dep_delay2)
?min_rank
library(tidyverse)
library(nycflights13)
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
?min_rank
?rank
library(tidyverse)
library(nycflights13)
# explore the basic data manipulation verbs of dplyr
# nycflights13::flights --> data frame w/ all 336,776 flights departed from NYC in 2013 from Bureau of Transportation Statistics
flights
# Tibbles = data frames but slightly tweaked to work better in tidyverse.
' 5 key dplyr functions to solve vast majority of data manipulation challenges:
- filter() = Pick/subset observations by their values
- arrange() = Reorder rows
- select() = Pick variables by names
- mutate() = Create new variables w/ functions of existing variables
- summarise() = Collapse many values down to a single summary
^^ can all be used in conjunction w/ group_by() = changes scope of each function from operating on entire datasets to operating on it
group-by-group. These six functions provide the verbs for a language of data manipulation.
All verbs work similarly:
- 1st arg = data frame.
- subsequent arguments describe what to do w/ the data frame, using variable names (without quotes)
- result = a new data frame'
'******************************************************'
'5.2 FILTER'
'******************************************************'
# get just flights on Jan 1
filter(flights, month == 1, day == 1)
# cuts down to 842 flights
# save filter result dataframe
jan <- filter(flights, month == 1, day == 1)
# to save results in a variable AND view output, wrap whole statement in ()'s
# get just Christmas day flights
(dec25 <- filter(flights, month == 12, day == 25))
# CPUs use finite precision arithmetic (can't store infinite # of digits)
# remember every number you see = an approximation
# so instead of relying on ==, use near():
# fails
sqrt(2)^2 == 2
# works
near(1/49 * 49, 1)
# all flights that departed in November or December
filter(flights, month == 11 | month == 12)
# alternate with IN statement
filter(flights, month %in% c(11,12))
#  De Morgan's law
#   - !(x & y) = !x | !y
#   - !(x | y) = !x & !y
# flights that weren't delayed (on arrival AND departure) by more than 2 hours
filter(flights, dep_delay <= 120 & arr_delay <= 120)
filter(flights, !(dep_delay > 120 | arr_delay > 120))
# Whenever starting to use complicated, multipart expressions in filter(), consider making them explicit variables instead
# makes it much easier to check work
# filter() only includes rows where a condition == TRUE + excludes both FALSE + NA values.
# to preserve missing values, ask for them explicitly
df <- tibble(x = c(1, NA, 3))
filter(df, is.na(x) | x > 1)
'******************************************************'
'5.2 EXERCISES'
'******************************************************'
## Find all flights that had an arrival delay of two or more hours
filter(flights, arr_delay >= 120)
## Find all flights that Flew to Houston (IAH or HOU)
filter(flights, dest == "IAH" | dest == "HOU")
## Find all flights that Were operated by United, American, or Delta
table(flights$carrier)
filter(flights, carrier %in% c("UA","AA","DL"))
## Find all flights that Departed in summer (July, August, and September)
filter(flights, month %in% c(7:9))
## Find all flights that Arrived more than two hours late, but didn't leave late
filter(flights, arr_delay > 120 & dep_delay <= 0)
## Find all flights that Were delayed by at least an hour, but made up over 30 minutes in flight
filter(flights, dep_delay >= 60 & dep_delay-arr_delay > 30)
## Find all flights that Departed between midnight and 6am (inclusive)
filter(flights, dep_time <= 600 | dep_time >= 2400)
## Another useful dplyr filtering helper = ?between()
##  - shortcut for >= & <=
## Can you use it to simplify the code needed to answer the previous challenges?
filter(flights, between(dep_time,600,2400))
filter(flights, between(month,7,9))
## How many flights have a missing dep_time?
summary(flights$dep_time) # = 8255
## What other variables are missing? What might these rows represent?
summary(flights)
# other missing = dep_time, dep_delay, arr_time, arr_delay, air_time
# might represent cancelled flights
## Why is NA ^ 0 not missing?
# bc anything to the 0-power = 1
## Why is NA | TRUE not missing?
# bc at least 1 side is TRUE
## Why is FALSE & NA not missing?
# since 1 value if FALSE, result is FALSE since & needs both sides to be TRUE
'******************************************************'
'5.3 ARRANGE()'
'******************************************************'
# arrange() works similarly to filter() except instead of selecting rows, it changes their order.
# takes a data frame + a set of col name/more complicated expressions to order by.
# provide more than 1 column name = mulitple levels
# arrange flights by YMD in ASC
arrange(flights, year, month, day)
# arrange flights GREATEST arrival delay
arrange(flights, desc(arr_delay))
# missing values = always sorted at end
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
'******************************************************'
'5.3 EXERCISES'
'******************************************************'
# How could you use arrange() to sort all missing values to the start? (Hint: use is.na()).
summary(flights)
arrange(flights, desc(is.na(arr_delay)))
# Sort flights to find the most delayed flights.
arrange(flights, desc(dep_delay))
# Find the flights that left earliest.
arrange(flights, dep_time)
# Sort flights to find the fastest flights.
arrange(flights, desc(air_time/distance))
# Which flights travelled the longest?
arrange(flights, desc(distance))
# Which travelled the shortest?
arrange(flights, distance)
'******************************************************'
'5.4 SELECT()'
'******************************************************'
## allows you to rapidly zoom in on a useful subset using operations based on names of variables.
## useful w/ 100s-1000s of variables
# select only date cols
select(flights, year, month, day)
select(flights, year:day)
# select all cols except date cols
select(flights, -(year:day))
## Helper functions you can use within select():
##  - starts_with(), ends_with() , contains()
##  - matches(): selects variables that match a  RegEx
##  - num_range("x", 1:3) matches x1, x2 and x3.
select(flights, contains("dep"))
## can use select() to rename vars, but it drops all vars not explicitly mentioned
## instead use rename(df, new = old)
rename(flights, miles = distance)
## can use select() in conjunction w/ the everything() helper.
## useful w/ a handful of variables you'd like to move to the start of the data frame
select(flights, air_time, everything())
'******************************************************'
'5.4 EXERCISES'
'******************************************************'
## Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.
select(flights, "dep_time","dep_delay","arr_time","arr_delay")
select(flights, c(4,6,7,9))
select(flights, starts_with("dep"), starts_with("arr"))
select(flights, ends_with("time"), ends_with("delay"), -starts_with('sched'), -starts_with('air'))
select(flights, contains("dep_"), contains("arr_"), -starts_with('sched'))
## What happens if you include the name of a variable multiple times in a select() call?
select(flights, year, year)
# only shows up once
## What does one_of() function do? Why might it be helpful in conjunction with this vector?
select(flights, one_of(c("year", "month", "day", "dep_delay", "arr_delay")))
## Does the result of running the following code surprise you?
select(flights, contains("TIME"))
## How do the select helpers deal with case by default? How can you change that default?
select(flights, contains("TIME", ignore.case = F))
select(flights, contains("TIME", ignore.case = T))
'******************************************************'
'5.5 MUTATE()'
'******************************************************'
## mutate adds new variables as functions of existing ones --> only at end of dataset
# create smaller dataset to see mutate() results
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)
# new cols
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = (distance / air_time) * 60,
# refer to new vars in even newer var
hours = air_time / 60,
gain_per_hour = gain / hours)
## to only keep new vals use transmute()
transmute(flights_sml,
gain = arr_delay - dep_delay,
speed = (distance / air_time) * 60,
# refer to new vars in even newer var
hours = air_time / 60,
gain_per_hour = gain / hours)
'Many functions for creating new variables you can use w/ mutate().
- Key property = function must be *vectorised* = take a vector of values as input, return a vector w/ same # of values as output.
- Selection of functions that are frequently useful:
- Arithmetic operators: +, -, *, /, > ==> all vectorised, using "recycling rules"
- "recycling rules" = If 1 parameter is shorter than the other, it will be automatically extended to be the same length.
- most useful when 1 argument is a single number: air_time / 60, hours * 60 + minute, etc.
- Arithmetic operators are also useful in conjunction w/ the aggregate functions
- Ex: x / sum(x) calculates a proportion of a total, y - mean(y) computes difference from the mean.
- Modular arithmetic: %/% (integer division) + %% (remainder)
- x == y * (x %/% y) + (x %% y).
- Modular arithmetic = handy tool b/c allows you to break integers up into pieces.
- Can compute hour and minute from dep_time with:'
transmute(flights, hour = air_time %/% 60, minute = air_time %% 60)
transmute(flights, dep_time, hour = dep_time %/% 100, minute = dep_time %% 100)
' - Logs: log(), log2(), log10() = incredibly useful for dealing w/ data that ranges across multiple orders of magnitude.
- also convert multiplicative relationships to additive
- All else being equal, log2() = easiest to interpret --> difference of 1 on log scale = doubling on original scale +
a difference of -1 corresponds to halving.
- Offsets: lead() + lag() allow you to refer to leading or lagging values
- allows you to compute running differences (e.g. x - lag(x)) or find when values change (x != lag(x)).
- most useful in conjunction w/ group_by()'
x <- 1:10
lag(x,4) # lag vector by 4 positions (chop off last n elements)
lead(x,4) # lead vector by 4 positions (chop off 1st n elements)
'  - Cumulative + rolling aggregates = running sums, products, mins,  maxes w/ cumsum(), cumprod(), cummin(), cummax()
- dplyr provides cummean() for cumulative means
- For rolling aggregates (i.e. sum computed over a rolling window), try RcppRoll package'
cumsum(x)
cummean(x)
' - Logical comparisons, <, <=, >, >=, !=
- If doing a complex sequence of logical operations it`s often a good idea to store the interim values in new variables
so you can check that each step is working as expected.
- Ranking: # of ranking functions, but start w/ min_rank() = does most usual type of ranking (e.g. 1st, 2nd, 2nd, 4th).
- The default gives smallest values small ranks --> use desc(x) to give the largest values the smallest ranks.'
y <- c(1, 2, 2, NA, 3, 4)
?min_rank(y)
min_rank(desc(y))
'   - If min_rank() doesn`t do what you need, look at variants row_number(), dense_rank(), percent_rank(), cume_dist(), ntile(). '
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)
'******************************************************'
'5.5 EXERCISES()'
'******************************************************'
## Currently dep_time and sched_dep_time are convenient to look at, but hard to compute w/ b/c they're not really continuous numbers.
## Convert them to a more convenient representation of number of minutes since midnight.
mutate(flights,
dep_midnight = (dep_time %/% 100)*60 + (dep_time %% 100),
sched_dep_time_after_midnight = (sched_dep_time %/% 100)*60 + (sched_dep_time %% 100)) %>%
select(dep_time,dep_midnight,sched_dep_time,sched_dep_time_after_midnight)
## Compare air_time with arr_time - dep_time. What do you expect to see? What do you see? What do you need to do to fix it?
mutate(flights,
air_time_2 = ((arr_time %/% 100)*60 + (arr_time %% 100)) - ((dep_time %/% 100)*60 + (dep_time %% 100))) %>%
select(air_time, air_time_2)
# even after converting from clock format to minutes after midnight, they should be the same
## Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?
# expect sched_dep_time - dep_time = dep_delay
mutate(flights, dep_delay2 = dep_time - sched_dep_time) %>%
select(sched_dep_time, dep_time, dep_delay, dep_delay2)
# 2nd dep_delay is off due to clock formatting of time vars
##  Find the 10 most delayed flights using a ranking function. How do you want to handle ties?
Carefully read the documentation for ?min_rank().
## What does 1:3 + 1:10 return? Why?
## What trigonometric functions does R provide?
library(tidyverse)
library(nycflights13)
min_rank(y)
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
function (x)
min_rank(desc(y))
min_rank(desc(y))
arrange(flights, desc(dep_delay))
as.data.frame(head(arrange(flights, desc(dep_delay)),15))
as.data.frame(head(arrange(flights, desc(dep_delay)),15)) %>%
mutate(delayed_rank = min_rank(dep_delay))
as.data.frame(head(arrange(flights, desc(dep_delay)),15)) %>%
mutate(delayed_rank = -min_rank(dep_delay))
as.data.frame(head(arrange(flights, desc(dep_delay)),15)) %>%
mutate(delayed_rank = min_rank(-dep_delay))
as.data.frame(head(arrange(flights, desc(dep_delay)),15)) %>%
mutate(delayed_rank = min_rank(-dep_delay)) %>%
select(1:5, delayed_rank)
1:3 + 1:10
1:3
1:10
summarize(flights, delay = mean(dep_delay), na.rm = T)
summarise(flights, delay = mean(dep_delay), na.rm = T)
summarize(flights, delay = mean(dep_delay, na.rm = T))
group_by(flights, year, month, day) %>%
summarize(delay = mean(dep_delay, na.rm = T))
names(flights)
group_by(flights, dest) %>%
summarize(count = n(),
dist = mean(distance, na.rm = T),
delay = mean(dep_delay, na.rm = T)) %>%
filter(count > 20, dest != "HNL") %>%
ggplot(aes(dist,delay)) +
# make each point grow according to count of flights leaving each destination
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE) # remove CI bands
non_cancelled_flights <- filter(flights, !is.na(arr_delay), !is.na(dep_delay))
non_cancelled_flights <- filter(flights, !is.na(arr_delay), !is.na(dep_delay)) %>%
group_by(year,month,day) %>%
summarize(mean = mean(dep_delay))
non_cancelled_flights
non_cancelled_flights <- filter(flights, !is.na(arr_delay), !is.na(dep_delay))
non_cancelled_flights %>% group_by(year,month,day) %>%
summarize(mean = mean(dep_delay))
delays <- non_cancelled_flights %>%
group_by(tailnum) %>%
summarize(mean = mean(dep_delay))#
delays %>%
ggplot() +
geom_freqpoly(aes(delay), binwidth = 10)
delays <- non_cancelled_flights %>%
group_by(tailnum) %>%
summarize(delay = mean(dep_delay))# %>%
delays %>%
ggplot() +
geom_freqpoly(aes(delay), binwidth = 10)
delays2 <- non_cancelled_flights %>%
group_by(tailnum) %>%
summarize(delay = mean(dep_delay, na.rm = T),
n = n())
delays2 %>%
ggplot() +
geom_point(aes(n,delay), alpha = 1/10)
flights_sml %>%
group_by(tailnum) %>%
mean(is.na(arr_delay))
library(tidyverse)
library(nycflights13)
## Which plane (tailnum) has the worst on-time record?
flights_sml %>%
group_by(tailnum) %>%
mean(is.na(arr_delay))#))
flights_sml <- select(flights, year:day, ends_with("delay"), distance, air_time)
flights_sml %>%
group_by(tailnum) %>%
mean(is.na(arr_delay))#))
flights %>%
group_by(tailnum) %>%
mean(is.na(arr_delay))#))
non_cancelled_flights %>%
group_by(tailnum) %>%
mean(is.na(arr_delay))#))
non_cancelled_flights %>%
group_by(tailnum) %>%
mean(!is.na(arr_delay))#))
non_cancelled_flights <- filter(flights, !is.na(arr_delay), !is.na(dep_delay))
non_cancelled_flights %>% group_by(year,month,day) %>%
summarize(mean = mean(dep_delay))
non_cancelled_flights %>%
group_by(tailnum) %>%
mean(!is.na(arr_delay))#))
non_cancelled_flights %>%
group_by(tailnum) %>%
mean(is.na(arr_delay))#))
non_cancelled_flights %>%
group_by(tailnum) %>%
mean((arr_delay))#))
non_cancelled_flights %>%
group_by(tailnum) %>%
mean(arr_delay, na.rm = F)#))
non_cancelled_flights %>%
group_by(tailnum)
non_cancelled_flights %>%
group_by(tailnum) %>%
mean(arr_delay)
non_cancelled_flights %>%
group_by(tailnum) %>%
rank(desc(arr_delay))
library(tidyverse)
library(nycflights13)
library(tidyverse)
library(nycflights13)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
# ctrl + enter = run whole script
library(tidyverse)
library(tidyverse)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
source('C:/Users/Nimz/Dropbox/DataScienceMasters/R/R4DS/RForDS_CH6_Workflow_Scripts.R')
source('C:/Users/Nimz/Dropbox/DataScienceMasters/R/R4DS/RForDS_CH7_EDA.R')
library(tidyverse)
library(ggplot2)
ggplot(diamonds) +
geom_bar(aes(cut))
diamonds %>% count(cut
)
ggplot(diamonds) +
geom_histogram(aes(carat), binwidth = .5)
diamonds %>%
count(cut_width(.5))
diamonds %>%
count(cut_width(carat,.5))
small_diamonds <- diamonds %>%
filter(carat < 3)
small_diamonds %>%
count(cut_width(carat,.1))
diamonds %>%
filter(carat < 3) %>%
ggplot() + geom_histogram(aes(carat), binwidth = .1)
diamonds %>%
filter(carat < 3) %>%
ggplot() + geom_histogram(aes(carat), binwidth = .1) %>%
count(cut_width(carat,.1))
diamonds %>%
filter(carat < 3) %>%
count(cut_width(carat,.1))
ggplot(diamonds) +
geom_freqpoly(aes(carat, color = cut), binwidth = .1)
diamonds %>%
filter(carat < 3) %>%
ggplot() + geom_histogram(aes(carat), binwidth = .01)
names(faithful)
ggplot(faithful) +
geom_histogram(aes(eruptions), binwidth = .25)
ggplot(diamonds) +
geom_histogram(aes(y), binwidth = .5)
ggplot(diamonds) +
geom_histogram(aes(y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
unusual <- diamonds %>%
filter(y < 3 | y > 30) %>%
select(price,x,y,z) %>%
arrange(desc(y))
(unusual <- diamonds %>%
filter(y < 3 | y > 30) %>%
select(price,x,y,z) %>%
arrange(desc(y)))
load("aflsmall.Rdata")
library(lsr)
library(ggplot2)
who()
load("aflsmall.Rdata")
setwd("C:/Users/Nimz/Dropbox/DataScienceMasters/Stats/LSR")
load("aflsmall.Rdata")
str(afl.margins) # vector of margins
str(afl.finalists) # vector of finalists (CHAR)
summary(afl.margins) # numerical summary stats
summary(afl.finalists) # frequency table
ggplot() +
geom_histogram(aes(x = afl.margins), binwidth = 10, colour = 'red')
dataset <- c( -15,2,3,4,5,6,7,8,9,12)
summary(dataset)
mean(dataset, trim = .1)
sort(table(afl.finalists), decreasing = TRUE)
modeOf(afl.finalists)
maxFreq(afl.finalists)
?quantile
quantile(afl.margins)
quantile(afl.margins, probs = 0.5)
quantile(afl.margins, probs = 0.4)
quantile(afl.margins, probs = .333333)
quantile(afl.margins, probs = c(.25,.75))
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
# get IQR
IQR(afl.margins)
setwd("C:/Users/Nimz/Dropbox/DataScienceMasters/Stats/LSR/sample-master")
load("aflsmall.Rdata")
library(lsr)
library(ggplot2)
# z-scores for each item in a matrix-like element
scale(afl.margins)
?scale
