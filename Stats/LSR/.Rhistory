variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #324.64
#R function
var(afl.margins)
variance <- (afl.margins - mean(afl.margins))^2
(afl.margins - mean(afl.margins))^2
variance
variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #324.64
var(afl.margins)
sum( (afl.margins-mean(afl.margins))^2 ) / 4
sum((data-mean(data))^2)/4
sd(afl.margins)
median(abs(afl.margins - median(afl.margins)))
mad(afl.margins)
mad(afl.margins, constant = 1)
mad(afl.margins) #28.9107
In short, the IQR and the SD are easily the 2 most common measures used to report variability of data, but there are situations in which the others are used. Iâ€™ve described all of
library( psych )
install.packages('psych')
library(psych)
skew(afl.margins)
kurtosi(afl.margins)
load('aflsmall.Rdata')
library(lsr)
library(ggplot2)
install.packages('lsr')
library(lsr)
library(ggplot2)
who()
str(afl.margins)
summary(afl.margins)
ggplot() + geom_histogram(aes(x = afl.margins), binwidth = 10, colour = 'red')
dataset <- c( -15,2,3,4,5,6,7,8,9,12)
summary(dataset)
mean(dataset, trim = .1)
mean(afl.margins, trim = 0.05) #33.75
sort(table(afl.finalists), decreasing = TRUE)
modeOf(afl.finalists)
maxFreq(afl.finalists)
modeOf(afl.margins) #3
maxFreq(afl.margins) #8 times
afl.margins
modeOf(afl.margins) # 3
length(afl.margins)
(maxFreq(afl.margins)/length(afl.margins))*100 #4.545% chance of winning
(maxFreq(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(mean(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(median(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
mean(afl.margins)
maxFreq(afl.margins)
modeOf(afl.margins) # 3 pt. margin
afl.margins
mean(afl.margins) = afl.margins
mean(afl.margins) == afl.margins
count(mean(afl.margins) == afl.margins)
sum(mean(afl.margins) == afl.margins)
(sum(mean(afl.margins) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(sum(median(afl.margins) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
round(mean(afl.margins))
sum(round(mean(afl.margins)) == afl.margins)
(sum(round(mean(afl.margins)) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
sum(round(median(afl.margins)) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(sum(round(median(afl.margins)) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
load('aflsmall.Rdata')
#install.packages('lsr')
#install.packages('ggplot2')
library(lsr)
library(ggplot2)
max(afl.margins)-min(afl.margins)
range(afl.margins)
quantile(afl.margins)
quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = 0.75)
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = c(.25,.75))
IQR(afl.margins)
quantile(afl.margins, probs = c(.25,.75))
quantile(afl.margins, probs = c(.25,.75))
# calculate IQR
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
IQR(afl.margins)
data <- c(56, 31, 56, 8, 32)
mean(data)
variations <- abs(data - mean(data))
mean(variations) #15.52 = mean absolute deviation for these 5 scores
aad(data)
variance <- (data - mean(data))^2
mean(variance) #324.64
var(data) #405.8
?var
variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #675.9718
var(afl.margins) #679.8345
sum((data-mean(data))^2)/4 #405.8
sum((data-mean(data))^2)/4 #405.8
var(data) #405.8
sd(afl.margins)
median(abs(afl.margins - median(afl.margins))) #19.5
?mad
?aad
mad(afl.margins, constant = 1) #19.5
mad(afl.margins) #28.9107
load('aflsmall.Rdata')
install.packages('psych')
library(lsr)
library(ggplot2)
library(psych)
skew(afl.margins) #0.7671555
kurtosi(afl.margins) #close to mesokurtic = just pointy enough.
summary(afl.margins)
describe(afl.margins)
summary(afl.margins)
?summary
class(afl.margins)
blowouts <- afl.margins > 50
summary(blowouts)
summary(afl.finalists)
class(blowouts)
class(afl.finalists)
table(afl.finalists)
finalists2 <- as.character(afl.finalists)
class(finalists2)
summary(finalists2)
load('clinicaltrial.Rdata')
load('clinicaltrial.Rdata')
summary(clin.trial)
describe(afl.margins)
describe(clin.trial)
library(psych)
describe.by(clin.trial,therapy)
describeBy(clin.trial,therapy)
describeBy(clin.trial,clin.trial$therapy)
by(clin.trial, clin.trial$therapy, FUN = describe())
?by
by(clin.trial, INDICES = clin.trial$therapy, FUN = describe())
by(data = clin.trial, INDICES = clin.trial$therapy, FUN = describe())
by( data=clin.trial, INDICES=clin.trial$therapy, FUN=describe)
by(clin.trial, clin.trial$therapy, describe)
by(clin.trial, clin.trial$therapy, summary
)
?aggregate
aggregate(mood.gain ~ drug + therapy,
data = clin.trial,
mean)
aggregate(mood.gain ~ drug + therapy,
data = clin.trial,
sd)
pnorm(3.6)
load('aflsmall.Rdata')
?scale
scale(afl.margins)
head(afl.finalists)
head(afl.margins)
load('clinicaltrial.Rdata')
head(clin.trial$drug,clin.trial$mood.gain)
cor
cor(clin.trial$drug,clin.trial$mood.gain)
cor(clin.trial$mood.gain,clin.trial$drug)
library(lsr)
partial <- c(10, 20, NA, 30)
IQ <- round(rnorm(n = 10000, mean = 100, sd = 15))
head(IQ)
mean(IQ)
library(ggplot2)
ggplot() + geom_histogram(IQ)
ggplot(IQ) + geom_histogram()
ggplot(as.factor(IQ) + geom_histogram()
ggplot(as.factor(IQ)) + geom_histogram()
ggplot(as.character(IQ)) + geom_histogram()
hist(IQ)
# generate 10k rounded IQ scores
IQ <- round(rnorm(n = 100, mean = 100, sd = 15))
head(IQ)
mean(IQ)
library(ggplot)
hist(IQ)
IQ2 <- round(rnorm(n = 10000, mean = 100, sd = 15))
head(IQ2)
mean(IQ2)
library(ggplot2)
hist(IQ2)
IQ3 <- round(rnorm(n = 1000000, mean = 100, sd = 15))
head(IQ3)
mean(IQ3)
library(ggplot3)
hist(IQ3)
# generate 10k rounded IQ scores
IQ <- round(rnorm(n = 100, mean = 100, sd = 15))
head(IQ)
mean(IQ)
library(ggplot2)
hist(IQ)
IQ2 <- round(rnorm(n = 10000, mean = 100, sd = 15))
head(IQ2)
mean(IQ2)
hist(IQ2)
IQ3 <- round(rnorm(n = 1000000, mean = 100, sd = 15))
head(IQ3)
mean(IQ3)
hist(IQ3)
iq <- rnorm(5,100,15)
mean(iq)
iq <- rnorm(2,100,15)
mean(iq)
iq <- rep(rnorm(2,100,15),10000)
iq
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
iq <- rep(mean(rnorm(2,100,15)),10000)
iq
mean(rnorm(2,100,15)
mean(rnorm(2,100,15)
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
mean(rnorm(2,100,15))
iq <- sample(mean(rnorm(2,100,15)),10000)
iq <- sample(mean(rnorm(2,100,15)),10000, replace = T)
iq
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
iq
hist(iq)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
function (x, ...)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),10000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),100000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),100000, replace = T)
hist(iq)
iq <- sample(sd(rnorm(2,100,15)),100000, replace = T)
hist(iq)
rnorm(2,100,15)
rnorm(2,100,15)
rnorm(2,100,15)
sd(rnorm(2,100,15)
sd(rnorm(2,100,15)
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
sd(rnorm(2,100,15))
rep(sd(rnorm(2,100,15)),100000)
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
sd(rep(rnorm(2,100,15),100000))
rep(sd(rep(rnorm(2,100,15),100000)),100000)
rep(sd(rep(rnorm(2,100,15),100000)),100000)
rep(sd(rep(rnorm(2,100,15),100000)),100000)
sample_sd = rep(NA, 1000)
for(i in 1:1000){
sample_sd[i] = sd(rnorm(2,100,15))
}
hist(sample_sd)
sample_sd = rep(NA, 10000)
for(i in 1:10000){
sample_sd[i] = sd(rnorm(2,100,15))
}
hist(sample_sd)
qnorm(c(0.025,0.975))
qnorm(c(0.025,0.975))
n <- 10000
#calculate the 97.5th quantile of the t-dist
qt( p = .975, df = N-1)
n <- 10000
qt( p = .975, df = n - 1)
n = 10
qt( p = .975, df = n - 1)
who()
library(lsr)
who()
load('aflsmall.Rdata')
load('afl24.Rdata')
ciMean(afl$attendance)
library( sciplot ) # bargraph.CI() and lineplot.CI() functions
library( gplots ) # plotmeans() function
install.packages('sciplot')
library( sciplot ) # bargraph.CI() and lineplot.CI() functions
library( gplots ) # plotmeans() function
>bargraph.CI(x.factor = year, # grouping variable
+ response = attendance, # outcome
+ data = afl, # data
+ ci.fun= ciMean, # name of function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance" # y-axis label
)
bargraph.CI(x.factor = year, # grouping variable
+ response = attendance, # outcome
+ data = afl, # data
+ ci.fun= ciMean, # name of function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance" # y-axis label
)
bargraph.CI(x.factor = year, # grouping variable
+ response = attendance, # outcome
+ data = afl, # data
+ ci.fun= ciMean, # name of function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance" # y-axis label
)
bargraph.CI(x.factor = year, # grouping variable
+ response = attendance, # outcome
+ data = afl, # data
+ ci.fun= ciMean, # name of function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance")
bargraph.CI(x.factor = year, # grouping variable
+ response = attendance, # outcome
+ data = afl, # data
+ ci.fun= ciMean, # name of function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance" # y-axis label
+
)
bargraph.CI( x.factor = year, # grouping variable
+ response = attendance, # outcome variable
+ data = afl, # data frame with the variables
+ ci.fun= ciMean, # name of the function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance" # y-axis label
+ )
bargraph.CI( x.factor = year, # grouping variable
+ response = attendance, # outcome variable
+ data = afl, # data frame with the variables
+ ci.fun= ciMean, # name of the function to calculate CIs
+ xlab = "Year", # x-axis label
+ ylab = "Average Attendance" # y-axis label
)
bargraph.CI( x.factor = year, # grouping variable
+ response = attendance, # outcome variable
+ data = afl, # data frame with the variables
+ ci.fun= ciMean, # name of the function to calculate CIs
+ xlab = 'Year', # x-axis label
+ ylab =' Average Attendance' # y-axis label
)
bargraph.CI( x.factor = year, # grouping variable
+ response = attendance, # outcome variable
+ data = afl, # data frame with the variables
+ ci.fun= ciMean)
?bargraph.CI
bargraph.CI(x.factor = year, # grouping variable
response = attendance, # outcome
data = afl, # data
ci.fun= ciMean, # name of function to calculate CIs
xlab = "Year", # x-axis label
ylab = "Average Attendance" # y-axis label
)
lineplot.CI(x.factor = year, # grouping variable
response = attendance, # outcome
data = afl, # data
ci.fun= ciMean, # name of function to calculate CIs
xlab = "Year", # x-axis label
ylab = "Average Attendance" # y-axis label
)
#do same with plotmeans():
plotmeans(attendance ~ year, # outcome ~ group
afl, # data frame with the variables
n.label = FALSE # donâ€™t show sample size drawn using bargraph.CI().
)
plotmeans(attendance ~ year, # outcome ~ group
afl, # data frame with the variables
n.label = T # donâ€™t show sample size
)
?rnorm
data <- rnorm(n = 100)
hist(data)
# qq plot
qqnorm(data)
shapiro.test(data)
load("aflsmall.Rdata")
library(lsr)
library(ggplot2)
who()
str(afl.margins)
str(afl.finalists)
summary(afl.margins)
summary(afl.finalists)
ggplot() + geom_histogram(aes(x = afl.margins), binwidth = 10, colour = 'red')
dataset <- c( -15,2,3,4,5,6,7,8,9,12)
summary(dataset)
mean(dataset, trim = .1)
source('C:/Users/NEWNSS/Dropbox/DataScienceMasters/Stats/LSR/Chapter5.1_DescriptiveStats.R')
summary(dataset)
# 10% trimmed mean (trim off top + bottom 10% of data)
mean(dataset, trim = .1)
# same answer as median
mean(afl.margins, trim = 0.05) #33.75
sort(table(afl.finalists), decreasing = TRUE)
modeOf(afl.finalists)
maxFreq(afl.finalists)
modeOf(afl.margins) # 3 pt. margin
maxFreq(afl.margins) # occured 8 times
sum(round(mean(afl.margins)) == afl.margins)
(maxFreq(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(sum(round(mean(afl.margins)) == afl.margins)/length(afl.margins))*100 #2.272727% chance of winning if we pick the mean
(sum(round(median(afl.margins)) == afl.margins)/length(afl.margins))*100 #0.5681818% chance of winning if we pick the median
range(afl.margins)
max(afl.margins) - min(afl.margins)
quantile(afl.margins)
#get Q1
quantile(afl.margins, probs = 0.25)
#get Q2/median
quantile(afl.margins, probs = 0.5)
#get Q3
quantile(afl.margins, probs = 0.75)
quantile(afl.margins, probs = c(.25,.75))
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
IQR(afl.margins)
variations <- abs(data - mean(data))
data <- c(56, 31, 56, 8, 32)
mean(data) #36.6
variations <- abs(data - mean(data))
mean(variations) #15.52 = mean absolute deviation for these 5 scores
aad(data)
variance <- (data - mean(data))^2
mean(variance) #324.64
var(data) #405.8
variance
variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #675.9718
var(afl.margins) #679.8345
variance2 <- (afl.margins - mean(afl.margins))^2
mean(variance2) #675.9718
var(afl.margins) #679.8345
## Variance
variance <- (data - mean(data))^2
mean(variance) #324.64
#Base R function for variance
var(data) #405.8
'Answers are different? Check w/ afl.margins data'
variance2 <- (afl.margins - mean(afl.margins))^2
mean(variance2) #675.9718
var(afl.margins) #679.8345
sum((data-mean(data))^2)/4 #405.8
var(data) #405.8
sd(afl.margins)
median(abs(afl.margins - median(afl.margins))) #19.5
# R stats function
mad(afl.margins, constant = 1) #19.5
# default value of constant = 1.4826
mad(afl.margins) #28.9107
