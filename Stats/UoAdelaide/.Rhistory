(4.5 - 6.7) / 1.1
(5.38 - 6.7) / 1.1
(8.79 - 6.7) / 1.1
minutesStudying <- c(30,45,180,95,130,140,30,80,60,110,0,80)
grade <- c(74,68,87,90,94,84,92,88,82,93,65,90)
cbind(minutesStudying,grade)
df <- data.frame(cbind(minutesStudying,grade))
df
cor(df$minutesStudying,df$grade)
1 - (0.597**2)
library(ggplot2)
ggplot(df) + geom_point(aes(x = minutesStudying, y = grade))
new.df <- df[!df$grade == 92]
new.df <- df[!df$grade == 92,]
new.df
cor(new.df$minutesStudying,new.df$grade) #0.5967026 = 0.597
0.597**2
(0.597**2)
state <- c('CT','DE','MN','MA','NH','NJ','NY','PA','RI','VT')
millionares <- c(86,18,22,141,25,207,368,228,20,11)
pop <- c(35,8,13,64,13,87,193,124,11,6)
df <- cbind(state,millionares,pop)
df
rownames(df) <- state
rownames
df
df <- cbind(millionares,pop)
rownames(df) <- state
df
df
cor(df$millionares,df$pop)
df <- as.data.frame(df)
df
df <- cbind(millionares,pop)
df <- as.data.frame(df)
rownames(df) <- state
df
cor(df$millionares,df$pop
)
cor(df$millionares,df$pop)^2
df$new_pop <- df$State.Population – min(df$State.Population)
df$new_pop <- df$State.Population – min(df$State.Population)
df$new_pop <- df$pop – min(df$pop)
new_pop <- pop - min(pop)
new_pop
df$new_pop <- new_pop
library(SDSFoundations)
linFit(df$pop, df$millionares)
linFit(df$new_pop, df$millionares)
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
runs$X <- NULL
head(runs,2)
library(lubridate)
runs$Time <- as.POSIXct(runs$Time)#, format = '%H:%M:%S')
runs$Avg.Pace <- as.POSIXct(runs$Avg.Pace)#, format = '%H:%M:%S')
runs$Date <- as.POSIXct(runs$Date)
runs$StartTime <- hour(strptime(runs$StartTime, format = '%H:%M'))
str(runs)
runs$Month <- factor(runs$Month, ordered = TRUE, levels = c("Jul","Aug","Sep","Oct","Nov"))
library(ggplot2)
library(RColorBrewer)
#distance histogram
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..), colour = "black", boundary = 2) +
scale_x_continuous(limits=c(0, 30)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
guides(fill=FALSE)
summary(runs$Distance)
#miles by month bars
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Total Miles") +
guides(fill=FALSE) +
ggtitle("Total Miles by Month")
ggplot(data = runs, aes(x = weekNumber, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Week of Plan") +
ylab("Total Miles") +
#guides(fill=FALSE) +
ggtitle("Total Miles by Week of Plan")
runs[runs$weekNumber == 11,c('Name','weekNumber','Date','DOW','Distance')]
#avg. cadence grouped by month
ggplot(data = runs, aes(Month, Cad)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("") +
ylab("Cadence (Steps/Min)") +
guides(fill=FALSE) +
ggtitle("Cadence by Month")
#avg. HR grouped by month
ggplot(data = runs, aes(Month, Avg.HR)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("Month") +
ylab("Avg. Heart Rate") +
ggtitle("Average Heart Rate per Month")
#avg. cadence grouped by month
pl <- ggplot(data = runs, aes(RunType, Cad)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Cadence") +
guides(fill=FALSE) +
coord_flip() +
ggtitle("Cadence per Run Type")
print(pl)
#avg. cadence grouped by month
ggplot(data = runs, aes(RunType, Avg.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
xlab("Run Type") +
ylab("Avg Heart Rate") +
guides(fill=FALSE) +
ggtitle("Average Heart Rate per Run Type")
runs[which.max(runs$Avg.HR),]
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
table(runs$RunType)
#apply(runs$Cadence, runs$RunType, function(x) (Cad*(hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60)))
ggplot(data = runs, aes(RunType, (Cad*((hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60))))) +
geom_bar(aes(fill = RunType), stat = "identity") +
xlab("Run Type") +
ylab("Steps") +
guides(fill=FALSE) +
ggtitle("Total Steps Taken by Run Type")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
ggtitle("Average Hear Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=RunType, y=Max.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType), outlier.colour = "black", alpha = 0.5) +
xlab("Run Type") +
ylab("Max Heart Rate (BPM)") +
ggtitle("Max Heart Rate by Run Type")
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
pl <- ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
print(pl)
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(-110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
geom_smooth(fill = NA, na.rm = TRUE) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = FALSE) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType), na.rm = TRUE) +
xlab("Cadence") +
ylab("Average Heart Rate") +
scale_y_continuous(limits = c(110, 160)) +
ggtitle("Average Heart Rate by Cadence")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UoAdelaide')
load('aflsmall.Rdata')
load('aflsmall.Rdata')
library(lsr)
library(ggplot2)
install.packages('lsr')
install.packages('ggplot2')
library(lsr)
library(ggplot2)
who()
summary(afl.margins)
sre(adl.margins)
str(adl.margins)
str(afl.margins)
ggplot() + geom_histogram(aes(x = afl.margins), binwidth = 10, colour = 'red')
dataset <- c( -15,2,3,4,5,6,7,8,9,12 )
summmary(dataset)
summary(dataset)
mean(dataset, trim = .1)
mean(afl.margins, trim = 0.05)
table(afl.finalists)
sort(table(afl.finalists))
?sort
sort(table(afl.finalists), decreasing = TRUE)
modeOf(afl.finalists)
maxFreq(afl.finalists)
modeOf(afl.finalists)
maxFreq(afl.finalists)
str(afl.margins)
summary(afl.margins)
ggplot() + geom_histogram(aes(x = afl.margins), binwidth = 10, colour = 'red')
* Ex: afl.margins variable --> clearly a ratio (point differential), so in most situations the mean or median is the measure of central tendency that you want. But consider
modeOf(afl.margins)
maxFreq(afl.margins)
nrow(afl.margins)
length(afl.margins)
(maxFreq(afl.margins)/length(afl.margins))*100
setwd('C:/Users/snewns/Dropbox/DataScienceMasters/Stats/UoAdelaide')
load('aflsmall.Rdata')
#install.packages('lsr')
#install.packages('ggplot2')
library(lsr)
library(ggplot2)
max(afl.margins)-min(afl.margins)
range(afl.margins)
quartile(afl.margins)
quartile(afl.margins, probs = 0.5)
quantile(afl.margins, probs = 0.5)
quantile(afl.margins)
quantile(afl.margins)
quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = 0.5)
quantile(afl.margins, probs = 0.75)
quantile(afl.margins, probs = c(.25,.75))
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
IQR(afl.margins)
data <- c(56, 31, 56, 8, 32)
data <- c(56, 31, 56, 8, 32)
mean(data)
variations <- data - mean(data)
variations
variations <- abs(data - mean(data))
variations
mean(variations)
aad(data)
mean(data)
variance <- (data - mean(data)^2
mean(variance)
variance <- (data - mean(data))^2
mean(variance
mean(variance)
variance <- (data - mean(data))^2
mean(variance)
var(data)
variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #324.64
#R function
var(afl.margins)
variance <- (afl.margins - mean(afl.margins))^2
(afl.margins - mean(afl.margins))^2
variance
variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #324.64
var(afl.margins)
sum( (afl.margins-mean(afl.margins))^2 ) / 4
sum((data-mean(data))^2)/4
sd(afl.margins)
median(abs(afl.margins - median(afl.margins)))
mad(afl.margins)
mad(afl.margins, constant = 1)
mad(afl.margins) #28.9107
In short, the IQR and the SD are easily the 2 most common measures used to report variability of data, but there are situations in which the others are used. I’ve described all of
library( psych )
install.packages('psych')
library(psych)
skew(afl.margins)
kurtosi(afl.margins)
load('aflsmall.Rdata')
library(lsr)
library(ggplot2)
install.packages('lsr')
library(lsr)
library(ggplot2)
who()
str(afl.margins)
summary(afl.margins)
ggplot() + geom_histogram(aes(x = afl.margins), binwidth = 10, colour = 'red')
dataset <- c( -15,2,3,4,5,6,7,8,9,12)
summary(dataset)
mean(dataset, trim = .1)
mean(afl.margins, trim = 0.05) #33.75
sort(table(afl.finalists), decreasing = TRUE)
modeOf(afl.finalists)
maxFreq(afl.finalists)
modeOf(afl.margins) #3
maxFreq(afl.margins) #8 times
afl.margins
modeOf(afl.margins) # 3
length(afl.margins)
(maxFreq(afl.margins)/length(afl.margins))*100 #4.545% chance of winning
(maxFreq(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(mean(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(median(afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
mean(afl.margins)
maxFreq(afl.margins)
modeOf(afl.margins) # 3 pt. margin
afl.margins
mean(afl.margins) = afl.margins
mean(afl.margins) == afl.margins
count(mean(afl.margins) == afl.margins)
sum(mean(afl.margins) == afl.margins)
(sum(mean(afl.margins) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(sum(median(afl.margins) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
round(mean(afl.margins))
sum(round(mean(afl.margins)) == afl.margins)
(sum(round(mean(afl.margins)) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
sum(round(median(afl.margins)) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
(sum(round(median(afl.margins)) == afl.margins)/length(afl.margins))*100 #4.545% chance of winning if we pick the mode
load('aflsmall.Rdata')
#install.packages('lsr')
#install.packages('ggplot2')
library(lsr)
library(ggplot2)
max(afl.margins)-min(afl.margins)
range(afl.margins)
quantile(afl.margins)
quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = 0.75)
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
quantile(afl.margins, probs = c(.25,.75))
IQR(afl.margins)
quantile(afl.margins, probs = c(.25,.75))
quantile(afl.margins, probs = c(.25,.75))
# calculate IQR
quantile(afl.margins, probs = 0.75) - quantile(afl.margins, probs = 0.25)
IQR(afl.margins)
data <- c(56, 31, 56, 8, 32)
mean(data)
variations <- abs(data - mean(data))
mean(variations) #15.52 = mean absolute deviation for these 5 scores
aad(data)
variance <- (data - mean(data))^2
mean(variance) #324.64
var(data) #405.8
?var
variance <- (afl.margins - mean(afl.margins))^2
mean(variance) #675.9718
var(afl.margins) #679.8345
sum((data-mean(data))^2)/4 #405.8
sum((data-mean(data))^2)/4 #405.8
var(data) #405.8
sd(afl.margins)
median(abs(afl.margins - median(afl.margins))) #19.5
?mad
?aad
mad(afl.margins, constant = 1) #19.5
mad(afl.margins) #28.9107
load('aflsmall.Rdata')
install.packages('psych')
library(lsr)
library(ggplot2)
library(psych)
skew(afl.margins) #0.7671555
kurtosi(afl.margins) #close to mesokurtic = just pointy enough.
summary(afl.margins)
describe(afl.margins)
summary(afl.margins)
?summary
class(afl.margins)
blowouts <- afl.margins > 50
summary(blowouts)
summary(afl.finalists)
class(blowouts)
class(afl.finalists)
table(afl.finalists)
finalists2 <- as.character(afl.finalists)
class(finalists2)
summary(finalists2)
load('clinicaltrial.Rdata')
load('clinicaltrial.Rdata')
summary(clin.trial)
describe(afl.margins)
describe(clin.trial)
library(psych)
describe.by(clin.trial,therapy)
describeBy(clin.trial,therapy)
describeBy(clin.trial,clin.trial$therapy)
by(clin.trial, clin.trial$therapy, FUN = describe())
?by
by(clin.trial, INDICES = clin.trial$therapy, FUN = describe())
by(data = clin.trial, INDICES = clin.trial$therapy, FUN = describe())
by( data=clin.trial, INDICES=clin.trial$therapy, FUN=describe)
by(clin.trial, clin.trial$therapy, describe)
by(clin.trial, clin.trial$therapy, summary
)
?aggregate
aggregate(mood.gain ~ drug + therapy,
data = clin.trial,
mean)
aggregate(mood.gain ~ drug + therapy,
data = clin.trial,
sd)
pnorm(3.6)
load('aflsmall.Rdata')
?scale
scale(afl.margins)
head(afl.finalists)
head(afl.margins)
load('clinicaltrial.Rdata')
head(clin.trial$drug,clin.trial$mood.gain)
cor
cor(clin.trial$drug,clin.trial$mood.gain)
cor(clin.trial$mood.gain,clin.trial$drug)
library(lsr)
partial <- c(10, 20, NA, 30)
