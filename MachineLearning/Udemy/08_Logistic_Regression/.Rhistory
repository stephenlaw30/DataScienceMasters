ggplot(diamonds, aes(cut,price)) +
geom_lv()
?geom_lv
ggplot(diamonds, aes(cut,price), fill = ..lv..) +
geom_lv()
ggplot(diamonds, aes(cut,price), fill = ..LV..) +
geom_lv()
ggplot(diamonds, aes(cut,price, fill = ..LV..)) +
geom_lv()
#
ggplot(diamonds, aes(cut,price, color = ..LV..)) +
geom_lv()
ggplot(diamonds, aes(cut,price, fill = ..LV..)) +
geom_lv()
ggplot(diamonds, aes(cut,price)) +
geom_violin()
ggplot(diamonds, aes(price)) +
facet_wrap(~cut)
ggplot(diamonds, aes(price)) +
geom_histogram() +
facet_wrap(~cut)
ggplot(diamonds, aes(cut,price)) +
geom_violin()
ggplot(diamonds, aes(price)) +
geom_histogram() +
facet_wrap(~cut)
If you have a small dataset, itâ€™s sometimes useful to use geom_jitter() to see the relationship between a continuous and categorical variable. The ggbeeswarm package provides a number of methods similar to geom_jitter(). List them and briefly describe what each one does.
ggplot(diamonds, aes(cut,price)) +
geom_violin()
ggplot(diamonds, aes(price)) +
geom_histogram() +
facet_wrap(~cut)
ggplot(diamonds) +
geom_freqpoly(aes(price,..density.., color = cut))
install.packages("ggbeeswarm")
library(ggbeeswarm)
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot() +
geom_beeswarm()
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot()
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot() +
geom_beeswarm()
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot() +
geom_beeswarm(priority = "density")
install.packages("ggbeeswarm")
library(ggbeeswarm)
ggplot(diamonds) +
geom_boxplot(aes(cut,carat)) +
geom_beeswarm(aes(cut,carat), priority = "density")
set.seed(2146854)
library(statsr) # data for lab
library(dplyr) # explore data
library(ggplot2) # viz
data(ames)
library(statsr) # data for lab
library(dplyr) # explore data
library(tidyverse)
library(ggplot2) # viz
library(statsr) # data for lab
library(dplyr) # explore data
library(tidyverse)
library(ggplot2) # viz
data(ames)
glimpse(ames)
n <- 60
samp <- sample_n(ames,n)
ggplot(samp,aes(area)) +
geom_histogram()
ggplot(samp,aes(area)) +
geom_histogram(binwidth = 1000)
ggplot(samp,aes(area)) +
geom_histogram(binwidth = 500)
ggplot(samp,aes(area)) +
geom_histogram(binwidth = 250)
ggplot(samp,aes(area)) +
geom_histogram(binwidth = 250)
summary(samp$area)
(z_star_95 <- qnorm(0.975))
std.err.area <- sd(area)/sqrt(n)
std.err.area <- sd(area)/sqrt(n)
samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area <- z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area)
samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area)
samp %>%
mutate(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area)
samp %>%
summarise(lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area)
std.err.area <- sd(samp$area)/sqrt(n)
mOe.area <- z_star_95*std.err.area)
std.err.area <- sd(samp$area)/sqrt(n)
mOe.area <- z_star_95*std.err.area
samp %>%
summarise(lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area)
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
samp %>%
mutate(
samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area)
samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area)
samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper)
params <- ames %>%
summarise(mu = mean(area))
(params <- ames %>%
summarise(mu = mean(area)))
ci <- samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper)
(ci <- samp %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper))
if_else(params$mu between(ci$lower,ci$upper)),"yes","no")
?between
if_else(between(params$mu,ci$lower,ci$upper)),"yes","no")
?if_else
if_else(between(params$mu,ci$lower,ci$upper),"yes","no")
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper)
#ci <- ames %>%
#       rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
#      summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
#               upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
head(ci)
ci %>%
slice(1:5)
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper)
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_95*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper)
ci %>%
slice(1:5)
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
(ci <- ci %>%
mutate(capture_mu = ifelse(between(params$mu,lower,upper), "yes", "no")))
(ci <- ci %>%
mutate(capture_mu = if_else(between(params$mu,lower,upper), "yes", "no")))
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no")))
(ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no")))
(ci <- ci %>%
#mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no")))
mutate(capture_mu = if_else(between(params$mu,ci$lower,ci$upper),"yes","no")))
(ci <- ci %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no")))
ci <- ci %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci %>%
slice[1:5]
ci <- ci %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci %>%
slice(1:5)
(ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu)))
(ci_data <- ci %>%
data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(lower, upper),
capture_mu = c(capture_mu, capture_mu)))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
head(ci_data)
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
ci %>%
summarise(prop = mean(capture_mu))
ci %>%
summarise(prop = sum(capture_mu))
prop.table(ci$capture_mu)
prop.table(table(ci$capture_mu))
(z.crit <- qnorm(1-(1 - .99)/2))
(z_star_99 <- qnorm(1-(1 - .99)/2))
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
prop.table(table(ci$capture_mu))
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
prop.table(table(ci$capture_mu))
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
#prop.table(table(ci$capture_mu))
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
#prop.table(table(ci$capture_mu))
ci <- NULL
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
#prop.table(table(ci$capture_mu))
# type your code for the Exercise here, and Knit
ci <- ames %>%
rep_sample_n(n, 50, replace = T) %>%
summarise(std.err.area = sd(area)/sqrt(n),
mOe.area = z_star_99*std.err.area,
lower = mean(area) - mOe.area,
upper = mean(area) + mOe.area) %>%
select(lower, upper) %>%
mutate(capture_mu = if_else(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
ggplot(ci_data, aes(ci_bounds, ci_id, group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
prop.table(table(ci$capture_mu))
?pnorm
pnorm(2,0,lower.tail = F)
pnorm(2,0,lower.tail = F)*2
pnorm(2,0,lower.tail = F)*2
(pnorm(2,0,lower.tail = F)*2) # only 1-sided hypothesis
pt(2,50)
pt(2,50, lower.tail = F)
pt(2, 50, lower.tail = F)*2
pt(2, 10, lower.tail = F)*2
(pnorm(2,0,lower.tail = F)*2) # only 1-sided hypothesis
pt(2, 50, lower.tail = F)*2
pt(2, 10, lower.tail = F)*2
(pnorm(2,0,lower.tail = F)*2) # only 1-sided hypothesis
pt(2, 50, lower.tail = F)*2
pt(2, 10, lower.tail = F)*2
?qt
qt(p = .025, df = dF)
## find critical value of t for sample size of 22
n <- 22
dF <- n - 1
qt(p = .025, df = dF)
## find critical value of t for sample size of 22
n <- 22
dF <- n - 1
abs(qt(p = .025, df = dF)) # find percentile
x.bar.s <- 52.1
s <- 45.1
t.crit <- abs(qt(p = .025, df = dF))
SE <- s / sqrt(n)
mOe <- t.crit * SE
lower <- x.bar.s - mOe
upper <- x.bar.s + mOe
# construct the confidence interval for the average snacking level of distracted eaters
x.bar.s <- 52.1
s <- 45.1
t.crit <- abs(qt(p = .025, df = dF))
SE <- s / sqrt(n)
mOe <- t.crit * SE
(lower <- x.bar.s - mOe)
(upper <- x.bar.s + mOe)
null.mu <- 30
(t <- (x.bar.s - null.mu) / SE)
pt(t, n, lower.tail = F)
pt(t, n, lower.tail = F)*2
pt(t, dF, lower.tail = F)*2
# probability of obtaining this mean x.bar.s t w/ 21 dF if null = 30 is true
pt(t, dF, lower.tail = F)*2
install.packages("shiny")
install.packages("RPresto")
devtools::install_github("ricardo-bion/ggtech", dependencies=TRUE)
install.packages("extrafont")
library(extrafont)
## Facebook
download.file("http://social-fonts.com/assets/fonts/facebook-letter-faces/facebook-letter-faces.ttf", "/Library/Fonts/facebook-letter-faces.ttf", method="curl")
font_import(pattern = 'facebook-letter-faces.ttf', prompt=FALSE)
## Google
download.file("http://social-fonts.com/assets/fonts/product-sans/product-sans.ttf", "/Library/Fonts/product-sans.ttf", method="curl")
font_import(pattern = 'product-sans.ttf', prompt=FALSE)
## Airbnb
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Medium%203.46.45%20PM.ttf", "/Library/Fonts/Circular Air-Medium 3.46.45 PM.ttf", method="curl")
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Bold%203.46.45%20PM.ttf", "/Library/Fonts/Circular Air-Bold 3.46.45 PM.ttf", method="curl")
font_import(pattern = 'Circular', prompt=FALSE)
## Etsy
download.file("https://www.etsy.com/assets/type/Guardian-EgypTT-Text-Regular.ttf", "/Library/Fonts/Guardian-EgypTT-Text-Regular.ttf", method="curl")
font_import(pattern = 'Guardian-EgypTT-Text-Regular.ttf', prompt=FALSE)
## Twitter
download.file("http://social-fonts.com/assets/fonts/pico-black/pico-black.ttf", "/Library/Fonts/pico-black.ttf", method="curl")
download.file("http://social-fonts.com/assets/fonts/arista-light/arista-light.ttf", "/Library/Fonts/arista-light.ttf", method="curl")
font_import(pattern = 'pico-black.ttf', prompt=FALSE)
font_import(pattern = 'arista-light.ttf', prompt=FALSE)
library(extrafont)
download.file("http://social-fonts.com/assets/fonts/facebook-letter-faces/facebook-letter-faces.ttf", "/Library/Fonts/facebook-letter-faces.ttf", method="curl")
font_import(pattern = 'facebook-letter-faces.ttf', prompt=FALSE)
?download.file
library(utils)
download.file("http://social-fonts.com/assets/fonts/facebook-letter-faces/facebook-letter-faces.ttf", "/Library/Fonts/facebook-letter-faces.ttf", method="curl")
setwd("C:/Users/NEWNSS/Dropbox")
download.file("http://social-fonts.com/assets/fonts/facebook-letter-faces/facebook-letter-faces.ttf", "C:/Users/NEWNSS/Dropbox/facebook-letter-faces.ttf", method="curl")
font_import(pattern = 'facebook-letter-faces.ttf', prompt=FALSE)
download.file("http://social-fonts.com/assets/fonts/product-sans/product-sans.ttf", "C:/Users/NEWNSS/Dropbox/product-sans.ttf", method="curl")
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Medium%203.46.45%20PM.ttf", "C:/Users/NEWNSS/Dropbox/Circular Air-Medium 3.46.45 PM.ttf", method="curl")
download.file("https://github.com/ricardo-bion/ggtech/blob/master/Circular%20Air-Bold%203.46.45%20PM.ttf", "C:/Users/NEWNSS/Dropbox/Circular Air-Bold 3.46.45 PM.ttf", method="curl")
download.file("https://www.etsy.com/assets/type/Guardian-EgypTT-Text-Regular.ttf", "C:/Users/NEWNSS/Dropbox/Guardian-EgypTT-Text-Regular.ttf", method="curl")
download.file("http://social-fonts.com/assets/fonts/pico-black/pico-black.ttf", "C:/Users/NEWNSS/Dropbox/pico-black.ttf", method="curl")
download.file("http://social-fonts.com/assets/fonts/arista-light/arista-light.ttf", "C:/Users/NEWNSS/Dropbox/arista-light.ttf", method="curl")
font_import(pattern = 'facebook-letter-faces.ttf', prompt=FALSE)
?font_import
font_import(pattern = '../facebook-letter-faces.ttf', prompt=FALSE)
font_import(pattern = '"C:/Users/NEWNSS/Dropbox/facebook-letter-faces.ttf', prompt=FALSE)
font_import(pattern = "C:/Users/NEWNSS/Dropbox/facebook-letter-faces.ttf", prompt=FALSE)
install.packages("causalTree")
library(devtools)
install_github("susanathey/causalTree")
install.packages("NLopt")
install.packages("RTools")
install.packages("dygraphs")
install.packages("Leaflet")
install.packages("leaflet")
install.packages("DiagrammeR")
install.packages("broom")
install.packages("plotly")
install.packages("pwr")
setwd("C:/Users/NEWNSS/Dropbox/DataScienceMasters/MachineLearning/Udemy/08_Logistic_Regression")
## import data
social <- read_csv("Social_Network_Ads.csv")
dim(social)
summary(social)
glimpse(social)
'Social network`s automotive business client has launched its brand new luxury SUV and purchased ads for its marketing campaign. The
social network collected data on the users and whether or not the bought the SUV after seeing the ad
We will only use age and salary to predict this'
(social <- social %>%
select(Age,EstimatedSalary,Purchased))
# splitting data
set.seed(123)
spl <- sample.split(social$Purchased, SplitRatio = .75)
training <- subset(social, spl == T) # 300 obs
test <- subset(social, spl == F) # 100 obs
## feature scaling
# age + EstimatedSalary are on very different scales
training <- training %>%
mutate(Age = c(scale(Age)), # use c(scale)) to prevent scale from changing class of the column
EstimatedSalary = c(scale(EstimatedSalary)))
head(training)
test <- test %>%
mutate(Age = c(scale(Age)),
EstimatedSalary = c(scale(EstimatedSalary)))
head(test)
## fit to training data
log.reg <- glm(Purchased ~ ., training, family = "binomial") # binomial regression (1 or 0, yes or no, etc.)
summary(log.reg)
library(broom)
tidy(log.reg)
setwd("C:/Users/NEWNSS/Dropbox/DataScienceMasters/MachineLearning/Udemy/08_Logistic_Regression")
social <- read_csv("Social_Network_Ads.csv")
library(tidyverse)
library(caTools)
library(ggplot2)
library(ElemStatLearn)
social <- read_csv("Social_Network_Ads.csv")
dim(social)
summary(social)
glimpse(social)
'Social network`s automotive business client has launched its brand new luxury SUV and purchased ads for its marketing campaign. The
social network collected data on the users and whether or not the bought the SUV after seeing the ad
We will only use age and salary to predict this'
(social <- social %>%
select(Age,EstimatedSalary,Purchased))
# splitting data
set.seed(123)
spl <- sample.split(social$Purchased, SplitRatio = .75)
training <- subset(social, spl == T) # 300 obs
test <- subset(social, spl == F) # 100 obs
## feature scaling
# age + EstimatedSalary are on very different scales
training <- training %>%
mutate(Age = c(scale(Age)), # use c(scale)) to prevent scale from changing class of the column
EstimatedSalary = c(scale(EstimatedSalary)))
head(training)
test <- test %>%
mutate(Age = c(scale(Age)),
EstimatedSalary = c(scale(EstimatedSalary)))
head(test)
## fit to training data
log.reg <- glm(Purchased ~ ., training, family = "binomial") # binomial regression (1 or 0, yes or no, etc.)
summary(log.reg)
library(broom)
tidy(log.reg)
