# library for splitting data
library(caTools)
library(ggplot2)
library(tidyverse)
# inspect
startups <- read.csv('50_Startups.csv')
head(startups)
summary(startups)
glimpse(startups)
# encode categorical data (State)
startups <- startups %>%
revalue(State, 'New York' = 1, 'California' = 2, 'Florida' = 3)
?revalue
# encode categorical data (State)
startups <- startups %>%
recode(State, 'New York' = 1, 'California' = 2, 'Florida' = 3)
?recode
# encode categorical data (State)
startups$State <- factor(startups$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
head(startups)
# split data
set.seed(123)
spl <- sample.split(startups$Profit, SplitRatio = .8) # 40 in train, 10 in test
training <- subset(startups, spl == T)
test <- subset(startups, spl == F)
dim(training)
dim(test)
# create regressor (model) and do backwards elimination
regressor.all <- lm(Profit ~ ., training)
summary(regressor.all)
regressor.RD <- lm(Profit ~ R.D.Spend, training)
summary(regressor.RD)
y.pred.train <- predict(regressor.RD, training)
y.pred.test <- predict(regressor.RD, test)
# compare test w/ actuals
y.pred.test
test$Profit[0:10]
ggplot(training) +
geom_point(aes(R.D.Spend, Profit), colour = 'green') + # plot traning points
geom_line(aes(R.D.Spend, y.pred.train), colour = 'red') + # plot regression line
xlab('R&D Spend ($)') +
ylab('Profits ($)')
ggtitle('Profits by Amount of R&D Spend (Training Set)')
ggplot() +
geom_point(aes(test$R.D.Spend, test$Profit), colour = 'green') + # plot test points
geom_line(aes(training$R.D.Spend, y.pred.train), colour = 'red') + # plot same regression line
xlab('R&D Spend ($)') +
ylab('Profits ($)')
ggtitle('Profits by Amount of R&D Spend (Test Set)')
ggplot(training) +
geom_point(aes(R.D.Spend, Profit), colour = 'green') + # plot traning points
geom_line(aes(R.D.Spend, y.pred.train), colour = 'red') + # plot regression line
xlab('R&D Spend ($)') +
ylab('Profits ($)') +
ggtitle('Profits by Amount of R&D Spend (Training Set)')
ggplot() +
geom_point(aes(test$R.D.Spend, test$Profit), colour = 'green') + # plot test points
geom_line(aes(training$R.D.Spend, y.pred.train), colour = 'red') + # plot same regression line
xlab('R&D Spend ($)') +
ylab('Profits ($)') +
ggtitle('Profits by Amount of R&D Spend (Test Set)')
regressor.all <- lm(Profit ~ ., training)
summary(regressor.all)
regressor.noState <- lm(Profit ~ R.D.Spend + Administration + Marketing.Spend, training)
summary(regressor.noState)
regressor.noStateAdmin <- lm(Profit ~ R.D.Spend + Marketing.Spend, training)
summary(regressor.noStateAdmin)
summary(regressor.RD)
finalModel.RD <- lm(Profit ~ R.D.Spend, startups)
summary(finalModel.RD)
setwd("C:/Users/Nimz/Dropbox/DataScienceMasters/Udemy/02_Multiple_Linear_Regression")
setwd("C:/Users/Nimz/Dropbox/DataScienceMasters/Udemy")
getwd()
cd ../Dropbox
# library for splitting data
library(caTools)
library(ggplot2)
library(tidyverse)
# inspect
startups <- read.csv('50_Startups.csv')
head(startups)
summary(startups)
glimpse(startups)
ggplot(startups) +
geom_histogram(aes(R.D.Spend), binwidth = 20000)
ggplot(startups) +
geom_histogram(aes(Administration), binwidth = 20000)
ggplot(startups) +
geom_histogram(aes(Marketing.Spend), binwidth = 100000)
# encode categorical data (State)
startups$State <- factor(startups$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1,2,3))
head(startups)
# split data
set.seed(123)
spl <- sample.split(startups$Profit, SplitRatio = .8) # 40 in train, 10 in test
training <- subset(startups, spl == T)
test <- subset(startups, spl == F)
dim(training)
dim(test)
# create regressor (model) and do backwards elimination
regressor.all <- lm(Profit ~ ., training)
summary(regressor.all)
regressor.RD <- lm(Profit ~ R.D.Spend, training)
summary(regressor.RD)
y.pred.train <- predict(regressor.RD, training)
y.pred.test <- predict(regressor.RD, test)
# compare test w/ actuals
y.pred.test
test$Profit[0:10]
ggplot(training) +
geom_point(aes(R.D.Spend, Profit), colour = 'green') + # plot traning points
geom_line(aes(R.D.Spend, y.pred.train), colour = 'red') + # plot regression line
xlab('R&D Spend ($)') +
ylab('Profits ($)') +
ggtitle('Profits by Amount of R&D Spend (Training Set)')
ggplot() +
geom_point(aes(test$R.D.Spend, test$Profit), colour = 'green') + # plot test points
geom_line(aes(training$R.D.Spend, y.pred.train), colour = 'red') + # plot same regression line
xlab('R&D Spend ($)') +
ylab('Profits ($)') +
ggtitle('Profits by Amount of R&D Spend (Test Set)')
regressor.all <- lm(Profit ~ ., training)
summary(regressor.all)
regressor.noState <- lm(Profit ~ R.D.Spend + Administration + Marketing.Spend, training)
summary(regressor.noState)
regressor.noStateAdmin <- lm(Profit ~ R.D.Spend + Marketing.Spend, training)
summary(regressor.noStateAdmin)
summary(regressor.RD)
finalModel.RD <- lm(Profit ~ R.D.Spend, startups)
summary(finalModel.RD)
ggplot(diamonds) +
geom_freqpoly(aes(price, colour = cut), binwidth = 500)
library(tidyverse)
library(ggplot2)
ggplot(diamonds) +
geom_freqpoly(aes(price, colour = cut), binwidth = 500)
ggplot(diamonds) +
geom_freqpoly(aes(cut), binwidth = 500)
ggplot(diamonds) +
geom_bar(aes(cut))
ggplot(diamonds) +
geom_freqpoly(aes(price, ..density.., color = cut), bindwidth = 500)
ggplot(diamonds) +
geom_boxplot(aes(cut, price))
ggplot(mpg) +
geom_boxplot(aes(class,hwy))
ggplot(mpg) +
geom_boxplot(aes(reorder(class, hwy, FUN = median), hwy))
ggplot(mpg) +
geom_boxplot(aes(reorder(class, hwy, FUN = median), hwy)) +
coord_flip()
# square values of 3 distributions and sum
normal.a <- rnorm(1000)
normal.b <- rnorm(1000)
normal.c <- rnorm(1000)
chi.sq.3 <- (normal.a)^2 + (normal.b)^2 + (normal.c)^2
ggplot() +
geom_histogram(aes(chi.sq.3))
dbinom(x = 4, size = 20, prob = 1/6)
pbinom(4, 20, 1/6)
qbinom(.75, 20, 1/6)
pbinom(3, size = 20, prob = 1/6) #56.65%
rbinom(n = 100, size = 20, prob = 1/6)
dnorm(1, mean = 1, sd = 0.1)
normal.a <- rnorm(1000, mean = 0, sd = 1)
library(ggplot2)
ggplot() +
geom_histogram(aes(normal.a))
chisq.a <- rchisq(1000, df = 3)
ggplot() +
geom_histogram(aes(chisq.a))
# square values of 3 distributions and sum
normal.a <- rnorm(1000)
normal.b <- rnorm(1000)
normal.c <- rnorm(1000)
chi.sq.3 <- (normal.a)^2 + (normal.b)^2 + (normal.c)^2
ggplot() +
geom_histogram(aes(chi.sq.3))
# square values of 3 distributions and sum
normal.a <- rnorm(1000)
normal.b <- rnorm(1000)
normal.c <- rnorm(1000)
chi.sq.3 <- (normal.a)^2 + (normal.b)^2 + (normal.c)^2
ggplot() +
geom_histogram(aes(chi.sq.3))
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot()
+ geom_histogram(aes(t.3), bins = 10)
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot()
+ geom_histogram(aes(t.3), bins = 10)
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3))
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 10)
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 1)
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 2
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 2)
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 1) +
coord_cartesian(xlim(-10,10))
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 1) +
coord_cartesian(xlim =  (-10,10))
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = 1) +
coord_cartesian(xlim =  c(-10,10))
scaled.chisq.3 <- chi.sq.3/3
normal.d <- rnorm(1000)
t.3 <- normal.d / sqrt(scaled.chisq.3)
ggplot() +
geom_histogram(aes(t.3), binwidth = .5) +
coord_cartesian(xlim =  c(-10,10))
chi.sq.20 <- rchisq( 1000, 20)
scaled.chi.sq.20 <- chi.sq.20 / 20
F.3.20 <- scaled.chisq.3 / scaled.chi.sq.20
ggplot() + geom_histogram(aes(F.3.20))
install.packages("ggbeeswarm")
install.packages("lvplot")
install.packages("lvplot")
install.packages("ggstance")
r
library(ggbeeswarm)
ggplot(diamonds) +
geom_boxplot(aes(cut,carat)) +
geom_beeswarm(aes(cut,carat), priority = "density")
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot() +
geom_beeswarm()
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot()
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot() +
geom_jitter()
??sample_n
library(tidyverse)
library(ggplot2)
ggplot(diamonds, aes(cut,carat)) +
geom_boxplot() +
geom_jitter()
diamonds %>%
sample_n(1000) %>%
ggplot(aes(cut,carat)) +
geom_boxplot() +
geom_jitter()
diamonds %>%
sample_n(1000) %>%
ggplot(aes(cut,carat)) +
geom_boxplot() +
#geom_jitter()
geom_beeswarm()
ggplot(diamonds, aes(cut,price)) +
geom_violin()
ggplot(diamonds, aes(price)) +
geom_histogram() +
facet_wrap(~cut)
ggplot(diamonds) +
geom_freqpoly(aes(price,..density.., color = cut))
ggplot(diamonds,aes(cut,color)) +
geom_count()
diamonds %>%
count(color,cut)
diamonds %>%
count(color,cut) %>%
ggplot() +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
ggplot(aes(color,cut)) +
geom_tile(aes(fill = n))
install.packages("seriation")
install.packages("d3heatmap")
install.packages("heatmaply")
nycflights13::flights %>%
group_by(destination,month)
nycflights13::flights %>%
group_by(dest,month)
nycflights13::flights %>%
group_by(dest,month) %>%
summarise(avg_delay = mean(dep_delay))
## Use geom_tile() w/ dplyr to explore how average flight delays vary by destination + month of year.
nycflights13::flights %>%
group_by(dest,month) %>%
summarise(avg_delay = mean(dep_delay))
nycflights13::flights %>%
group_by(dest,month) %>%
summarise(avg_delay = mean(dep_delay)) %>%
ggplot(aes(dest,month)) +
geom_tile(aes(fill = avg_delay))
diamonds %>%
count(color,cut) %>%
ggplot(aes(cut,color)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
ggplot(aes(cut,color)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
ggplot(aes(color,cut)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
ggplot(aes(cut,color)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut)
diamonds %>%
count(color,cut) %>%
group_by(cut)
diamonds %>%
count(color,cut) %>%
group_by(cut) %>%
mutate(perc = n / sum(n))
diamonds %>%
count(color,cut) %>%
group_by(color) %>%
mutate(perc = n / sum(n))
diamonds %>%
count(color,cut) %>%
group_by(color) %>%
mutate(perc = n / sum(n)) %>%
ggplot(aes(color,cut)) +
geom_tile(aes(fill = perc))
diamonds %>%
count(color,cut) %>%
ggplot(aes(color,cut)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
group_by(color) %>%
mutate(perc = n / sum(n))
ggplot(aes(color,cut)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
group_by(cut) %>%
mutate(perc = n / sum(n))
ggplot(aes(color,cut)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
group_by(cut)
diamonds %>%
count(color,cut) %>%
group_by(cut) %>%
mutate(perc = n / sum(n))
diamonds %>%
count(color,cut) %>%
group_by(cut) %>%
mutate(perc = n / sum(n))
ggplot(aes(color,cut)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
group_by(cut) %>%
mutate(perc = n / sum(n))
ggplot(aes(cut,color)) +
geom_tile(aes(fill = n))
diamonds %>%
count(color,cut) %>%
group_by(cut) %>%
mutate(perc = n / sum(n)) %>%
ggplot(aes(color,cut)) +
geom_tile(aes(fill = perc))
ggplot(diamond) +
geom_point(aes(carat,price))
ggplot(diamonds) +
geom_point(aes(carat,price))
ggplot(diamonds) +
geom_point(aes(carat,price), alpha - 0.5)
ggplot(diamonds) +
geom_point(aes(carat,price), alpha = 0.5)
ggplot(diamonds) +
geom_point(aes(carat,price), alpha = 0.1)
ggplot(diamonds) +
geom_bin2d(aes(carat,prince))
ggplot(diamonds) +
geom_bin2d(aes(carat,price))
install.packages("hexbin")
library(hexbin)
ggplot(diamonds) +
geom_hex(aes(carat,price))
ggplot(diamonds) +
geom_boxplot(aes(carat, price, group = cut_width(carat,.1)))
ggplot(diamonds) +
geom_boxplot(aes(carat, price, group = cut_width(carat,.1)), varwidth = T)
ggplot(diamonds) +
geom_boxplot(aes(carat, price, group = cut_number(carat,20))
)
setwd('C:/Users/NEWNSS/Dropbox/DataScienceMasters/MachineLearning/Udemy/08_Logistic_Regression')
setwd('C:/Users/Nimz/Dropbox/DataScienceMasters/MachineLearning/Udemy/08_Logistic_Regression')
library(tidyverse)
library(caTools)
library(ggplot2)
social <- read_csv("Social_Network_Ads.csv")
summary(salary)
library(tidyverse)
library(caTools)
library(ggplot2)
# import data
social <- read_csv("Social_Network_Ads.csv")
summary(social)
glimpse(social)
(social <- social %>%
select(age,salary,purchased))
(social <- social %>%
select(Age,EstimatedSalary,Purchased))
dim(social)
spl <- social %>%
sample.split(Purchased, SplitRatio = .8)
spl <- sample.split(social$Purchased, SplitRatio = .8)
training <- subset(social, spl == T)
test <- subset(social, spl == F)
spl <- sample.split(social$Purchased, SplitRatio = .75)
training <- subset(social, spl == T) #
test <- subset(social, spl == F) # 80 obs
social <- social %>%
mutate(Age = scale(Age))
library(tidyverse)
library(caTools)
library(ggplot2)
## import data
social <- read_csv("Social_Network_Ads.csv")
dim(social)
summary(social)
glimpse(social)
'Social network`s automotive business client has launched its brand new luxury SUV and purchased ads for its marketing campaign. The
social network collected data on the users and whether or not the bought the SUV after seeing the ad
We will only use age and salary to predict this'
(social <- social %>%
select(Age,EstimatedSalary,Purchased))
# splitting data
library(caTools)
set.seed(123)
spl <- sample.split(social$Purchased, SplitRatio = .75)
training <- subset(social, spl == T) # 300 obs
test <- subset(social, spl == F) # 100 obs
## feature scaling
# age + EstimatedSalary are on very different scales
social <- social %>%
mutate(Age = scale(Age),
EstimatedSalary = scale(EstimatedSalary))
head(social)
library(tidyverse)
library(caTools)
library(ggplot2)
## import data
social <- read_csv("Social_Network_Ads.csv")
dim(social)
summary(social)
glimpse(social)
'Social network`s automotive business client has launched its brand new luxury SUV and purchased ads for its marketing campaign. The
social network collected data on the users and whether or not the bought the SUV after seeing the ad
We will only use age and salary to predict this'
(social <- social %>%
select(Age,EstimatedSalary,Purchased))
# splitting data
library(caTools)
set.seed(123)
spl <- sample.split(social$Purchased, SplitRatio = .75)
training <- subset(social, spl == T) # 300 obs
test <- subset(social, spl == F) # 100 obs
## feature scaling
# age + EstimatedSalary are on very different scales
training <- training %>%
mutate(Age = scale(Age),
EstimatedSalary = scale(EstimatedSalary))
head(training)
test <- test %>%
mutate(Age = scale(Age),
EstimatedSalary = scale(EstimatedSalary))
head(test)
log_reg <- lm(Purchased ~ ., training)
summary(log_reg)
log_reg <- lm(Purchased ~ ., training, family = "binomial")
summary(log_reg)
