table(film$Studio)
head(film)
aggregate(Gross.Ovr,film,mean)
aggregate(film$Gross.Ovr,film$Studio,mean)
aggregate(Gross.Ovr~Studio,film,mean)
aggregate(Days~Studio,film,mean)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days')
ggtitle('Average Days in Theater by Studio')
guides(fill=F)
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days')
ggtitle('Average Days in Theater by Studio')
guides(fill=F)
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
guides(fill=F)
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
coord_flip() +
guides(fill=F)
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
coord_flip() +
guides(fill=T)
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
coord_flip()
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.0) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
coord_flip() +
guides(fill=T)
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.0) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
coord_flip()
library(ggplot2)
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio))
ggplot(film, aes(Days, Studio)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 1)
ggplot(film, aes(Days, Studio)) + geom_boxplot()
ggplot(film, aes(Rating, IMDB)) +
geom_jitter(aes(colour = Rating)) +
geom_boxplot(aes(fill = Rating, group = Rating),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('MPAA Rating') +
ylab('Average IMDB Score')
ggtitle('Film IMDB Scores by Rating')
guides(fill=F)
ggplot(film, aes(Rating, IMDB)) +
geom_jitter(aes(colour = Rating)) +
geom_boxplot(aes(fill = Rating, group = Rating),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('MPAA Rating') +
ylab('Average IMDB Score')
ggtitle('Film IMDB Scores by Rating')
guides(fill=F)
library(ggplot2)
ggplot(film, aes(Studio, Days)) +
geom_jitter(aes(colour = Rating)) +
geom_boxplot(aes(fill = Rating, group = Rating),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('MPAA Rating') +
ylab('Average IMDB Score')
ggtitle('Film IMDB Scores by Rating')
guides(fill=F)
library(ggplot2)
ggplot(film, aes(Studio, Days)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('MPAA Rating') +
ylab('Average IMDB Score')
ggtitle('Film IMDB Scores by Rating')
guides(fill=F)
ggplot(film, aes(Studio, Days)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
guides(fill=F)
ggplot(film, aes(Gross.Ovr, Days)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Overseas Gross by Studio') +
guides(fill=F)
ggplot(film, aes(Studio, Gross.Ovr)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Overseas Gross by Studio') +
guides(fill=F)
aggregate(Days~Studio,film,mean)
aggregate(Days~Studio,film,sd)
aggregate(Gross.Ovr~Studio,film,mean)
aggregate(Gross.Ovr~Studio,film,sd)
function (formula, data = NULL, projections = FALSE, qr = TRUE,
contrasts = NULL, ...)
Days.model <- aov(film$Days~film$Studio)
summary(Days.model)
Days.model <- aov(film$Days~film$Studio)
summary(Days.model)
Overseas.model <- aov(film$Gross.Ovr~film$Studio)
summary(Overseas.model)
TukeyHSD(Days.model)
aggregate(Days~Studio,film,sd)
aggregate(Gross.Ovr~Studio,film,sd)
function (..., exclude = if (useNA == "no") c(NA, NaN), useNA = c("no",
"ifany", "always"), dnn = list.names(...), deparse.level = 1)
table(film$Studio)
table(film$Studio)
function (x, ...)
aggregate(Days~Studio,film,mean)
aggregate(Days~Studio,film,mean)
summary(Days.model)
TukeyHSD(Days.model)
aggregate(Gross.Ovr~Studio,film,mean) # 113.7
head(film)
aggregate(Pct.Ovr~Studio,film,mean)
aggregate(Pct.Ovr~Studio,film,sd)
aggregate(Pct.Dom~Studio,film,mean)
aggregate(Pct.Dom~Studio,film,mean)
aggregate(Pct.Dom~Studio,film,sd)
ggplot(film, aes(Studio, Pct.Dom)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Domestic Earnings % by Studio') +
guides(fill=F)
aggregate(Pct.Dom~Studio,film,mean)
aggregate(Pct.Dom~Studio,film,sd)
DomesticPerc.model <- aov(film$Pct.Dom~film$Studio)
summary(DomesticPerc.model)
DomesticPerc.model <- aov(film$Pct.Dom~film$Studio)
summary(DomesticPerc.model)
aggregate(DomesticPerc~Studio,film,mean) # 113.7
aggregate(DomesticPerc~Studio,film,mean) # 113.7
aggregate(Pct.Dom~Studio,film,mean) # 113.7
aov(DomesticPerc.model)
summary(DomesticPerc.model)
tukey(DomesticPerc.model)
TukeyHSD(DomesticPerc.model)
DomesticPerc.model <- aov(film$Pct.Dom~film$Studio)
summary(DomesticPerc.model)
ggplot(film, aes(Studio, Days)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Days in Theater by Studio') +
guides(fill=F)
ggplot(film, aes(Studio, Pct.Dom)) +
geom_jitter(aes(colour = Studio)) +
geom_boxplot(aes(fill = Studio, group = Studio),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Paired") +
scale_fill_brewer(palette = "Paired") +
xlab('Studio') +
ylab('Days') +
ggtitle('Average Domestic Earnings % by Studio') +
guides(fill=F)
summary(Days.model) #5.35
TukeyHSD(Days.model) # Fox
summary(DomesticPerc.model) # 2.097 = 2.1
library(SDSFoundations)
film <- FilmData
?if
?if
?if
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget >= 100 & film$Budget < 150) {
'Medium'
} else {
'High'
}
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget >= 100 & film$Budget < 150) {
'Medium'
} else {
'High'
}
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget >= 100 & film$Budget < 150) {
'Medium'
} else {
'High'
}
table(film$BudgetCategory)
film$Budget
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget in (100,150) {
'Medium'
} else {
'High'
}
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget in (100,150)) {
'Medium'
} else {
'High'
}
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget in (100,150)) {
'Medium'
} else {
'High'
}
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget in (100,150)) {
'Medium'
} else {
'High'
}
film$BudgetCategory <- if (film$Budget < 100) {
'Low'
} else if (film$Budget >= 150) {
'High'
} else {
'Medium'
}
table(film$BudgetCategory)
if (film$Budget < 100) {
film$BudgetCategory <- 'Low'
} else if (film$Budget >= 150) {
film$BudgetCategory <- 'High'
} else {
film$BudgetCategory <- 'Medium'
}
film$BudgetCategory
film$BudgetCategory <- ifelse(film$Budget < 100, "Low",
ifelse((film$Budget >= 100) & (film$Budget <= 150), "Medium",
"High"))
table(film$BudgetCategory)
film$BudgetCategory <- ifelse(film$Budget < 100, "Low",
ifelse((film$Budget >= 100) & (film$Budget < 150), "Medium",
"High"))
table(film$BudgetCategory)
'******Course Week 5: Hypothesis Testing (More Than Two Group Means)****
Problem Set Question 1
Do low-budget movies make a different percentage of their profits domestically
han movies with medium- or high-budgets?
1. Suppose films w/ budgets < $100M are considered "low-budget"; $100M-$150M are "medium-budget",
and $150+ are "high-budget."
2. Create a new categorical variable in the dataset that defines each film under these criteria.'
library(SDSFoundations)
film <- FilmData
film$BudgetCategory <- ifelse(film$Budget < 100, "Low",
ifelse((film$Budget >= 100) & (film$Budget < 150), "Medium",
"High"))
table(film$BudgetCategory)
'  High    Low Medium
25     67     58
1b. Calculate the mean percent domestic for each group (report as percentages
rounded to one decimal place.)'
aggregate()
High-Budget Films
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
Medium-Budget Films
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
Low-Budget Films
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
Create a boxplot to check the assumptions of ANOVA.  Then run an ANOVA and report your findings below.
problem
1 point possible (graded)
1c. What is the F-statistic for this test? (Round to 1 decimal place.)
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
1d. What are the degrees of freedom?
Numerator Degree of Freedom
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
Denominator Degree of Freedom
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
1e. What is the p-value of the test? (Round to 3 decimal places.)
unanswered
Loading
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
1f. What is the appropriate conclusion for this test?
The mean percent gross earned domestically is equal across all budget groups.
The mean percent gross earned domestically is NOT equal across all budget groups.
unanswered
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
1g. Run a Tukey HSD post-hoc analysis and chose the correct adjusted p-values for each pairwise comparison listed below.
Low vs. High
unanswered
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
Low vs. Medium
unanswered
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
Medium vs. High
unanswered
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
problem
1 point possible (graded)
1h. What is the appropriate conclusion for the post-hoc analysis?
Both low-budget and medium-budget films earn a greater percentage of their profit domestically than high-budget films.
High-budget films earn a greater percentage of their profit domestically than either low-budget or high-budget films.
Medium-budget films earn the most percentage of their profit domestically.
Low-budget films earn a greater percentage of their profit domestically than either medium-budget or high-budget films.
unanswered
You have used 0 of 1 attempt Some problems have options such as save, reset, hints, or show answer. These options follow the Submit button.
© All Rights Reserved
About edX
edX Home Page
About edX for Business Blog News Help Center Contact Careers Donate
Terms of Service & Honor Code Privacy Policy Accessibility Policy Sitemap Media Kit
Choose Language
© 2012–2017 edX Inc. All rights reserved except where noted. EdX, Open edX and the edX and Open edX logos are registered trademarks or trademarks of edX Inc. | 粤ICP备17044299号-2
Powered by Open edX
Like edX on Facebook
Follow edX on Twitter
Subscribe to the edX YouTube channel
Follow edX on LinkedIn
Follow edX on Google+
Subscribe to the edX subreddit
Download the edX mobile app from the Apple App Store Download the edX mobile app from Google Play
film
aggregate(Pct.Dom~BudgetCategory,film,mean)
BudCat.model <- aov(film$Pct.Dom,film$BudgetCategory)
summary(BudCat.model)
BudCat.model <- aov(film$Pct.Dom,film$BudgetCategory)
BudCat.model <- aov(film$Pct.Dom~film$BudgetCategory)
summary(BudCat.model)
TukeyHSD(BudCat.model)
setwd('C:/Users/NEWNSS/Dropbox/DataScienceMasters/MachineLearning/Udemy/01_Simple_Linear_Regression/Salary_Data.csv')
setwd('C:/Users/NEWNSS/Dropbox/DataScienceMasters/MachineLearning/Udemy/01_Simple_Linear_Regression')
salary <- read.csv('Salary_Data.csv'')
salary <- read.csv('Salary_Data.csv')
salary <- read.csv('Salary_Data.csv')
head(salary)
summary(salary)
simpleModel1 <- lm(YearsExperience ~ Salary, salary)
summary(simpleModel1)
library(caTools)
library(caTools)
salary <- read.csv('Salary_Data.csv')
head(salary)
summary(salary)
set.seed(123)
simpleModel1 <- lm(YearsExperience ~ Salary, salary)
summary(simpleModel1)
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3
training <- subset(salary, split == T)
test <- (salary, split == T)
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3)
training <- subset(salary, split == T)
test <- (salary, split == T)
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3)
training <- subset(salary, split == T)
test <- (salary, split == T)
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3)
training <- subset(salary, split == T)
test <- (salary, split == T)
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3)
training <- subset(salary, split == T)
test <- subset(salary, split == T)
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3)
spl
training <- subset(salary, spl == T)
test <- subset(salary, spl == T)
test <- subset(salary, spl == F)
simpleModel1 <- lm(YearsExperience ~ Salary, training)
summary(simpleModel1)
simpleModel1 <- lm(Salary ~ YearsExperience, training)
summary(simpleModel1)
set.seed(123)
# get 10 obs in test, 20 in training
spl <- sample.split(salary$YearsExperience, SplitRatio = 2/3)
training <- subset(salary, spl == T)
test <- subset(salary, spl == F)
simpleModel1 <- lm(Salary ~ YearsExperience, training)
summary(simpleModel1)
'Residuals:
Min      1Q  Median      3Q     Max
-7567.5 -3818.4  -461.1  3597.2 11565.6
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)      25335.5     2665.1   9.506 1.93e-08 ***
YearsExperience   9506.5      444.9  21.367 3.07e-14 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Residual standard error: 5610 on 18 degrees of freedom
Multiple R-squared:  0.9621,	Adjusted R-squared:   0.96
F-statistic: 456.6 on 1 and 18 DF,  p-value: 3.066e-14'
summary(simpleModel1)
