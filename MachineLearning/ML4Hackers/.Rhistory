library(magrittr)
library(e1071)
library(reshape)
melt(df, id.vars = c('X', 'Y'))
library(tidyverse)
library(ggplot2)
library(magrittr)
library(e1071)
library(reshape)
df <- read.csv('./data/df.csv')
logistic_model <- glm(Label ~ X + Y, family = binomial(link = 'logit'), df)
logistic_predictions <- ifelse(predict(logistic_model) > 0, 1, 0)
# get accuracy compared to real data labels
mean(with(df, logistic_predictions == Label))
mean(with(df, 0 == Label))
library('e1071')
svm_model <- svm(Label ~ X + Y, df)
svm_predictions <- ifelse(predict(svm_model) > 0, 1, 0)
mean(with(df, svm_predictions == Label))
df <- cbind(df, data.frame(Logit = ifelse(predict(logistic_model) > 0, 1, 0), # logistic regression
SVM = ifelse(predict(svm_model) > 0, 1, 0))) # SVM
head(df)
# create new df where cols melt into single col's values
predictions <- melt(df, id.vars = c('X', 'Y'))
head(predictions)
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
# reset df
df <- df[, c('X', 'Y', 'Label')]
linear_svm <- svm(Label ~ X + Y, df, kernel = 'linear')
with(df, mean(Label == ifelse(predict(linear_svm) > 0, 1, 0)))
polynomial_svm <- svm(Label ~ X + Y, df, kernel = 'polynomial')
with(df, mean(Label == ifelse(predict(polynomial_svm) > 0, 1, 0)))
radial_svm <- svm(Label ~ X + Y, df, kernel = 'radial')
with(df, mean(Label == ifelse(predict(radial_svm) > 0, 1, 0)))
sigmoid_svm <- svm(Label ~ X + Y, df, kernel = 'sigmoid')
with(df, mean(Label == ifelse(predict(sigmoid_svm) > 0, 1, 0)))
df <- cbind(df,
data.frame(LinearSVM = ifelse(predict(linear_svm) > 0, 1, 0),
PolynomialSVM = ifelse(predict(polynomial_svm) > 0, 1, 0),
RadialSVM = ifelse(predict(radial_svm) > 0, 1, 0),
SigmoidSVM = ifelse(predict(sigmoid_svm) > 0, 1, 0)))
predictions <- melt(df, id.vars = c('X', 'Y'))
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
library(tidyverse)
library(ggplot2)
library(magrittr)
library(e1071)
library(reshape)
mean(with(df, 0 == Label))
df <- read.csv('./data/df.csv')
logistic_model <- glm(Label ~ X + Y, family = binomial(link = 'logit'), df)
logistic_predictions <- ifelse(predict(logistic_model) > 0, 1, 0)
# get accuracy compared to real data labels
mean(with(df, logistic_predictions == Label))
mean(with(df, 0 == Label))
library('e1071')
svm_model <- svm(Label ~ X + Y, df)
svm_predictions <- ifelse(predict(svm_model) > 0, 1, 0)
mean(with(df, svm_predictions == Label))
df <- cbind(df, data.frame(Logit = ifelse(predict(logistic_model) > 0, 1, 0), # logistic regression
SVM = ifelse(predict(svm_model) > 0, 1, 0))) # SVM
head(df)
# create new df where cols melt into single col's values
predictions <- melt(df, id.vars = c('X', 'Y'))
head(predictions)
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
# reset df
df <- df[, c('X', 'Y', 'Label')]
linear_svm <- svm(Label ~ X + Y, df, kernel = 'linear')
with(df, mean(Label == ifelse(predict(linear_svm) > 0, 1, 0)))
polynomial_svm <- svm(Label ~ X + Y, df, kernel = 'polynomial')
with(df, mean(Label == ifelse(predict(polynomial_svm) > 0, 1, 0)))
radial_svm <- svm(Label ~ X + Y, df, kernel = 'radial')
with(df, mean(Label == ifelse(predict(radial_svm) > 0, 1, 0)))
sigmoid_svm <- svm(Label ~ X + Y, df, kernel = 'sigmoid')
with(df, mean(Label == ifelse(predict(sigmoid_svm) > 0, 1, 0)))
df <- cbind(df,
data.frame(LinearSVM = ifelse(predict(linear_svm) > 0, 1, 0),
PolynomialSVM = ifelse(predict(polynomial_svm) > 0, 1, 0),
RadialSVM = ifelse(predict(radial_svm) > 0, 1, 0),
SigmoidSVM = ifelse(predict(sigmoid_svm) > 0, 1, 0)))
predictions <- melt(df, id.vars = c('X', 'Y'))
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
svm_model_polynomialD3 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 3)
paste("3rd degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD3) > 0, 1, 0))))
svm_model_polynomialD5 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 5)
paste("3rd degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD5) > 0, 1, 0))))
svm_model_polynomialD10 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 10)
paste("3rd degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD10) > 0, 1, 0))))
svm_model_polynomialD12 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 12)
paste("3rd degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD12) > 0, 1, 0))))
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD3) > 0, 1, 0))),
Degree5SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD5) > 0, 1, 0))),
Degree10SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD10) > 0, 1, 0))),
Degree12SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD12) > 0, 1, 0)))))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
svm_predictions
df
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD3) > 0, 1, 0))),
Degree5SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD5) > 0, 1, 0))),
Degree10SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD10) > 0, 1, 0))),
Degree12SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD12) > 0, 1, 0)))))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
predictions <- melt(df, id.vars = c('X', 'Y'))
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD3) > 0, 1, 0))),
Degree5SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD5) > 0, 1, 0))),
Degree10SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD10) > 0, 1, 0))),
Degree12SVM = with(df, mean(Label != ifelse(predict(svm_model_polynomialD12) > 0, 1, 0)))))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
svm_predictions
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = ifelse(predict(svm_model_polynomialD3) > 0, 1, 0),
Degree5SVM = ifelse(predict(svm_model_polynomialD5) > 0, 1, 0),
Degree10SVM = ifelse(predict(svm_model_polynomialD10) > 0, 1, 0),
Degree12SVM = ifelse(predict(svm_model_polynomialD12) > 0, 1, 0)))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
svm_predictions
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = ifelse(predict(svm_model_polynomialD3) > 0, 1, 0),
Degree5SVM = ifelse(predict(svm_model_polynomialD5) > 0, 1, 0),
Degree10SVM = ifelse(predict(svm_model_polynomialD10) > 0, 1, 0),
Degree12SVM = ifelse(predict(svm_model_polynomialD12) > 0, 1, 0)))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
library(tidyverse)
library(ggplot2)
library(magrittr)
library(e1071)
library(reshape)
df <- read.csv('./data/df.csv')
logistic_model <- glm(Label ~ X + Y, family = binomial(link = 'logit'), df)
logistic_predictions <- ifelse(predict(logistic_model) > 0, 1, 0)
# get accuracy compared to real data labels
mean(with(df, logistic_predictions == Label))
mean(with(df, 0 == Label))
library('e1071')
svm_model <- svm(Label ~ X + Y, df)
svm_predictions <- ifelse(predict(svm_model) > 0, 1, 0)
mean(with(df, svm_predictions == Label))
df <- cbind(df,
data.frame(Logit = ifelse(predict(logistic_model) > 0, 1, 0), # logistic regression prediction
SVM = ifelse(predict(svm_model) > 0, 1, 0))) # SVM prediction
head(df)
# create new df where cols melt into single col's values
predictions <- melt(df, id.vars = c('X', 'Y'))
head(predictions)
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
# reset df
df <- df[, c('X', 'Y', 'Label')]
linear_svm <- svm(Label ~ X + Y, df, kernel = 'linear')
with(df, mean(Label == ifelse(predict(linear_svm) > 0, 1, 0)))
polynomial_svm <- svm(Label ~ X + Y, df, kernel = 'polynomial')
with(df, mean(Label == ifelse(predict(polynomial_svm) > 0, 1, 0)))
radial_svm <- svm(Label ~ X + Y, df, kernel = 'radial')
with(df, mean(Label == ifelse(predict(radial_svm) > 0, 1, 0)))
sigmoid_svm <- svm(Label ~ X + Y, df, kernel = 'sigmoid')
with(df, mean(Label == ifelse(predict(sigmoid_svm) > 0, 1, 0)))
df <- cbind(df, data.frame(LinearSVM = ifelse(predict(linear_svm) > 0, 1, 0),
PolynomialSVM = ifelse(predict(polynomial_svm) > 0, 1, 0),
RadialSVM = ifelse(predict(radial_svm) > 0, 1, 0),
SigmoidSVM = ifelse(predict(sigmoid_svm) > 0, 1, 0)))
# melt each SVM col into single col
predictions <- melt(df, id.vars = c('X', 'Y'))
ggplot(predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
svm_model_polynomialD3 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 3)
paste("3rd degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD3) > 0, 1, 0))))
svm_model_polynomialD5 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 5)
paste("5th degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD5) > 0, 1, 0))))
svm_model_polynomialD10 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 10)
paste("10th degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD10) > 0, 1, 0))))
svm_model_polynomialD12 <- svm(Label ~ X + Y, df, kernel = 'polynomial', degree = 12)
paste("12th degree polynomial accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD12) > 0, 1, 0))))
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = ifelse(predict(svm_model_polynomialD3) > 0, 1, 0),
Degree5SVM = ifelse(predict(svm_model_polynomialD5) > 0, 1, 0),
Degree10SVM = ifelse(predict(svm_model_polynomialD10) > 0, 1, 0),
Degree12SVM = ifelse(predict(svm_model_polynomialD12) > 0, 1, 0)))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
svm_model_radial_cost1 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 1)
paste("Radial Cost 1 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD3) > 0, 1, 0))))
svm_model_radial_cost2 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 2)
paste("Radial Cost 2 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD5) > 0, 1, 0))))
svm_model_radial_cost3 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 3)
paste("Radial Cost 3 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD10) > 0, 1, 0))))
svm_model_radial_cost4 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 4)
paste("Radial Cost 4 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_polynomialD12) > 0, 1, 0))))
svm_model_radial_cost1 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 1)
paste("Radial Cost 1 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_radial_cost1) > 0, 1, 0))))
svm_model_radial_cost2 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 2)
paste("Radial Cost 2 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_radial_cost2) > 0, 1, 0))))
svm_model_radial_cost3 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 3)
paste("Radial Cost 3 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_radial_cost3) > 0, 1, 0))))
svm_model_radial_cost4 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 4)
paste("Radial Cost 4 accuracy:",
with(df, mean(Label != ifelse(predict(svm_model_radial_cost4) > 0, 1, 0))))
svm_model_radial_cost1 <- svm(Label ~ X + Y,
data = df,
kernel = 'radial',
cost = 1)
with(df, mean(Label == ifelse(predict(radial.cost1.svm.fit) > 0, 1, 0)))
svm_model_radial_cost1 <- svm(Label ~ X + Y,
data = df,
kernel = 'radial',
cost = 1)
with(df, mean(Label == ifelse(predict(svm_model_radial_cost1) > 0, 1, 0)))
svm_model_radial_cost1 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 1)
paste("Radial Cost 1 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_radial_cost1) > 0, 1, 0))))
svm_model_radial_cost2 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 2)
paste("Radial Cost 2 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_radial_cost2) > 0, 1, 0))))
svm_model_radial_cost3 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 3)
paste("Radial Cost 3 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_radial_cost3) > 0, 1, 0))))
svm_model_radial_cost4 <- svm(Label ~ X + Y, df, kernel = 'radial', cost = 4)
paste("Radial Cost 4 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_radial_cost4) > 0, 1, 0))))
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(Degree3SVM = ifelse(predict(svm_model_radial_cost1) > 0, 1, 0),
Degree5SVM = ifelse(predict(svm_model_radial_cost2) > 0, 1, 0),
Degree10SVM = ifelse(predict(svm_model_radial_cost3) > 0, 1, 0),
Degree12SVM = ifelse(predict(svm_model_radial_cost4) > 0, 1, 0)))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
svm_model_sigmoid_gamma1 <- svm(Label ~ X + Y, df, kernel = 'sigmoid', gamma = 1)
paste("sigmoid gamma 1 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_sigmoid_gamma1) > 0, 1, 0))))
svm_model_sigmoid_gamma2 <- svm(Label ~ X + Y, df, kernel = 'sigmoid', gamma = 2)
paste("sigmoid gamma 2 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_sigmoid_gamma2) > 0, 1, 0))))
svm_model_sigmoid_gamma3 <- svm(Label ~ X + Y, df, kernel = 'sigmoid', gamma = 3)
paste("sigmoid gamma 3 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_sigmoid_gamma3) > 0, 1, 0))))
svm_model_sigmoid_gamma4 <- svm(Label ~ X + Y, df, kernel = 'sigmoid', gamma = 4)
paste("sigmoid gamma 4 accuracy:",
with(df, mean(Label == ifelse(predict(svm_model_sigmoid_gamma4) > 0, 1, 0))))
df <- df[, c('X', 'Y', 'Label')]
df <- cbind(df,
data.frame(gamma1SVM = ifelse(predict(svm_model_sigmoid_gamma1) > 0, 1, 0),
gamma2SVM = ifelse(predict(svm_model_sigmoid_gamma2) > 0, 1, 0),
gamma3SVM = ifelse(predict(svm_model_sigmoid_gamma3) > 0, 1, 0),
gamma4SVM = ifelse(predict(svm_model_sigmoid_gamma4) > 0, 1, 0)))
# melt down cols for each SVM degress into single col
svm_predictions <- melt(df, id.vars = c("X","Y"))
ggplot(svm_predictions, aes(X, Y, color = factor(value))) +
geom_point() +
facet_grid(variable ~ .)
sales <- read.csv("sales.csv", stringsAsFactors = F)
library(tidyverse)
library(ggplot2)
library(magrittr)
library(e1071)
library(reshape)
df <- df[, c('X', 'Y', 'Label')]
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(5*nrow(dtm))))
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
(lambdas <- regularized.logit.fit$lambda)
(lambdas <- regularized_logistic_regression$lambda)
library('glmnet')
regularized_logistic_regression <- glmnet(train.x, train.y, family = "binomial")
library('glmnet')
regularized_logistic_regression <- glmnet(train_x, train_y, family = "binomial")
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm)-1, round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1)), round(.5*nrow(dtm))))
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices[,-1], 3:ncol(dtm)]
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices[:,-1], 3:ncol(dtm)]
train_indices[,1]
train_indices
train_indices[-1]
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices[-1], 3:ncol(dtm)]
train_y <- dtm[train_indices[-1], 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:(nrow(dtm)-1), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices[-1], 3:ncol(dtm)]
train_y <- dtm[train_indices[-1], 1]
test_y <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices[-1], 3:ncol(dtm)]
train_y <- dtm[test_indices[-1], 1]
rm(dtm)
library('glmnet')
regularized_logistic_regression <- glmnet(train_x, train_y, family = "binomial")
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
train_y <- dtm[test_indices, 1]
rm(dtm)
library('glmnet')
regularized_logistic_regression <- glmnet(train_x, train_y, family = "binomial")
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
test_y <- dtm[test_indices, 1]
rm(dtm)
library('glmnet')
regularized_logistic_regression <- glmnet(train_x, train_y, family = "binomial")
library(tidyverse)
library(ggplot2)
library(magrittr)
library(e1071)
library(reshape)
load('data/dtm.RData')
set.seed(1)
train_indices <- sort(sample(1:nrow(dtm), round(.5*nrow(dtm))))
test_indices <- which(! 1:nrow(dtm) %in% train_indices)
train_x <- dtm[train_indices, 3:ncol(dtm)]
train_y <- dtm[train_indices, 1]
test_x <- dtm[test_indices, 3:ncol(dtm)]
test_y <- dtm[test_indices, 1]
rm(dtm)
library('glmnet')
regularized_logistic_regression <- glmnet(train_x, train_y, family = "binomial")
(lambdas <- regularized_logistic_regression$lambda)
performance <- data.frame()
for (lambda in  lambdas) {
# test model on new test data with each lambda
temp_predictions <- predict(regularized_logistic_regression, text.x, s = lambda)
predictions <- as.numeric(temp_predictions > 0)
# calculate MSE
mse <- mean(predictions != test.y)
# add row back to DF
performance <- rbind(performance, data.frame(Lambda = lambda, MSE = mse))
}
performance <- data.frame()
for (lambda in  lambdas) {
# test model on new test data with each lambda
temp_predictions <- predict(regularized_logistic_regression, text.x, s = lambda)
predictions <- as.numeric(temp_predictions > 0)
# calculate MSE
mse <- mean(predictions != test_y)
# add row back to DF
performance <- rbind(performance, data.frame(Lambda = lambda, MSE = mse))
}
performance <- data.frame()
for (lambda in  lambdas) {
# test model on new test data with each lambda
temp_predictions <- predict(regularized_logistic_regression, test_x, s = lambda)
predictions <- as.numeric(temp_predictions > 0)
# calculate MSE
mse <- mean(predictions != test_y)
# add row back to DF
performance <- rbind(performance, data.frame(Lambda = lambda, MSE = mse))
}
ggplot(performance, aes(Lambda, MSE)) +
geom_point() +
scale_x_log10()
performance <- data.frame()
for (lambda in  lambdas) {
# test model on new test data with each lambda
temp_predictions <- predict(regularized_logistic_regression, test_x, s = lambda)
predictions <- as.numeric(temp_predictions > 0)
# calculate MSE
mse <- mean(predictions != test_y)
# add row back to DF
performance <- rbind(performance, data.frame(Lambda = lambda, MSE = mse))
}
ggplot(performance, aes(Lambda, MSE)) +
geom_point() +
scale_x_log10()
final_lambda <- with(performance, max(Lambda[which(MSE == min(MSE))]))
(mse <- with(subset(performance, Lambda == final_lambda), MSE))
