points(set, pch = 19, col = if_else(set[,3] == 1, "green4", "red3"))
}
plot.svm.model(training)
plot.svm.model(test)
library(statsr)
library(tidyverse)
library(ggplot2)
library(statsr) # Duke package
library(tidyverse)
library(ggplot2)
data(atheism)
head(atheism)
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012")
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012")
table(us12$response)
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012") %>%
group_by(response) %>%
summarise(prop = mean(response))
#table(us12$response)
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012")# %>%
#group_by(response) %>%
#summarise(prop = mean(response))
prop.table(us12$response)
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012")# %>%
#group_by(response) %>%
#summarise(prop = mean(response))
prop.table(table(us12$response))
inference(y = response, data = us12, statistic = "proportion", type = "ci", method = "theoretical", success = "atheist")
.0499 * .0364
.0499 * .0354
.0499 - .0364
ire12 <- atheism %>%
filter(nationality == "Ireland" , atheism$year == "2012")# %>%
#group_by(response) %>%
#summarise(prop = mean(response))
prop.table(table(ire12$response))
ire12 <- atheism %>%
filter(nationality == "Ireland" , atheism$year == "2012")
prop.table(table(ire12$response))
pol12 <- atheism %>%
filter(nationality == "Poland" , atheism$year == "2012")
prop.table(table(pol12$response))
ire12 <- atheism %>%
filter(nationality == "Ireland" , atheism$year == "2012")
prop.table(table(ire12$response))
inference(y = response, data = ire12, statistic = "proportion", type = "ci", method = "theoretical", success = "atheist")
pol12 <- atheism %>%
filter(nationality == "Poland" , atheism$year == "2012")
prop.table(table(pol12$response))
inference(y = response, data = pol12, statistic = "proportion", type = "ci", method = "theoretical", success = "atheist")
ire.moe <- .0990099 - .0806
pol.moe <- .04952381 - 0.031
i(re.moe <- .0990099 - .0806)
(ire.moe <- .0990099 - .0806)
(pol.moe <- .04952381 - 0.031)
d <- data.frame(p <- seq(0, 1, 0.01))
n <- 1000
d <- d %>%
mutate(me = 1.96*sqrt(p*(1 - p)/n))
d %>%
ggplot(aes(p, me)) +
geom_line()
?inference
esp12 <- atheism %>%
filter(nationality == "Spain") %>%
inference(esp12, est = "proportion", type = "ht", method = "theoretical", success = "atheist",
null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain") %>%
inference(esp12, statistic = "proportion", type = "ht", method = "theoretical", success = "atheist",
null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain") %>%
inference(data = esp12, statistic = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(esp12, statistic = "proportion", type = "ht", method = "theoretical", success = "atheist",
null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(data = esp12, statistic = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
library(tidyverse)
source("http://bit.ly/dasi_inference")
# create set of the actual observed values
paul <- factor(c(rep("y",8),rep("n",0)), levels = c("y","n"))
# perform 10k simulations (default) to estimate a proportion using a hyp. test via a simulation
inference(paul, est = "proportion", type = "ht", method = "simulation", success = "y",
null = .5, alternative = "greater")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(factor(esp12), statistic = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(data = factor(esp12), statistic = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(data = factor(esp12$year), statistic = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(factor(esp12$year), statistic = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(factor(esp12$year), est = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp12 <- atheism %>%
filter(nationality == "Spain")
inference(esp12$response, factor(esp12$year), est = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
esp <- atheism %>%
filter(nationality == "Spain")
inference(esp12$response, factor(esp$year), est = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
View(esp12)
us <- atheism %>%
filter(nationality == "Spain")
inference(us$response, factor(us$year), est = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
us <- atheism %>%
filter(nationality == "Spain")
inference(us$response, factor(us$year), est = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
us <- atheism %>%
filter(nationality == "United States")
inference(us$response, factor(us$year), est = "proportion", type = "ht", method = "theoretical",
success = "atheist", null = 0, alternative = "twosided")
# sig level * # of countries
39 * .05
tail(d)
kable(pressure)
??kable
kable(pressure)
library(tidyverse)
library(knitr)
kable(pressure)
?kable
#library(knitr)
kable(pressure)
kable(mtcars)
sd.pov <- 3.1
sd.hs <- 3.73
R <- -.75
(slope <- (sd.pov*sd.hs)/R)
sd.pov <- 3.1
sd.hs <- 3.73
R <- -.75
(slope <- (sd.pov/sd.hs)/R)
sd.pov <- 3.1
sd.hs <- 3.73
R <- -.75
(slope <- (sd.pov/sd.hs)*R)
pov_bar <- 11.35
hs_bar <- 86.01
(int <- pov_bar - slope*hs_bar)
library(tidyverse)
library(ggplot2)
library(nycflights13)
airlines
airports
# check that tailnum uniquely ID's a plane
planes %>%
count(tailnum) %>%
filter(n > 1)
# check that tailnum uniquely ID's a plane
planes %>%
count(tailnum) %>%
filter(n > 1)
# check each YMD:H + origin combo uniquely ID's each weather record
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
# check if YMD + flight # uniquely ID's a flight
flights %>%
count(year, month, day, flight) %>%
filter(n > 1)
# check if YMD + tail # uniquely ID's a flight
flights %>%
count(year, month, day, tailnum) %>%
filter(n > 1)
sd.pov <- 3.1
sd.hs <- 3.73
R <- -.75
(slope <- (sd.pov/sd.hs)*R)
pov_bar <- 11.35
hs_bar <- 86.01
(int <- pov_bar - slope*hs_bar)
int - slope*.82
int - slope*82
int - slope*.82
sd.pov <- 3.1
sd.hs <- 3.73
R <- -.75
(slope <- (sd.pov/sd.hs)*R)*100
pov_bar <- 11.35
hs_bar <- 86.01
(int <- pov_bar - slope*hs_bar)
int - slope*82
sd.pov <- 3.1
sd.hs <- 3.73
R <- -.75
(slope <- (sd.pov/sd.hs)*R)
pov_bar <- 11.35
hs_bar <- 86.01
(int <- pov_bar - slope*hs_bar)
int - slope*82
int - (slope*82)
(slope*82)
int + (slope*82)
int <- 64.68
HSgr <- 81.4
slope <- 0.62
(int <- pov_bar - slope*HSgr)
int <- 64.68
HSgr <- 81.4
slope <- 0.62
(int - slope*HSgr)
int <- 64.68
HSgr <- 81.4
slope <- -0.62
(int + slope*HSgr)
library(tidyverse)
library(ggplot2)
library(nycflights13)
Lahman::Batting,
Lahman::Batting
Lahman::Batting %>%
count(playerID) %>%
filter(n > 1)
count(playerID, year) %>%
c
Lahman::Batting %>%
count(playerID, year) %>%
filter(n > 1)
Lahman::Batting %>%
count(playerID, year) %>%
Lahman::Batting %>%
count(playerID, year) %>%
Lahman::Batting %>%
filter(n > 1)
Lahman::Batting %>%
count(playerID, yearID) %>%
filter(n > 1)
Lahman::Batting %>%
count(playerID, yearID, stint) %>%
filter(n > 1)
head(babynames::babynames)
babynames::babynames
head(diamonds)
diamonds %>%
count(carat,cut,color) %>%
filter( n > 1)
diamonds %>%
count(carat,cut,color,clarity) %>%
filter( n > 1)
(flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier))
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
4, "y3"
)
x %>%
inner_join(y, by = "key")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
2, "x3",
1, "x4"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2"
)
left_join(x, y, by = "key")
flights2 %>%
left_join(weather)
flights2 %>%
left_join(planes, by = "tailnum")
flights2 %>%
left_join(airports, c("dest" = "faa"))
library(tidyverse)
library(ggplot2)
library(nycflights13)
(top_dest <- flights %>%
count(dest, sort = TRUE) %>%
head(10))
flights %>%
semi_join(top_dest)
dim(flights)
flights %>%
anti_join(planes, by = "tailnum") %>%
count(tailnum, sort = TRUE)
airports %>% count(alt, lon) %>% filter(n > 1)
df1 <- tribble(
~x, ~y,
1,  1,
2,  1
)
df2 <- tribble(
~x, ~y,
1,  1,
1,  2
)
intersect(df1, df2) # get 3 rows, not 4
union(df1, df2)
setdiff(df1, df2)
setdiff(df2, df1)
head(airports)
head(flights)
head(planes)
head(weather)
head(airports)
# check if YMD + flight # uniquely ID's a flight
flights %>%
count(year, month, day, flight) %>%
filter(n > 1)
# check if YMD + tail # uniquely ID's a flight
flights %>%
count(year, month, day, tailnum) %>%
filter(n > 1)
flights %>%
mutate(rownum = row_number())
count(rownum, year, month, day, flight) %>%
filter(n > 1)
flights %>%
mutate(rownum = row_number()) %>%
count(rownum, year, month, day, flight) %>%
filter(n > 1)
librarY(babynames)
library(babynames)
install.packages("babynames")
babynames::babynames
??babynames
install.packages("nasaweather")
??nasaweather::atmos
nasaweather::atmos
atmos %>%
count(lat, long, year, month) %>%
filter(n > 1)
nasaweather::atmos %>%
count(lat, long, year, month) %>%
filter(n > 1)
nasaweather::atmos %>%
count(lat, long, year) %>%
filter(n > 1)
install.packages("fueleconomy")
head(fueleconomy::vehicles)
??fueleconomy::vehicles
fueleconomy::vehicles %>%
count(id, make, model, year, class, trans, drive) %>%
filter(n > 1)
fueleconomy::vehicles %>%
count(id, make, model, year, class, trans) %>%
filter(n > 1)
fueleconomy::vehicles %>%
count(id, make, model, year, class) %>%
filter(n > 1)
fueleconomy::vehicles %>%
count(id) %>%
filter(n > 1)
lahman::Batting
Lahman::Batting
head(Lahman::Batting)
head(Lahman::Pitching)
head(Lahman::Salaries)
if (FALSE) {
install.packages("arules")
install.packages("arulesViz")
install.packages("bitops")
install.packages("ca")
install.packages("caTools")
install.packages("e1071")
install.packages("MASS")
install.packages("rgl")
install.packages("RODBC")
install.packages("tree")
install.packages("rpart")
install.packages("XML")
}
if (FALSE) {
install.packages("arules")
install.packages("arulesViz")
install.packages("bitops")
install.packages("ca")
install.packages("caTools")
install.packages("e1071")
install.packages("MASS")
install.packages("rgl")
install.packages("RODBC")
install.packages("tree")
install.packages("rpart")
install.packages("XML")
}
if (FALSE) {
install.packages("arules")
install.packages("arulesViz")
install.packages("bitops")
install.packages("ca")
install.packages("caTools")
install.packages("e1071")
install.packages("MASS")
install.packages("rgl")
install.packages("RODBC")
install.packages("tree")
install.packages("rpart")install.packages("XML")
if (FALSE) {
install.packages("arules")
install.packages("arulesViz")
install.packages("bitops")
install.packages("ca")
install.packages("caTools")
install.packages("e1071")
install.packages("MASS")
install.packages("rgl")
install.packages("RODBC")
install.packages("tree")
install.packages("rpart")install.packages("XML")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("arules")
install.packages("arules")
install.packages("arulesViz")
install.packages("bitops")
install.packages("ca")
install.packages("caTools")
install.packages("e1071")
install.packages("MASS")
install.packages("rgl")
install.packages("RODBC")
install.packages("tree")
install.packages("rpart")
install.packages("XML")
x <- c(1,6,2)
y <- c(1,4,3)
ls()
matrix(c(1,2,3,4), nrow = 2, ncol = 2)
# create 2x2 matrix of #'s filled in by row 1st
matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = T)
(x <- matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = T))
sqrt(x)
x <- rnorm(50)
y <- x + rnorm(50,mean=50,sd=.1)
# check correlation coefficient R
cor(x,y)
set.seed(123)
y <- rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",main="plot of x and y")
x <- rnorm(100)
y <- rnorm(100)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",main="plot of x and y")
pdf("figure.pdf")
jpeg("figure.jpeg")
dev.off()
x <- seq(-pi,pi,length = 50)
x
(f <- outer(x,y,function(x,y)cos(y)/(1+x^2)))
contour(x,y,z)
z <- outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,z)
x <- seq(-pi,pi,length = 50) # equally spaced
# contour plot to plot 3D data
y <- x
z <- outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,z)
contour(x,y,z, nlevels = 45, add = T)
image(x,y,fa)
fa <- (f-t(f))/2
contour(x,y,fa, nlevels = 15)
# image produces color-coded plot whose colors depend on z values = HEATMAP
image(x,y,fa)
fa <- (f-t(f))/2
t(f)
f - t(f)
f
za <- (z - t(z))/2
contour(x,y,za, nlevels = 15)
image(x,y,za)
persp(x,y,za)
?t
persp(x,y,za)
persp(x,y,za, theta = 30)
persp(x,y,za)
persp(x,y,za, theta = 30)
persp(x,y,za, theta = 30, phi = 70)
persp(x,y,za, theta = 30, phi = 40)
