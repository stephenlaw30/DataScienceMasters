nycflights13::flights %>%
View() # spreadsheet-like view
df <- tibble(
x = runif(5),
y = rnorm(5)
)
# Extract by name
df$x
df[["x"]]
# Extract by position
df[[1]]
df %>% .$x
df %>% .[["x"]]
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
class(tb) # error
class(as.data.frame(tb))
print(mtcars)
print(as.tibble(mtcars))
df <- data.frame(abc = 1, xyz = "a") # make a 1*2 data frame
df$x
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
df <- tibble(abc = 1, xyz = "a") # make a 1*2 data frame
df$x # does not complete column name
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
var <- "mpg"
var <- "xyz"
# get
df[var]
var <- "xyz"
# get
class(df[var])
df[[var]]
class(df[[var]])
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
tibble[1]
tibble[[1]]
annoying[[1]]
annoying[[1]]
annoying$'1'
annoying %>%
ggplot(aes('1','2')) +
geom_point()
annoying[[1]]
annoying$'1'
annoying$'2'
annoying %>%
ggplot(aes(1,2)) +
geom_point()
annoying %>%
ggplot(aes(.[["1"]],.[["2"]])) +
geom_point()
annoying %>%
mutate(.[["3"]] = .[["2"]] / .[["1"]])
annoying %>%
mutate(3 = .[["2"]] / .[["1"]])
annoying %>%
mutate(.[["3"]] == .[["2"]] / .[["1"]])
annoying %>%
mutate(.$"3" == .$"2" / .$"1")
annoying %>%
mutate(.$"3" = .$"2" / .$"1")
annoying %>%
mutate("3" = "2" / "1")
annoying %>%
select("2" , "1")
annoying %>%
mutate(3 = "2" + "1")
annoying %>%
mutate(`3` = `2` / `1`)
annoying %>%
rename(one = `1`,
two = `2`,
three = `3`)
(annoying <- annoying %>%
mutate(`3` = `2` / `1`))
annoying %>%
rename(one = `1`,
two = `2`,
three = `3`)
?enframe
nums <- c(1,2,3,4,5,6)
enframe(nums)
nums <- c('one','two',3,'four',5,'apple)
enframe(nums)
nums <- c('one','two',3,'four',5,'apple')
enframe(nums)
?tibble.print
??tibble.print
?print
?print.tibble
nycflights13::flights %>%
print(n_extra = 2)
nycflights13::flights %>%
print(n_extra = 3)
nycflights13::flights %>%
print(n_extra = 12)
nycflights13::flights %>%
print(n_extra = 1)
nycflights13::flights %>%
print(n_extra = 2)
nycflights13::flights %>%
print(n_extra = 1231)
nycflights13::flights %>%
print(n_extra = 1)
nycflights13::flights %>%
print(n_extra = 2)
(t.crit.90 <- abs(qt(p = .05, df = dF)))
n <- 100
dF < n - 1
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
n <- 100
dF <- n - 1
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
n <- 100
dF <- n - 1
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
se.boot <- 89.5758
m0E <- t.crit.90*se.boot
(lower <- x.bar - m0E)
(upper <- x.bar + m0E)
based on this bootstrap distribution, 1st using the SE method'
n <- 100
dF <- 19
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
se.boot <- 89.5758
m0E <- t.crit.90*se.boot
(lower <- x.bar - m0E)
(upper <- x.bar + m0E)
install.packages("viridis")
install.packages("glue")
library(tidyverse)
library(ggplot2)
read_csv("a,b,c
1,2,3
4,5,6")
read_csv("The first line of metadata
The second line of metadata
x,y,z
1,2,3",
skip = 2)
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3
n4,5,6",
col_names = FALSE)
read_csv("1,2,3
4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3
4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3
4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = c("x","y","z"))
read_csv("a,b,c\n1,2,.", na = ".")
read_delim("a|b|c\n1|2|3", delim = "|")
read_tsv
?read_tsv
?read_csv
read_fwf
?read_fwf
?read_delim
read_delim("x,y\n1,'a,b'", quote = "\'")
read_delim("x,y\n1,'a,b'", quote = "\'", delim = ",")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b\n\"1")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv("a,b\n1,2\na,b")
read_csv("a,b\n\"1")
read_csv("a,b\n\"1")
read_csv("a,b\n"1")
read_csv("a,b\n\"1")
read_csv("a,b\n\""1")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_date(c("2010-01-01", "1979-10-14")))
parse_integer(c("1", "231", ".", "456"), na = ".")
x <- parse_integer(c("123", "345", "abc", "123.45"))
(x <- parse_integer(c("123", "345", "abc", "123.45")))
problems(x)
parse_double("1.23")
parse_double("1,23", locale = locale(decimal_mark = ","))
parse_number("$100")
parse_number("20%")
parse_number("It cost $123.45")
# Used in America
parse_number("$123,456,789")
# Used in many parts of Europe
parse_number("123.456.789", locale = locale(grouping_mark = "."))
#> [1] 1.23e+08
# Used in Switzerland
parse_number("123'456'789", locale = locale(grouping_mark = "'"))
charToRaw("Hadley")
(x1 <- "El Ni\xf1o was particularly bad this year")
(x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd")
(x1 <- "El Ni\xf1o was particularly bad this year"
(x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd")
x1
x1 <- "El Ni\xf1o was particularly bad this year"
(x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd")
x1
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
x1
#> [1] "El Ni\xf1o was particularly bad this year"
x2
#> [1] "\x82\xb1\x82\xf1\x82ɂ\xbf\x82\xcd"
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
#x1
#> [1] "El Ni\xf1o was particularly bad this year"
#x2
#> [1] "\x82\xb1\x82\xf1\x82ɂ\xbf\x82\xcd"
guess_encoding(charToRaw(x1))
guess_encoding(charToRaw(x2))
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
#attr(,"problems")
parse_datetime("2010-10-01T2010")
# If time is omitted, it will be set to midnight
parse_datetime("20101010")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
?locale
parse_number("123.456.789", locale = locale(decimal_mark = ".", grouping_mark = "."))
parse_number("123,456,789", locale = locale(decimal_mark = ","))
parse_number("123,456,789", locale = locale(grouping_mark = "."))
parse_number("123,456.789", locale = locale(grouping_mark = "."))
parse_number("123.456,789", locale = locale(decimal_mark = ","))
parse_number("123.456,789", locale = locale(grouping_mark = "."))
library(tidyverse)
library(ggplot2)
?locale
parse_character("Bonjour", locale = locale("fr"))
?parse_date
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B, %d, %Y")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
#parse_date(d4, format = "%d-%b-%Y")
parse_date(d5, format = "%m/%d/%y")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
parse_date(d4, format = "%B %d (%Y)")
parse_date(d5, format = "%m/%d/%y")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
parse_date(d4, format = "%B %d (%Y)")
parse_date(d5, format = "%m/%d/%y")
parse_time(t1, format = "%H%M")
parse_time(t1, format = "%h:%M:%S %p")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
parse_date(d4, format = "%B %d (%Y)")
parse_date(d5, format = "%m/%d/%y")
parse_time(t1, format = "%H%M")
parse_time(t1, format = "%h:%M:%OS %p")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
parse_date(d4, format = "%B %d (%Y)")
parse_date(d5, format = "%m/%d/%y")
parse_time(t1, format = "%H%M")
parse_time(t1, format = "%I:%M:%OS %p")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, format = "%B %d, %Y")
parse_date(d2, format = "%Y-%b-%d")
parse_date(d3, format = "%d-%b-%Y")
parse_date(d4, format = "%B %d (%Y)")
parse_date(d5, format = "%m/%d/%y")
parse_time(t1, format = "%H%M")
parse_time(t2, format = "%I:%M:%OS %p")
guess_parser("2010-10-01")
guess_parser("15:01")
guess_parser(c("TRUE", "FALSE"))
guess_parser(c("1", "5", "9"))
guess_parser(c("12,352,561"))
str(parse_guess("2010-10-10"))
parse_guess("2010-10-10")
str(parse_guess("2010-10-10"))
integer(parse_guess("2010-10-10"))
(parse_guess("2010-10-10"))
class(parse_guess("2010-10-10"))
class(str(parse_guess("2010-10-10")))
challenge <- read_csv(readr_example("challenge.csv"))
challenge <- read_csv(readr_example("challenge.csv"))
problems(...)
challenge <- read_csv(readr_example("challenge.csv"))
problems()
challenge <- read_csv(readr_example("challenge.csv"))
problems(read_csv(readr_example("challenge.csv")))
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_integer(),
y = col_character()
)
)
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_character()
)
)
tail(challenge)
challenge <- read_csv(
readr_example("challenge.csv"),
col_types = cols(
x = col_double(),
y = col_date()
)
)
tail(challenge)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
challenge2 <- read_csv(readr_example("challenge.csv"), guess_max = 1001)
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character())
)
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character())
challenge2
challenge2 <- read_csv(readr_example("challenge.csv"),
col_types = cols(.default = col_character())
)
challenge2
df <- tribble(
~x,  ~y,
"1", "1.21",
"2", "2.32",
"3", "4.56"
)
df
df <- tribble(
~x,  ~y,
"1", "1.21",
"2", "2.32",
"3", "4.56"
)
df
# Note the column types
type_convert(df)
write_csv(challenge, "challenge.csv")
challenge
challenge
write_csv(challenge, "challenge-2.csv")
read_csv("challenge-2.csv")
write_rds(challenge, "challenge.rds")
read_rds("challenge.rds")
library(feather)
install.packages()
install.packages("feather")
library(feather)
write_feather(challenge, "challenge.feather")
read_feather("challenge.feather")
p <- .9
n <- 200
(success.cond <- n*p)
(fail.cond <- n*(1-p))
p.hat = .9 # mean of our sampling distribution = population parameter (when normal)
n = 200
(se <- sqrt((p.hat*(1-p.hat))/n))
(z <- (.95 - p.hat)/se)
p.hat = .9 # mean of our sampling distribution = population parameter (when normal)
n = 200
(se <- sqrt((p.hat*(1-p.hat))/n))
(z <- (.95 - p.hat)/se)
# get proportion of values lower than this z-score on the curve
pnorm(p.hat,.95,se)
n <- 200
p <- .9
desired.p <- .95
(min.success <- n*desired.p)
dbinom(desired.p,n,p)
dbinom(desired.p,n,p)
dbinom(min.success,n,p)
dbinom(sum(min.success:n),n,p) # want prob of anything >= min of 195, up to 200
sum(min.success:n)
dbinom(min.success:n,n,p) # want prob of anything >= min of 195, up to 200
sum(dbinom(min.success:n,n,p)) # want prob of anything >= min of 195, up to 200
(z <- (.875 - p.hat)/se)
pnorm(p.hat,.875,se)
library(tidyverse)
library(ggplot2)
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
(stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
))
stocks %>%
spread(year, return)
stocks %>%
spread(year, return) %>%
gather(year, return, `2015`:`2016`, na.rm = TRUE)
