getwd()
library(tidyverse)
ggplot(diamonds, aes(carat, price)) +
geom_hex()
ggsave("diamonds.pdf")
write_csv(diamonds, "diamonds.csv")
library(tidyverse)
library(ggplot2)
as.tibble(iris)
tibble(x = 1:5, y = 1, z = x^2 + y)
tibble(`:)` = "smile", ` ` = "space", `2000` = "number")
tribble(~x, ~y, ~z,
#--/--/----
"a", 2, 3.6,
"b", 1, 8.5)
library(tidyverse)
library(ggplot2)
library(lubridate)
library(tidyverse)
library(ggplot2)
library(lubridate)
?letters
?runif
tibble(a = lubridate::now() + runif(1e3) * 86400,
b = today() + runif(1e3) * 30,
c = 1:1e3, # integers 1 - 100
d = runif(1e3), # generate 100 random deviations from the uniform distribution
e = sample(?letters, 1e3, replace = T)) # use built-in roman alphabet constants + sample 100 of time
tibble(a = lubridate::now() + runif(1e3) * 86400,
b = today() + runif(1e3) * 30,
c = 1:1e3, # integers 1 - 100
d = runif(1e3), # generate 100 random deviations from the uniform distribution
e = sample(letters, 1e3, replace = T)) # use built-in roman alphabet constants + sample 100 of time
nycflights13::flights %>%
print(n = 10, width = Inf)
nycflights13::flights %>%
View()
df <- tibble(
x = runif(5),
y = rnorm(5)
)
# Extract by name
df$x
df[["x"]]
# Extract by position
df[[1]]
df %>% .$x
df %>% .[["x"]]
class(tb) # error
class(as.data.frame(tb))
class(df) # error
class(as.data.frame(df))
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
class(tb) # error
class(as.data.frame(tb))
print(mtcars)
print(as.tibble(mtcars))
df <- data.frame(abc = 1, xyz = "a")
df$x
df[, "xyz"]
df[, c("abc", "xyz")]
df <- data.frame(abc = 1, xyz = "a") # make a 1*2 data frame
df$x
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
df <- tibble(abc = 1, xyz = "a") # make a 1*2 data frame
df$x
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
library(tidyverse)
library(ggplot2)
library(lubridate)
as.tibble(iris)
tibble(x = 1:5, y = 1, z = x^2 + y) # y will be recycled
tibble(`:)` = "smile", ` ` = "space", `2000` = "number")
tribble(~x, ~y, ~z,
#--/--/----
"a", 2, 3.6,
"b", 1, 8.5)
tibble(a = lubridate::now() + runif(1e3) * 86400,
b = today() + runif(1e3) * 30,
c = 1:1e3, # integers 1 - 1000
d = runif(1e3), # generate 1000 random deviations from the uniform distribution
e = sample(letters, 1e3, replace = T)) # use built-in roman alphabet constants + sample 1000 of time
nycflights13::flights %>%
print(n = 10, width = Inf)
nycflights13::flights %>%
View() # spreadsheet-like view
df <- tibble(
x = runif(5),
y = rnorm(5)
)
# Extract by name
df$x
df[["x"]]
# Extract by position
df[[1]]
df %>% .$x
df %>% .[["x"]]
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
class(tb) # error
class(as.data.frame(tb))
print(mtcars)
print(as.tibble(mtcars))
df <- data.frame(abc = 1, xyz = "a") # make a 1*2 data frame
df$x
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
df <- tibble(abc = 1, xyz = "a") # make a 1*2 data frame
df$x # does not complete column name
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
var <- "mpg"
var <- "xyz"
# get
df[var]
var <- "xyz"
# get
class(df[var])
df[[var]]
class(df[[var]])
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
tibble[1]
tibble[[1]]
annoying[[1]]
annoying[[1]]
annoying$'1'
annoying %>%
ggplot(aes('1','2')) +
geom_point()
annoying[[1]]
annoying$'1'
annoying$'2'
annoying %>%
ggplot(aes(1,2)) +
geom_point()
annoying %>%
ggplot(aes(.[["1"]],.[["2"]])) +
geom_point()
annoying %>%
mutate(.[["3"]] = .[["2"]] / .[["1"]])
annoying %>%
mutate(3 = .[["2"]] / .[["1"]])
annoying %>%
mutate(.[["3"]] == .[["2"]] / .[["1"]])
annoying %>%
mutate(.$"3" == .$"2" / .$"1")
annoying %>%
mutate(.$"3" = .$"2" / .$"1")
annoying %>%
mutate("3" = "2" / "1")
annoying %>%
select("2" , "1")
annoying %>%
mutate(3 = "2" + "1")
annoying %>%
mutate(`3` = `2` / `1`)
annoying %>%
rename(one = `1`,
two = `2`,
three = `3`)
(annoying <- annoying %>%
mutate(`3` = `2` / `1`))
annoying %>%
rename(one = `1`,
two = `2`,
three = `3`)
?enframe
nums <- c(1,2,3,4,5,6)
enframe(nums)
nums <- c('one','two',3,'four',5,'apple)
enframe(nums)
nums <- c('one','two',3,'four',5,'apple')
enframe(nums)
?tibble.print
??tibble.print
?print
?print.tibble
nycflights13::flights %>%
print(n_extra = 2)
nycflights13::flights %>%
print(n_extra = 3)
nycflights13::flights %>%
print(n_extra = 12)
nycflights13::flights %>%
print(n_extra = 1)
nycflights13::flights %>%
print(n_extra = 2)
nycflights13::flights %>%
print(n_extra = 1231)
nycflights13::flights %>%
print(n_extra = 1)
nycflights13::flights %>%
print(n_extra = 2)
(t.crit.90 <- abs(qt(p = .05, df = dF)))
n <- 100
dF < n - 1
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
n <- 100
dF <- n - 1
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
n <- 100
dF <- n - 1
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
se.boot <- 89.5758
m0E <- t.crit.90*se.boot
(lower <- x.bar - m0E)
(upper <- x.bar + m0E)
based on this bootstrap distribution, 1st using the SE method'
n <- 100
dF <- 19
x.bar <- 887
# 90% sig level
(t.crit.90 <- abs(qt(p = .05, df = dF)))
se.boot <- 89.5758
m0E <- t.crit.90*se.boot
(lower <- x.bar - m0E)
(upper <- x.bar + m0E)
install.packages("viridis")
install.packages("glue")
library(tidyverse)
library(ggplot2)
read_csv("a,b,c
1,2,3
4,5,6")
read_csv("The first line of metadata
The second line of metadata
x,y,z
1,2,3",
skip = 2)
read_csv("# A comment I want to skip
x,y,z
1,2,3", comment = "#")
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3
n4,5,6",
col_names = FALSE)
read_csv("1,2,3
4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3
4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = FALSE)
read_csv("1,2,3
4,5,6", col_names = FALSE)
read_csv("1,2,3\n4,5,6", col_names = c("x","y","z"))
read_csv("a,b,c\n1,2,.", na = ".")
read_delim("a|b|c\n1|2|3", delim = "|")
read_tsv
?read_tsv
?read_csv
read_fwf
?read_fwf
?read_delim
read_delim("x,y\n1,'a,b'", quote = "\'")
read_delim("x,y\n1,'a,b'", quote = "\'", delim = ",")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b\n\"1")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv("a,b\n1,2\na,b")
read_csv("a,b\n\"1")
read_csv("a,b\n\"1")
read_csv("a,b\n"1")
read_csv("a,b\n\"1")
read_csv("a,b\n\""1")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_logical(c("TRUE", "FALSE", "NA")))
str(parse_integer(c("1", "2", "3")))
str(parse_date(c("2010-01-01", "1979-10-14")))
parse_integer(c("1", "231", ".", "456"), na = ".")
x <- parse_integer(c("123", "345", "abc", "123.45"))
(x <- parse_integer(c("123", "345", "abc", "123.45")))
problems(x)
parse_double("1.23")
parse_double("1,23", locale = locale(decimal_mark = ","))
parse_number("$100")
parse_number("20%")
parse_number("It cost $123.45")
# Used in America
parse_number("$123,456,789")
# Used in many parts of Europe
parse_number("123.456.789", locale = locale(grouping_mark = "."))
#> [1] 1.23e+08
# Used in Switzerland
parse_number("123'456'789", locale = locale(grouping_mark = "'"))
charToRaw("Hadley")
(x1 <- "El Ni\xf1o was particularly bad this year")
(x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd")
(x1 <- "El Ni\xf1o was particularly bad this year"
(x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd")
x1
x1 <- "El Ni\xf1o was particularly bad this year"
(x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd")
x1
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
x1
#> [1] "El Ni\xf1o was particularly bad this year"
x2
#> [1] "\x82\xb1\x82\xf1\x82ɂ\xbf\x82\xcd"
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x1, locale = locale(encoding = "Latin1"))
parse_character(x2, locale = locale(encoding = "Shift-JIS"))
x1 <- "El Ni\xf1o was particularly bad this year"
x2 <- "\x82\xb1\x82\xf1\x82\xc9\x82\xbf\x82\xcd"
#x1
#> [1] "El Ni\xf1o was particularly bad this year"
#x2
#> [1] "\x82\xb1\x82\xf1\x82ɂ\xbf\x82\xcd"
guess_encoding(charToRaw(x1))
guess_encoding(charToRaw(x2))
fruit <- c("apple", "banana")
parse_factor(c("apple", "banana", "bananana"), levels = fruit)
#attr(,"problems")
parse_datetime("2010-10-01T2010")
# If time is omitted, it will be set to midnight
parse_datetime("20101010")
library(hms)
parse_time("01:10 am")
parse_time("20:10:01")
parse_date("01/02/15", "%m/%d/%y")
parse_date("01/02/15", "%d/%m/%y")
parse_date("01/02/15", "%y/%m/%d")
parse_date("1 janvier 2015", "%d %B %Y", locale = locale("fr"))
?locale
parse_number("123.456.789", locale = locale(decimal_mark = ".", grouping_mark = "."))
parse_number("123,456,789", locale = locale(decimal_mark = ","))
parse_number("123,456,789", locale = locale(grouping_mark = "."))
parse_number("123,456.789", locale = locale(grouping_mark = "."))
parse_number("123.456,789", locale = locale(decimal_mark = ","))
parse_number("123.456,789", locale = locale(grouping_mark = "."))
