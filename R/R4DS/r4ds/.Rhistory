y_pred.svm.grid <- predict(social.svm, set.grid) # use grid to predict values w/ our model
plot(set[,-3],
main = c("SVM (", deparse(substitute(set))," set)"), # get set name from argument given
xlab = "Age",
ylab = "Estimated Salary",
xlim = range(x1),
ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_pred.svm.grid), length(x1), length(x2)), add = T) # add logistic regression "split" line
points(set.grid, pch = 19, col = if_else(y_pred.svm.grid == 1, "springgreen3", "tomato"))
points(set, pch = 19, col = if_else(set[,3] == 1, "green4", "red3"))
}
plot.svm.model(training)
plot.svm.model(test)
## Create function to visualize different set results
plot.svm.model <- function(set) {
x1 <- seq(min(set[,1]) - 1, max(set[,1]) + 1, by = 0.05) # get sminimum scaled age + go up to the max by increments of .1
x2 <- seq(min(set[,2]) - 1, max(set[,2]) + 1, by = 0.05) # get minimum scaled salary + go up to the max by increments of .1
set.grid <- expand.grid(x1,x2) # Create DF from all possible combos of the age + salary vectors to make a grid
colnames(set.grid) <- c("Age","EstimatedSalary")
y_pred.svm.grid <- predict(social.svm, set.grid) # use grid to predict values w/ our model
plot(set[,-3],
main = c("Radial SVM (", deparse(substitute(set))," set)"), # get set name from argument given
xlab = "Age",
ylab = "Estimated Salary",
xlim = range(x1),
ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_pred.svm.grid), length(x1), length(x2)), add = T) # add logistic regression "split" line
points(set.grid, pch = 19, col = if_else(y_pred.svm.grid == 1, "springgreen3", "tomato"))
points(set, pch = 19, col = if_else(set[,3] == 1, "green4", "red3"))
}
plot.svm.model(training)
plot.svm.model(test)
library(tidyverse)
library(ggplot2)
library(caTools)
library(e1071) # most popular SVM libary, other is `kernlab`
library(ElemStatLearn)
## import data
social <- read_csv("Social_Network_Ads.csv")
## Cut down dataset
social <- social %>%
select(Age,EstimatedSalary,Purchased) %>% # cut down cols
mutate(Purchased = factor(Purchased, levels = c(0,1)), # encode outcome
# scale data (age is in 10s, salary in 10k's)
Age = c(scale(Age)), # use c(scale)) to prevent scale from changing class of the column
EstimatedSalary = c(scale(EstimatedSalary))) # Encode target/outcome variable as fact
# split data into Training + Test sets
set.seed(123)
spl <- sample.split(social$Purchased, SplitRatio = 0.75) # tidy does not work here
(training <- social %>%
subset(spl == TRUE))
(test <- social %>%
subset(spl == FALSE))
social.svm <- svm(Purchased ~ ., training, type = 'C-classification', kernel = 'linear')
# Predict on test set results
y_pred.svm <- predict(social.svm, test[-3])
## Making the Confusion Matrix
(table(test$Purchased, y_pred.svm))
## Create function to visualize different set results
plot.svm.model <- function(set) {
x1 <- seq(min(set[,1]) - 1, max(set[,1]) + 1, by = 0.05) # get sminimum scaled age + go up to the max by increments of .1
x2 <- seq(min(set[,2]) - 1, max(set[,2]) + 1, by = 0.05) # get minimum scaled salary + go up to the max by increments of .1
set.grid <- expand.grid(x1,x2) # Create DF from all possible combos of the age + salary vectors to make a grid
colnames(set.grid) <- c("Age","EstimatedSalary")
y_pred.svm.grid <- predict(social.svm, set.grid) # use grid to predict values w/ our model
plot(set[,-3],
main = c("SVM (", deparse(substitute(set))," set)"), # get set name from argument given
xlab = "Age",
ylab = "Estimated Salary",
xlim = range(x1),
ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_pred.svm.grid), length(x1), length(x2)), add = T) # add logistic regression "split" line
points(set.grid, pch = 19, col = if_else(y_pred.svm.grid == 1, "springgreen3", "tomato"))
points(set, pch = 19, col = if_else(set[,3] == 1, "green4", "red3"))
}
plot.svm.model(training)
plot.svm.model(test)
install.packages("arules")
install.packages("arulesViz")
install.packages("bitops")
install.packages("ca")
install.packages("caTools")
install.packages("e1071")
install.packages("MASS")
install.packages("rgl")
install.packages("RODBC")
install.packages("tree")
install.packages("rpart")
install.packages("XML")
install.packages("rJava")
install.packages("RJDBC")
install.packages("DBI")
install.packages(c("data.table", "heatmaply", "irlba", "kableExtra", "mice", "purrr", "quantreg", "tidyr"))
a <- matrix (1:16,4,4)
# get val in row 2 col 3
a[2,3]
a[1:3,2:4
]
a[1:2,]
# get all vals in all rows from cols 1 + 2
a[,1:2]
a[-1:3,]
a[-1:3,]
a[-c(1,3),]
a[-c(1,3),-c(1,2,4)]
a[1:3,2:4]
a[-c(1,3),-c(1,2,4)]
auto <- read.table("Auto.data",header=T,na.strings ="?")
attach(mtcars)
plot(cyl,mpg)
cyl <- as.factor(cyl)
plot(cyl,mpg)
plot(cyl , mpg , col ="red", varwidth =T, xlab="cylinders ", ylab="MPG")
hist(mpg, col = 2, breaks = 15)
pairs(mtcars)
pairs(~ mpg + disp + hp + wt + qsec, mtcars)
?identify
plot(hp,mpg)
pairs(mtcars)
head(mtcars)
head(Auto)
load(Auto)
??Auto
?identify
plot(hp,mpg)
identify(x = hp, y = mpg, labels = disp)
identify(x = hp, y = mpg, labels = disp)
plot(hp,mpg)
identify(x = hp, y = mpg, labels = as.character(disp))
b0.bf.perc <- -20.062
b1.abdomen.circum <- .877
se <- .067
null <- 0
(t <- (b1 - null) / se)
b0.bf.perc <- -20.062
b1.abdomen.circum <- .877
se <- .067
null <- 0
(t <- (b1.abdomen.circum) / se)
b0.bf.perc <- -20.062
b1.abdomen.circum <- .877
se <- .067
null <- 0
(t <- (b1.abdomen.circum) / se)
n <- 252
dF <- n - 2
pt.est <- b1
b0.bf.perc <- -20.062
b1.abdomen.circum <- .877
se <- .067
null <- 0
(t <- (b1.abdomen.circum) / se)
n <- 252
dF <- n - 2
pt.est <- b1.abdomen.circum
(t.crit <- abs(qt(p = .025, df = 251)))
mOe <- t.crit*se
(lower <- pe - mOe)
b0.bf.perc <- -20.062
b1.abdomen.circum <- .877
se <- .067
null <- 0
(t <- (b1.abdomen.circum) / se)
n <- 252
dF <- n - 2
pt.est <- b1.abdomen.circum
(t.crit <- abs(qt(p = .025, df = 251)))
mOe <- t.crit*se
(lower <- pt.est - mOe)
(upper <- pt.est + mOe)
library(tidyverse)
library(ggplot2)
library(nycflights13)
library(stringr)
double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'"
double_quote <- "\"" # or '"'
single_quote <- '\'' # or "'"
double_quote
x <- c("\"", "\\")
x
writeLines(x)
x <- "\u00b5"
x
str_length(c("a", "R for data science", NA))
str_c("x", "y")
str_c("x", "y", "z")
str_c("x", "y")
str_c("x", "y", "z")
#control how seperate
str_c("x", "y", sep = ", ")
x <- c("abc", NA)
str_c("|-", x, "-|")
str_c("|-", str_replace_na(x), "-|")
str_c("prefix-", c("a", "b", "c"), "-suffix")
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c(
"Good ", time_of_day, " ", name,
if (birthday) " and HAPPY BIRTHDAY",
"."
)
str_c(c("x", "y", "z"), collapse = ", ")
x <- rnorm(50)
mean(is.na(x))
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
f1("hello","c")
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
f1("hello","h")
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
f1("hello","he")
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
f1("hello","hee")
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
substr("hello",1)
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
substr("hello",1,nchar("he"))
f1 <- function(string, prefix) {
substr(string, 1, nchar(prefix)) == prefix # takes a string, removes 1st char + adds a prefix
}
substr("hello",1,nchar("heee"))
f2 <- function(x) {
if (length(x) <= 1) return(NULL)
x[-length(x)]
}
# if a given object's length is less than 1, return NULL
# if not, return the nth to last object of the length
f2 <- function(x) {
if (length(x) <= 1) return(NULL)
x[-length(x)]
}
# if a given object's length is less than 1, return NULL
# if not, return the nth to last object of the length
f2(x)
f2 <- function(x) {
if (length(x) <= 1) return(NULL)
x[-length(x)]
}
# if a given object's length is less than 1, return NULL
# if not, return the nth to last object of the length
f2(x)
x
f3 <- function(x, y) {
rep(y, length.out = length(x))
}
f3 <- function(x, y) {
rep(y, length.out = length(x))
}
f3(x,3)
f3 <- function(x, y) {
rep(y, length.out = length(x))
}
# repeat 7 as many times as the length of x
repeat_y <- function(x,y) {
rep(y, length.out = length(x))
}
?rnorm
?MASS::mvrnorm
# return a logical vector describing whether or not each element of a vector is named.
has_name <- function(x) {
nms <- names(x)
if (is.null(nms)) {
rep(FALSE, length(x))
} else {
!is.na(nms) & nms != ""
}
}
# return a logical vector describing whether or not each element of a vector is named.
has_name <- function(x) {
nms <- names(x)
if (is.null(nms)) {
rep(FALSE, length(x))
} else {
!is.na(nms) & nms != ""
}
}
has_name(c("hi",1,3,4,"bye"))
if (c(TRUE, FALSE)) {}
##> Warning in if (c(TRUE, FALSE)) {: the condition has length > 1 and only the first element will be used
##> NULL
identical(0L, 0)
x <- sqrt(2) ^ 2
x == 2
x - 2 # expect to be 0
?if
?ifelse
?if
``
>if()
?if()
?`if`
?ifelse
if (9 > 10) {
print(10)
} else {
print(20)
}
ifelse(9 > 10, 10, 20)
if (9 > 10) {
print(10)
} else {
print(20)
}
ifelse(9 > 10, 10, 20)
if ("maybe" == "maybe") {
print("match")
} else {
print("no")
}
ifelse("maybe`" == "maybe","match", "no")
lubridate::now()
10:00:00 EST
lubridate::now() > "10:00:00 EST"
lubridate::now() > as.time(10:00:00)
lubridate::now() > as.Date(10:00:00)
lubridate::now()
lubridate::now()
> 10
lubridate::now() > 10
lubridate::now() > 12
lubridate::now() > 14
lubridate::now() > 6
lubridate::hms(10:00:00)
lubridate::hms(10)
lubridate::hms(10,10,10)
lubridate::hms("10","10","10")
library(lubridate)
?hms
lubridate::hms("10:00:00")
lubridate::now() > lubridate::hms("10:00:00")
lubridate::now() > lubridate::hms("12:00:00")
lubridate::now() > lubridate::as_datetime("12:00:00")
lubridate::now() > lubridate::as_datetime("12:00:00")
hour(lubridate::now())
greet <- function(time) {
if (hour(time) > 11) {
print("good morning")
} else if (hour(time) > 4) {
print("good afternoon")
} else {
print("good evening")
}
}
greet(lubridate::now())
greet <- function(time) {
if (hour(time) < 11) {
print("good morning")
} else if (hour(time) < 16) {
print("good afternoon")
} else {
print("good evening")
}
}
greet(lubridate::now())
greet <- function(time) {
if (hour(time) < 11) {
print("good morning")
} else if (hour(time) < 16) {
print("good afternoon")
} else {
print("good evening")
}
}
greet(lubridate::now()+10)
lubridate::now() + 10
lubridate::now() + 240
lubridate::now() + 2400
lubridate::now() + 9000
lubridate::now() + 15000
greet <- function(time) {
if (hour(time) < 11) {
print("good morning")
} else if (hour(time) < 16) {
print("good afternoon")
} else {
print("good evening")
}
}
greet(lubridate::now()+10)
greet(lubridate::now() + 15000)
greet <- function(time) {
if (hour(time) < 11) {
print("good morning")
} else if (hour(time) < 16) {
print("good afternoon")
} else {
print("good evening")
}
}
greet(lubridate::now()+10)
greet(lubridate::now() + 18000)
?mod
mod(3)
3 %% 3
fizzbuzz <- function(x) {
if (x %% 3 == 0 && x %% 5 == 0) {
print("fizzbuzz")
} else if (x %% 3 == 0) {
print("fizz")
} else if (x %% 5 == 0) {
print("buzz")
}
}
fizzbuzz(6)
fizzbuzz(10)
fizzbuzz(15)
?cut
if (temp <= 0) {
"freezing"
} else if (temp <= 10) {
"cold"
} else if (temp <= 20) {
"cool"
} else if (temp <= 30) {
"warm"
} else {
"hot"
}
temp <- 0
if (temp <= 0) {
"freezing"
} else if (temp <= 10) {
"cold"
} else if (temp <= 20) {
"cool"
} else if (temp <= 30) {
"warm"
} else {
"hot"
}
cut(seq(10,100,10))
temp <- 0
if (temp <= 0) {
"freezing"
} else if (temp <= 10) {
"cold"
} else if (temp <= 20) {
"cool"
} else if (temp <= 30) {
"warm"
} else {
"hot"
}
cut(seq(10,100,10),10)
temp <- 0
if (temp <= 0) {
"freezing"
} else if (temp <= 10) {
"cold"
} else if (temp <= 20) {
"cool"
} else if (temp <= 30) {
"warm"
} else {
"hot"
}
cut(seq(10,100,1),10)
temp <- 0
if (temp <= 0) {
"freezing"
} else if (temp <= 10) {
"cold"
} else if (temp <= 20) {
"cool"
} else if (temp <= 30) {
"warm"
} else {
"hot"
}
#cut(,10)
seq(10,100,1)
temp <- 0
if (temp <= 0) {
"freezing"
} else if (temp <= 10) {
"cold"
} else if (temp <= 20) {
"cool"
} else if (temp <= 30) {
"warm"
} else {
"hot"
}
seq(10,100,1)
cut(seq(10,100,1),10)
# Compute confidence interval around mean using normal approximation
mean_ci <- function(x, conf = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - conf
mean(x) + se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
x <- runif(100)
mean_ci(x)
mean_ci(x, conf = 0.99)
# Good
mean(1:10, na.rm = TRUE)
# Bad
mean(x = 1:10, , FALSE)
mean(, TRUE, x = c(1:10, NA))
