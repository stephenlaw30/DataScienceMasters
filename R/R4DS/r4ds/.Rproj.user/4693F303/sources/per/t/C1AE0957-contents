---
title: "Ch13_RelationalData"
author: "Steve Newns"
output: html_document
---

```{r setup, include=FALSE}
library(tidyverse)
library(ggplot2)
library(nycflights13)
```

Rare that a data analysis involves only a single table of data = must usually combine multiple tables to answer questions

Multiple tables of data = **relational data** b/c it is the **relations**, not just the individual datasets, that are important.

**Relation** = always defined between a pair of tables + all other relations are built up from this simple idea: *relations of 3+ tables are always a property of the relations between each pair*. 

Sometimes both elements of a pair can be the same table! This is needed if, for example, you have a table of people + each person has a reference to their parents.

To work w/ relational data you need verbs that work w/ pairs of tables --> 3 families of verbs designed to work with relational data:
<ul>
<li> **Mutating joins** = add new variables to 1 data frame from matching observations in another. </li>
<li> **Filtering joins** = filter observations from 1 data frame based on whether or not they match an observation in the other table. </li>
<li> **Set operations** = treat observations as if they were **set elements**. </li>
</ul>

Most common place to find relational data = RDBMS (encompasses almost all modern databases) 

SQL expression in `dplyr` is a little different = a little easier b/c `dplyr` is specialised to do data analysis + makes common data analysis operations easier at the expense of making it more difficult to do other things not commonly needed for data analysis.

## 13.2 nycflights13

`nycflights13` = 4 tibbles related to the `flights` table

`airlines` = look up full carrier name from its abbreviated code:
```{r}
airlines
```

`airports` gives info about each airport, IDed by FAA airport code:

```{r}
airports
```

`planes` gives info about each plane, IDed by its `tailnum`:

```{r}
planes
```

`weather` gives the weather at each NYC airport for each hour:
```{r}
weather
```

For nycflights13:
<ul>
<li> `flights` connects to `planes` via a single variable, `tailnum`. </li> 
<li> `flights` connects to `airlines` through the `carrier`  </li>
<li> `flights` connects to `airports` in 2 ways: via  `origin` + `dest`  </li> 
<li> `flights` connects to `weather` via `origin` (the location), + `year`, `month`, `day` and `hour` (the time). </li> 
</ul>

## 13.2.1 Exercises

**Imagine you wanted to draw (approximately) the route each plane flies from its origin to its destination. What variables would you need? What tables would you need to combine?**

`flights` = `tailnum`,`flight`,`origin`,`dest`, `airports` = `faa`, `planes` = `tailnum`

**What is the relationship between `weather` and `airports`?**

`weather::origin` = `airports` = `faa`

**`weather` only contains info for origin (NYC) airports. If it contained weather records for ALL airports in the USA, what additional relation would it define with flights?**

`year`, `month`, `day`, `hour` would match in both tables, but we need a col for `airport` overall, like `faa` in `weather`, instead of just `origin`

**We know some days of the year are “special”, + fewer people than usual fly on them. How might you represent that data as a data frame? What would be the PK of that table? How would it connect to the existing tables?**

Create a table for a date dimension for these "special" dates, and make a PK based on `year`, `month`, `day`, `hour`

# 13.3 Keys

Variables used to connect each pair of tables = **keys** = a variable/set of variables that uniquely ID's an observation. 

In simple cases, a single variable is sufficient to ID an observation (each plane is uniquely IDed by its `tailnum`). In other cases, multiple variables may be needed (To ID an observation in `weather` you need 5 variables: `year`, `month`, `day`, `hour`, and `origin`.

2 types of keys:

<ul>
<li> **primary key** uniquely ID's an observation in its *own* table (Ex: `planes$tailnum`) </li>
<li> foreign key uniquely ID's an observation in **another* table. (Ex: `flights$tailnum` = FK b/c it appears in `flights` where it matches each flight to a unique plane)</li>
</ul>

A variable can be *both* a PK + a FK (`origin` = part of the `weather` PK + is a FK for `airport` table)

Once you’ve ID'ed PK's in your tables, it’s good practice to verify they do indeed *uniquely* ID each observation. 

1 way to do so = `count()` the PK's + look for entries where n > 1:

```{r}
# check that tailnum uniquely ID's a plane
planes %>% 
  count(tailnum) %>% 
  filter(n > 1)

# check each YMD:H + origin combo uniquely ID's each weather record
weather %>% 
  count(year, month, day, hour, origin) %>% 
  filter(n > 1)
```

Sometimes a table doesn’t have an *explicit* PK = each row is an observation, but no combo of variables reliably ID's it

What’s the PK in `flights`? Might think it would be the date + flight or tail #, but neither of those are unique:

```{r}
# check if YMD + flight # uniquely ID's a flight
flights %>% 
  count(year, month, day, flight) %>% 
  filter(n > 1)

# check if YMD + tail # uniquely ID's a flight
flights %>% 
  count(year, month, day, tailnum) %>% 
  filter(n > 1)
```

When starting to work w/ this data, I had naively assumed each flight # would be only used once per day (would make it much easier to communicate problems w/ a specific flight). Unfortunately that is not the case! 

If a table lacks a PK, it’s sometimes useful to *add one* w/ `mutate()` and `row_number()` = makes it easier to match observations if you’ve done some filtering + want to check back in w/ original data = a **surrogate key**.

A PK + the corresponding FK in another table form a **relation**. (typically **one-to-many** --> Ex: Each flight has 1 plane, but each plane has many flights)

In other data, you’ll occasionally see a **1-to-1** relationship (special case of 1-to-many). You can model **many-to-many** relations w/ a **many-to-1** relation + a **1-to-many relation**. 

For example, in this data there’s a **many-to-many** relationship between airlines + airports: each airline flies to many airports; each airport hosts many airlines.

## 13.3.1 Exercises

**Add a surrogate key to flights.**
```{r}
flights %>% 
  mutate(rownum = row_number()) %>%
  count(rownum, year, month, day, flight) %>% 
  filter(n > 1)
```

**ID the keys in the following datasets**

Lahman::Batting = playerID, yearID, stint
babynames::babynames = year, sex, name
nasaweather::atmos = lat, long, year, month
```{r}
nasaweather::atmos %>% 
  count(lat, long, year, month) %>% 
  filter(n > 1)
```

fueleconomy::vehicles = id
ggplot2::diamonds = none

**Draw a diagram illustrating the connections between the Batting, Master, and Salaries tables in the Lahman package. Draw another diagram that shows the relationship between Master, Managers, AwardsManagers.**

`playerID` + `yearID` (possibly `teamID` if traded) between `Batting` + `Pitching` + `Salaries`

**How would you characterise the relationship between the Batting, Pitching, and Fielding tables?**

`Batting` - `Pitching` = 1:1, `Batting` - `Salaries` = 1:1, `Pitching` - `Salaries` = 1:1

## 13.4 Mutating joins

Tool for combining a pair of tables = **mutating join** = 1st matches observations by keys then copies across variables from 1 table to the other.

Like `mutate()`, `join` functions add variables to the right.

Imagine you want to add the full airline `name` to `flights2` data --> combine `airlines` + `flights2` data frames w/ `left_join()`:


```{r}
flights2 <- flights %>% 
  select(year:day, hour, origin, dest, tailnum, carrier)

flights2 %>%
  select(-origin, -dest) %>% 
  left_join(airlines, by = "carrier")
```

Get an additional variable: `name` -- > could've got to the same place using `mutate()` + base R’s base subsetting (hence *mutating* join)

```{r}
flights2 %>%
  select(-origin, -dest) %>% 
  mutate(name = airlines$name[match(carrier, airlines$carrier)])
```

This is hard to generalise when you need to match *multiple* variables + takes close reading to figure out the overall intent.

#### 13.4.1 Understanding joins

To help you learn how joins work, I’m going to use a visual representation:
```{r}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     3, "x3"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2",
     4, "y3"
)
```

#### 13.4.2 Inner join

Ssimplest type of join = **inner join** = matches pairs of observations whenever their keys are equal: (To be precise, this is an inner **equijoin** b/c keys are matched using the equality operator =, + since *most* joins = equijoins we usually drop that specification.)

Output of an inner join = new data frame w/ the key, x values, + y values. We use `by` to tell dplyr which variable is the key:
```{r}
x %>% 
  inner_join(y, by = "key")
```

Most important property of inner join = unmatched rows are NOT included in result (generally inner joins = usually NOT appropriate for use in analysis b/c it’s too easy to lose observations)

#### 13.4.3 Outer joins

Outer join keeps observations that appear in *at least 1* of the tables --> 3 types:
<ul>
<li> A left join keeps all observations in x. <li>
<li> A right join keeps all observations in y. <li>
<li> A full join keeps all observations in x + y. <li>
</ul>

Most commonly used join = left join --> used whenever you look up additional data from another table b/c it preserves original observations when there isn’t a match. 

Left join should = default join, unless you have a strong reason to prefer 1 of the others.

#### 13.4.4 Duplicate keys

So far, we've assumed keys are unique. --> not always the case. When keys are not unique, there are 2 possibilities:

1) 1 table has duplicate keys = useful when you want to add in additional info as there is typically a one-to-many relationship. <li>

```{r}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     2, "x3",
     1, "x4"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2"
)
left_join(x, y, by = "key")
```

2) Both tables have duplicate keys = usually an error b/c in neither table do the keys uniquely ID an observation. 

When you join duplicated keys, you get the **Cartesian product** = all possible combos
```{r}
x <- tribble(
  ~key, ~val_x,
     1, "x1",
     2, "x2",
     2, "x3",
     3, "x4"
)
y <- tribble(
  ~key, ~val_y,
     1, "y1",
     2, "y2",
     2, "y3",
     3, "y4"
)
left_join(x, y, by = "key")
```

#### 13.4.5 Defining the key columns

So far = joining by a single variable w/ same name in both tables, a constraint encoded by ``by = "key"`.

Can use other values for `by` to connect the tables in other ways:

1) Default, `by = NULL`, uses *all* variables that appear in *both* tables = **natural join**.

`flights` + `weather` tables match on common variables: `year`, `month`, `day`, `hour` and `origin`.
```{r}
flights2 %>% 
  left_join(weather)
```

2) A character vector, `by = "x"` = like a natural join, but uses only *some* of the common variables

`flights` and `planes` have `year` variables, but they mean different things so we only join by `tailnum`.
```{r}
flights2 %>% 
  left_join(planes, by = "tailnum")
```

Note that `year` variables (appears in both data frames, but are not constrained to be equal) are **disambiguated** in output w/ a suffix.

3) A named character vector: `by = c("a" = "b")` = matches variable a in table x to variable b in table y --> variables from x will be used in the output.

Ex: Want to draw a map we need to combine `flights` data w/ `airports` data containing location (`lat` + `long`) of each airport. Each flight has an `origin` + `destination` airport, so we need to specify *which one* we want to join to:
```{r}
flights2 %>% 
  left_join(airports, c("dest" = "faa"))

flights2 %>% 
  left_join(airports, c("origin" = "faa"))
```

# 13.4.6 Exercises

Compute the average delay by destination, then join on the airports data frame so you can show the spatial distribution of delays. Here’s an easy way to draw a map of the United States:

airports %>%
  semi_join(flights, c("faa" = "dest")) %>%
  ggplot(aes(lon, lat)) +
    borders("state") +
    geom_point() +
    coord_quickmap()
(Don’t worry if you don’t understand what semi_join() does — you’ll learn about it next.)

You might want to use the size or colour of the points to display the average delay for each airport.

Add the location of the origin and destination (i.e. the lat and lon) to flights.

Is there a relationship between the age of a plane and its delays?

What weather conditions make it more likely to see a delay?

What happened on June 13 2013? Display the spatial pattern of delays, and then use Google to cross-reference with the weather.

# 13.4.7 Other implementations

`base::merge()` can perform all 4 types of mutating join:

<ul>
<li> `inner_join(x, y)`   =	`merge(x, y)` </li>
<li> `left_join(x, y)`    =	`merge(x, y, all.x = TRUE)` </li>
<li> `right_join(x, y)`   =	`merge(x, y, all.y = TRUE)` </li>
<li> `full_join(x, y)`    =	`merge(x, y, all.x = TRUE, all.y = TRUE)` </li>


Advantages of `dplyr` verbs = more clearly convey intent of code + the difference between joins is really important, but is concealed in the arguments of `merge()` while `dplyr`’s joins are considerably faster + don’t mess w/ the order of the rows.

**SQL** = inspiration for `dplyr`’s conventions, so the translation is straightforward:

<ul>
<li> `inner_join(x, y, by = "z")`   =	`SELECT * FROM x INNER JOIN y USING (z)` </li>
<li> `left_join(x, y, by = "z")`    =	`SELECT * FROM x LEFT OUTER JOIN y USING (z)` </li>
<li> `right_join(x, y, by = "z")`   =	`SELECT * FROM x RIGHT OUTER JOIN y USING (z)` </li>
<li> `full_join(x, y, by = "z")`    =	`SELECT * FROM x FULL OUTER JOIN y USING (z)` </li>
</ul>

Note that “INNER” and “OUTER” are optional, and often omitted.

Joining different variables between tables (e.g. `inner_join(x, y, by = c("a" = "b"))`) uses a slightly different syntax in SQL: `SELECT * FROM x INNER JOIN y ON x.a = y.b`. 

As this syntax suggests, SQL supports a wider range of join types than `dplyr` b/c you can connect tables using constraints other than equality (**non-equijoins**).

# 13.5 Filtering joins

**Filtering joins** match observations in the same way as mutating joins, but affect the *observations*, NOT the variables

2 types:

<ul>
<li> `semi_join(x, y)` *keeps* all *observations* in x that have a match in y.</li>
<li> `anti_join(x, y)` *drops* all *observations* in x that have a match in y.</li>
</ul>

**Semi-joins** = useful for matching filtered summary tables back to the original rows.

Imagine you’ve found the top 10 most popular destinations:
```{r}
(top_dest <- flights %>%
  count(dest, sort = TRUE) %>%
  head(10))
```

Now you want to find each flight that went to 1 of those destinations either via a filter yourself:
```{r}
flights %>% 
  filter(dest %in% top_dest$dest)
```

But this difficult to extend to multiple variables. If you found the 10 days w/ highest average delays, can't construct a `filter` statement using `year`, `month`, + `day` to match it back to flights

Instead use a semi-join to connect the 2 tables like a mutating join, but instead of *adding new columns*, it only **KEEPS** the rows in x that have a match in y:
```{r}
flights %>% 
  semi_join(top_dest)
```

Only the existence of a match is important + it doesn’t matter which observation is matched --> filtering joins never duplicate rows like mutating joins do

The inverse of a semi-join is an **anti-join** = keeps rows that *don’t* have a match = useful for diagnosing join mismatches. 

When connecting `flights` + `planes`, you might be interested to know there are many `flights` that *don’t* have a match in planes:

```{r}
flights %>%
  anti_join(planes, by = "tailnum") %>%
  count(tailnum, sort = TRUE)
```

13.5.1 Exercises

What does it mean for a flight to have a missing tailnum? What do the tail numbers that don’t have a matching record in planes have in common? (Hint: one variable explains ~90% of the problems.)

Filter flights to only show flights with planes that have flown at least 100 flights.

Combine fueleconomy::vehicles and fueleconomy::common to find only the records for the most common models.

Find the 48 hours (over the course of the whole year) that have the worst delays. Cross-reference it with the weather data. Can you see any patterns?

What does anti_join(flights, airports, by = c("dest" = "faa")) tell you? What does anti_join(airports, flights, by = c("faa" = "dest")) tell you?

You might expect that there’s an implicit relationship between plane and airline, because each plane is flown by a single airline. Confirm or reject this hypothesis using the tools you’ve learned above.

# 13.6 Join problems

Few things to do w/ data to make joins go smoothly.

**1)** IDing variables that form the PK in each tabl, usually do this based on understanding of the data, not *empirically* (by looking for a combo of variables that give a unique ID).

If you just look for variables w/out thinking about what they mean, you might get (un)lucky + find a combo unique in your current data, *but the relationship might not be true in general*.

Ex: `altitude` + `longitude` uniquely ID each airport, but they are not good identifiers
```{r}
airports %>% count(alt, lon) %>% filter(n > 1)
```

**2)** Check that none of the variables in the PK are missing b/c if a value is missing it can’t ID an observation

**3)** Check that FKs match PKs in another table + best way to so is w/ `anti_join()`. 

It’s common for keys not to match b/c of data entry errors + fixing these is often a lot of work.

If you *do* have missing keys, be thoughtful about use of inner vs. outer joins, carefully considering whether or not to drop rows that don’t have a match.

Be aware that simply checking the # of rows before + after a join is NOT sufficient to ensure a join has gone smoothly. 

If you have an inner join w/ duplicate keys in both tables, you might get unlucky as the # of dropped rows might exactly equal the # of duplicated rows!

# 13.7 Set operations

Final type of 2-table verb = **set operations** = used least frequently but are occasionally useful to break a single complex filter into simpler pieces. 

All these operations work w/ a complete row, comparing the values of every variable + they expect the x + y inputs to have the same variables, + they treat the observations like sets:

<ul>
<li> `intersect(x, y)`: return only observations in *BOTH* x and y. </li>
<li> `union(x, y)`: return *unique* observations in x and y. </li>
<li> `setdiff(x, y)`: return observations in x, but *not* in y. </li>
</ul>

Given this simple data:
```{r}
df1 <- tribble(
  ~x, ~y,
   1,  1,
   2,  1
)
df2 <- tribble(
  ~x, ~y,
   1,  1,
   1,  2
)
```

The 4 possibilities are:
```{r}
intersect(df1, df2) 

union(df1, df2) # get 3 rows, not 4

setdiff(df1, df2)

setdiff(df2, df1)
```