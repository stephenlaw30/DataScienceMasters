---
title: "Ch12_TidyData"
author: "Steve Newns"
date: "October 18, 2017"
output: html_document
---

```{r setup, include=FALSE}
library(tidyverse)
library(ggplot2)
```

# Intro

**tidy data** = consistent way to organise data in R, which requires some upfront work which pays off in the long term

Once data is tidy, tidy tools provided by tidyverse packages = spend much less time munging data from 1 representation to another, allowing more time for the analytic questions at hand.

TO learn more about the underlying theory, look @ Tidy Data paper published in the Journal of Statistical Software, http://www.jstatsoft.org/v59/i10/paper.

## 12.2 Tidy data

**tidyr** = package that provides a bunch of tools to help tidy up messy datasets + is a member of the core tidyverse.

Can represent the same underlying data in multiple ways --> below = the same data organised in 4 different ways to show values of 4 vars = **country**, **year**, **population**, + **cases**, but each dataset organises the values in a different way.
```{r}
table1
table2
table3
table4a # cases
table4b # pop
```

These are all representations of the same underlying data, but are not equally easy to use: 1 dataset, the **tidy dataset**, will be much easier to work w/ inside the tidyverse.

**There are 3 interrelated rules which make a dataset tidy:**
<ul>
<li> Each variable must have its own column. </li>
<li> Each observation must have its own row. </li>
<li> Each value must have its own cell. </li>
</ul>

Following the 3 rules makes a dataset tidy: **variables = in columns, observations = in rows, values = in cells**.

The 3 rules = interrelated b/c it's impossible to only satisfy 2 of the 3 + that interrelationship leads to an even simpler set of practical instructions:
<ul>
<li> Put each dataset in a tibble. </li>
<li> Put each variable in a column. </li>

In this example, *only ***`table1`** is tidy* = only representation where each column is a variable.

2 main advantages from ensuring data is tidy
<ul>
<li> General advantage to picking 1 consistent way of storing data = w/ a consistent data structure = easier to learn the tools that work w/ it b/c they have an underlying uniformity.
<li> Specific advantage to placing variables in columns = allows R's **vectorised** nature to shine. 
  <li> As w/ `mutate` and `summary` functions, most built-in R functions work w/ *vectors* of values = makes transforming tidy data feel particularly natural.

dplyr, ggplot2, + all other packages in tidyverse = designed to work w/ tidy data. 

```{r, message=F, warning=F}
# Compute cases/pop rate per 10,000
table1 %>%
  mutate(rate = (cases / population)*10000)

# Number of cases / year
table1 %>%
  count(year, wt = cases)

# Visualise changes over in cases over time by country
table1 %>%
  ggplot(aes(year,cases)) + 
  geom_line(aes(group = country), color = "grey50") + 
  geom_point(aes(color = country))
```

## 12.2.1 Exercises

*Using prose, describe how the variables and observations are organised in each of the sample tables.*
<ul>
<li> table1: variables = cols, obs/records = rows, values = cells </li>
<li> table2: cases + population variables are condensed into a `type` variable, breaking apart single records into 2 records, then adding a new variable `count` showing respective counts for respective types </li>
<li> table3: We have no description of the numbers that make up `rate` (i.e. no variables describing the data) </li>
<li> table4a: the values of the `year` variables were pivoted into cols and there's no sign of `population` </li>
</ul>

*Compute the rate for table2, and table4a + table4b. You will need to perform four operations:*
<ul>
<li> Extract the number of TB cases per country per year. </li>
<li> Extract the matching population per country per year. </li>
<li> Divide cases by population, and multiply by 10000. </li>
<li> Store back in the appropriate place. </li>
</ul>

```{r}
table2 %>%
  spread(type, count) %>%
  mutate(rate.per.10k = (cases / population) * 10000) %>% # spready a kev-value pair across cols 
  select(country, year, cases, population, rate.per.10k)

table3 %>%
  mutate(cases = as.integer(sapply(strsplit(rate, "/"), "[", 1)),
        population =  as.integer(sapply(strsplit(rate, "/"), "[", 2)),
        rate.per.10k = (cases / population) * 10000) %>%
  select(country, year, cases, population, rate.per.10k)  

#tibble(country = rep(table4a[["country"]], 2),
#       year = rep(rep(c(1999, 2000),2), nrow(table4a)),
#       cases = c(table4a[["1999"]], table4b[["2000"]]),
#       population = c(table4a[["2000"]], table4b[["2000"]]),
 #      rate.per.10k = c((table4a[["1999"]] / table4b[["1999"]]) * 10000,
 #                 (table4b[["2000"]] / table4b[["2000"]]) * 10000))
```

*Which representation is easiest to work with? Which is hardest? Why?*

Table 1 = easier, table4 a and b are hardest b/c they're split into 2 tables

*Recreate the plot showing change in cases over time using table2 instead of table1. What do you need to do first?*

```{r}
table2 %>%
  spread(type, count) %>%
  ggplot(aes(year,cases)) + 
  geom_line(aes(group = country), color = "grey50") + 
  geom_point(aes(color = country))

table2 %>%
  filter(type == "cases") %>%
  ggplot(aes(year,count)) + 
  geom_line(aes(group = country), color = "grey50") + 
  geom_point(aes(color = country)) + 
  ylab("cases")
```

# 12.3 Spreading and gathering

Most data = untidy for 2 main reasons:
<ul>
<li> Most people aren't familiar w/ principles of tidy data + it's hard to derive them yourself unless you spend a lot of time working w/ data. </li>
<li> Data is often organised to facilitate some use *other than analysis*, such as to make entry as easy as possible. </li>
</ui>

For most *real* analyses, you'll need to do some tidying. + the 1st first step is always = *figure out what the variables + observations are. 
<ul>
<li> Sometimes easy; other times you'll need to consult w/ people who originally generated the data. </li>
</ui>
The 2nd step = resolve 1 of 2 common problems:
<ul>
<li> 1 variable might be spread across multiple columns.</li>
<li> 1 observation might be scattered across multiple rows.</li>
</ui>

Typically a dataset will only suffer from 1 of these problems + will only suffer from both if you're really unlucky

To fix these problems, you'll need the 2 most important functions in tidyr: `gather()` and `spread()`.

# 12.3.1 Gathering

Common problem = some col names are not names of variables, but *values* of a variable (`table4a` cols = values of `year` = 1999 and 2000 + each row represents 2 observations, not 1)

To tidy a dataset like this, **gather those columns into a new pair of variables**.

3 parameters:
<ul>
<li> Set of columns that incorrectly represent *values*, and *not* variables (1999 and 2000.)
<li> Name of the variable whose values form the column names = the **key** = `year`.
<li> Name of the variable whose values are spread over the cells = the **value** = # number of cases.
</ui>

Together those parameters generate the call to `gather()`:

```{r}
table4a %>% 
  gather(`1999`, `2000`, key = "year", value = "cases")
```

Cols to gather are specified w/ `dplyr::select()`-style notation. Here there are only 2 Cols, so list them individually (Note "1999" and "2000" are **non-syntactic names** (don't start w/ a letter) so we have to surround them in backticks)

In the final result, the gathered Cols are **dropped** + we get new key + value cols. Otherwise, the relationships between the original variables are preserved. 

Can use gather() to tidy table4b in a similar fashion (population)

```{r}
table4b %>% 
  gather(`1999`, `2000`, key = "year", value = "population")
```

To **combine** tidied versions of table4a + table4b into a single tibble, use `dplyr::left_join()`

```{r}
tidy4a <- table4a %>% 
  gather(`1999`, `2000`, key = "year", value = "cases")

tidy4b <- table4b %>% 
  gather(`1999`, `2000`, key = "year", value = "population")

left_join(tidy4a, tidy4b)
```

# 12.3.2 Spreading

**Spreading** = opposite of gathering = use it when an observation is scattered across multiple rows. 

Ex: table2: an observation = a country in a year, but each observation (case + population) is spread across 2 rows.

To tidy this up, 1st analyse the representation in similar way to `gather()` but this time w/ only 2 parameters:
<ul>
<li> Col that contains variable names = key Col = `type`. </li> 
<li> Col that contains values from multiple variables = value Col = `count` </li> 
</ui> 

Once we've figured that out, we can use `spread()`

```{r}
spread(table2, key = type, value = count)
```

As you might have guessed from the common key + value arguments, `spread()` + `gather()` = complements. 
<ul>
<li>`gather()` makes *wide tables narrower + longer*</li>
<li>`spread()' makes *long tables shorter and wider*.</li>
</ui>

# 12.3.3 Exercises

*Why are gather() and spread() not perfectly symmetrical? Carefully consider the following example: (Hint: look at the variable types and think about column names.)* 

```{r}
(stocks <- tibble(
  year   = c(2015, 2015, 2016, 2016),
  half  = c(   1,    2,     1,    2),
  return = c(1.88, 0.59, 0.92, 0.17)
))
stocks %>% 
  spread(year, return) %>% # splits year values into cols, puts return values in respective cols =  3 resulting cols w/ half = 1st col
  gather("year", "return", `2015`:`2016`) # takes 2nd + 3rd col from spread() and splits out, leaving `half` as 1st col
```

*Both spread() and gather() have a convert argument. What does it do?*

It computes on each new col and converts the possibly mixed-type variable values and performs type.convert() to convert the character vectors to logical, integer, numeric, complex or factor as appropriate.

*Why does this code fail?*
```{r}
#table4a %>% 
#  gather(1999, 2000, key = "year", value = "cases")
#> Error in combine_vars(vars, ind_list): Position must be between 0 and n
```

`1999` and `2000` and not syntactically correct (they start w/ #'s so we need to surround them with backticks)

*Why does spreading this tibble fail? How could you add a new column to fix the problem?*

```{r}
' (people <- tribble(
  ~name,             ~key,    ~value,
  #-----------------|--------|------
  "Phillip Woods",   "age",       45,
  "Phillip Woods",   "height",   186,
  "Phillip Woods",   "age",       50,
  "Jessica Cordero", "age",       37,
  "Jessica Cordero", "height",   156
))
people %>%
  spread(key = key, value = value)'
```

Some record identifiers (`name`) have 2 values for age or for height, so `spread()` doesn't know how to split these out into their own record (1 value for age or height per person/name)

*Tidy the simple tibble below. Do you need to spread or gather it? What are the variables?*

```{r}
(preg <- tribble(
  ~pregnant, ~male, ~female,
  "yes",     NA,    10,
  "no",      20,    12
))
preg %>%
  gather(male, female, key = 'gender', value = 'count')
```

# 12.4 Separating and uniting

So far you've learned how to tidy `table2` + `table4`, but not `table3` = a different problem = 1 col (rate) that contains 2 vars (`cases` + `population`)

We need `separate()` (+ the complement of `separate()`: `unite()` = use if a single var is spread across multiple cols)

# 12.4.1 Separate

`separate()` pulls apart 1 col into multiple columns by splitting wherever a separator character appears. Take table3:

```{r}
(table3 %>%
  separate(rate, into = c("cases","population"))) # splits by any non-alphanumeric char by default
```

Use a specific char to separate a col:

```{r}
table3 %>% 
  separate(rate, into = c("cases", "population"), sep = "/")
```

Formally, `sep` = a **regular expression**

Look carefully at the col types + notice `case` + `population` = chars

Default behaviour in `separate()` = leave type of the column as is (not useful here b/c they're #'s)

Try + convert to better types using `convert = TRUE`:

```{r}
table3 %>% 
  separate(rate, into = c("cases", "population"), convert = TRUE) #override default of keeping old col type
```

Can also pass a vector of *integers* to `sep` + `separate()` will interpret integers as positions to split at. 
<ul>
<li> Positive values start at 1 on the far-left of the strings </li>
<li> negative value start at -1 on the far-right of the strings </li>
</ui>

When using integers to separate strings, the length of `sep` should be 1 less than the # of names in `into`.

Can use this arrangement to separate the last 2 digits of each year (makes data less tidy, but is useful in other cases)

```{r}
table3 %>% 
  separate(year, into = c("century", "year"), sep = 2) # seperate between 2nd + 3rd position
```

# 12.4.2 Unite

`unite()` = inverse of `separate()` = combines multiple columns into a single column (needed much less frequently than `separate()`, but still a useful tool)

We can use `unite()` to **rejoin** century + year cols created in last example = `tidyr::table5` --> takes a data frame, name of new var to create, + a set of cols to combine

```{r}
table5 %>% 
  unite(col = new, century, year)
```

Also need to use `sep` b/c default = underscore (_) between the values from different cols

```{r}
table5 %>% 
  unite(new, century, year, sep = "")
```

# 12.4.3 Exercises

*What do the extra and fill arguments do in separate()? Experiment with the various options for the following two toy datasets.*

<ul>
<li> `extra` = controls what happens when too many pieces are in `sep` </li>
  <li> **warn** = emit warning, drop extra vals </li>
  <li> **drop** = drop extra vals w/out warning </li>
  <li> **merge** = split max of `length(into)` times </li>
<li> `fill` = opposite of `extra` = not enough pieces </li>
  <li> **warn** = emit warning, fill from right </li>
  <li> **right** = fill w/ missing vals from right </li>
  <li> **left** = fill w/ missing vals from left </li>
</ul>
```{r}
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%  # too many chars in 2nd set
  separate(x, c("one", "two", "three"))  # gives warning

tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%  # too many chars in 2nd set
  separate(x, c("one", "two", "three"), extra = "drop")  # gives no warning

tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%  # too many chars in 2nd set
  separate(x, c("one", "two", "three"), extra = "merge")  # split length(into) = 3 times at most
```

```{r}
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>% # not enough chars in 2nd set
  separate(x, c("one", "two", "three"))  # gives warning, fill from right

tibble(x = c("a,b,c", "d,e", "f,g,i")) %>% # not enough chars in 2nd set
  separate(x, c("one", "two", "three"), fill = "right")  # fill from right

tibble(x = c("a,b,c", "d,e", "f,g,i")) %>% # not enough chars in 2nd set
  separate(x, c("one", "two", "three"), fill = "left") # fill from left
```

*Both unite() and separate() have a remove argument. What does it do? Why would you set it to FALSE?*

It will remove out input col(s) from output data frame, is = `TRUE` by default (i.e. can keep `year` in `seperate()` and keep `century` and `year` in `unite()`)

*Compare and contrast separate() and extract().*

```{r}
(df <- data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e")))
df %>% extract(x, into = "A")
df %>% separate(x ,into = "A")

```
 
 You don't have to name the seperator for `extract`, but you could use a RegEx, while in `separate` you use a **sep** argument. Also, `separate` has arguments to control what happens when there are too many/too few pieces in `sep`

**Why are there three variations of separation (by position, by separator, and with groups), but only one unite?**

You can only unit1 in *one* way (many to one), while we can separate one col into many cols in a variety of ways.

# 12.5 Missing values

A value can be missing in one of two possible ways:
<ul>
<li> Explicitly, i.e. flagged with NA. </li>
<li> Implicitly, i.e. simply not present in the data. </li>
</ul>

```{r}
(stocks <- tibble(
  year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
  qtr    = c(   1,    2,    3,    4,    2,    3,    4),
  return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
))
```
<ul>
<li> Return for the Q4 of 2015 is explicitly missing = cell where its value should be instead contains NA.</li>
<li> Return for the Q1 of 2016 is implicitly missing = simply does not appear in the dataset. </li>
</ul>

An *explicit* missing value = presence of an absence; an *implicit* missing value = absence of a presence.

The way that a dataset is represented can *make implicit values explicit*. 

Make the implicit missing value explicit by putting years in the columns:
```{r}
stocks %>% 
  spread(year, return) # turn year col values into cols w/ values = return values
```

B/c these explicit missing values may not be important in other representations of the data, you can set na.rm = TRUE in `gather()` to turn explicit missing values into implicit ones:

```{r}
stocks %>% 
  spread(year, return) %>% # turn year col values into cols w/ values = return values
  gather(year, return, `2015`:`2016`, na.rm = TRUE) # get the 2015+2016 cols + put their values into return col
```


Another important tool for making missing values explicit in tidy data = `complete()`:
```{r}
stocks %>% 
  complete(year, qtr)
```

`complete()` takes a *set* of cols, finds all unique combos, + ensures the original dataset contains *all those values, filling in explicit NAs where necessary.* (i.e '16, Q1)

1 other important tool for working w/ missing values: Sometimes when a data source has primarily been used for data entry, missing values indicate the *previous value should be carried forward*:

```{r}
(treatment <- tribble(
  ~ person,           ~ treatment, ~response,
  "Derrick Whitmore", 1,           7,
  NA,                 2,           10,
  NA,                 3,           9,
  "Katherine Burke",  1,           4
))
```

Fill in these missing values w/ `fill()` = takes a *set* of cols where you want missing values to be replaced by most recent non-missing value/last observation

```{r}
treatment %>% 
  fill(person)
```

### 12.5.1 Exercises

**Compare and contrast the fill arguments to spread() and complete().**

In `complete`, it takes a *list* of values to use for any NA in combos of variables to turn implicit into explicit missing variables

In `spread()`, it fills in missing values with a *specified* value for both implicit missing values

**What does the direction argument to fill() do?**

Specifies if we should fill the last non-missing value upwards or downwards.

## 12.6 Case Study

Realistic data tidying problem = `tidyr::who` dataset contains tuberculosis (TB) cases broken down by year, country, age, gender, + Dx method from the 2014 World Health Organization Global Tuberculosis Report (http://www.who.int/tb/country/data/download/en/)

There's a wealth of epidemiological info in this dataset, but it's challenging to work w/ in the form data is provided in:
```{r}
who
```

Very typical real-life example dataset = redundant columns, odd variable codes, many missing values that needs multiple steps to tidy

Like `dplyr`, `tidyr` = designed so each function does 1 thing well =  means IRL, you'll usually need to string together multiple verbs into a pipeline.

Almost always best place to start = **gather** together cols that are NOT variables. Let's have a look at what we've got:

<ul>
<li> `country`, `iso2`, `iso3` = 3 variables that redundantly specify country </li>
<li> `year` is clearly also a variable. </li>
<li> don't know what all the other columns are yet, but given the structure in the names (`new_sp_m014`, `new_ep_m014`, `new_ep_f014`) these are likely to be *values*, NOT variables. </li>
</ul>

Need to `gather` together all cols from `new_sp_m014` to `newrel_f65` = don't know what those values represent yet, so give them the generic name **"key"**. 

We know the cells represent counts of cases, so we'll use the variable `cases`. 

There are a lot of missing values right now so for now use `na.rm` just to focus on values that're present.

```{r}
(who1 <- who %>% 
  gather(new_sp_m014:newrel_f65,  # gather
         key = "key", value = "cases", na.rm = TRUE))
```

Can now get some hint of the structure of the values in the new `key` column by counting them to get total counts of cases in each key:

```{r}
who1 %>% 
  count(key)
```

Might be able to parse this out by yourself w/ a little thought + experimentation, but luckily we have the data dictionary handy which tells us:

<ul>
<li> 1st 3 letters of each col = whether col contains new/old cases of TB (In this dataset = all new cases) </li>
<li> The next 2 letters describe the type of TB: </li>
  <ul>
  <li> **rel**=  cases of relapse </li>
  <li> **ep** = cases of extrapulmonary TB </li>
  <li> **sn** = cases of pulmonary TB that could not be diagnosed by a pulmonary smear (smear negative) </li>
  <li> **sp** = cases of pulmonary TB that could be diagnosed be a pulmonary smear (smear positive) </li>
  </ul>
<li> 6th letter gives the sex of TB patients </li>
<li> The remaining numbers gives the age group in 7 seven age groups </li>
</ul>

Need to make a minor fix to the format of the col names b/c unfortunately the names are slightly inconsistent

Instead of `new_rel` we have `newrel` --> use `str_replace()` to replac `newrel` with `new_rel` to make all variable names consistent.

```{r}
(who2 <- who1 %>% 
  mutate(key = stringr::str_replace(key, "newrel", "new_rel")))
```

Separate values in each code w/ 2 passes of `separate()` w/ the 1st splitting at each underscore + the 2nd at each 1st char.
```{r}
(who3 <- who2 %>% 
  separate(key, into = c("new", "type", "sexage"), sep = "_"))
(who4 <- who3 %>% 
  separate(sexage, into = c("sex", "age"), sep = 1)) # 1 = 1st char
```

Drop `new`  b/c it's constant in this dataset + drop `iso2` and `iso3` since they're redundant.
```{r}
who4 %>% 
  count(new)

(who5 <- who4 %>% 
  select(-new, -iso2, -iso3))
```

**The who dataset is now tidy!**

I've shown you the code a piece at a time, assigning each interim result to a new variable = typically isn't how you'd work interactively. Instead, you'd gradually build up a complex pipe:

```{r}
who %>%
  gather(code, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>% # gather sequence of cols into "code" col and counts into "cases"
  mutate(code = stringr::str_replace(code, "newrel", "new_rel")) %>% # fix code name
  separate(code, c("new", "var", "sexage")) %>% # seperate out code by underscore
  select(-new, -iso2, -iso3) %>%# remove redundant cols
  separate(sexage, c("sex", "age"), sep = 1) # sepearte out sexage into sex and age
```

## 12.6.1 Exercises

*In this case study I set na.rm = TRUE just to make it easier to check that we had the correct values. Is this reasonable? Think about how missing values are represented in this dataset. Are there implicit missing values? What's the difference between an NA and zero?*

*What happens if you neglect the mutate() step? (mutate(key = stringr::str_replace(key, "newrel", "new_rel")))*

*I claimed that iso2 and iso3 were redundant with country. Confirm this claim.*

*For each country, year, and sex compute the total number of cases of TB. Make an informative visualisation of the data.*

## 12.7 Non-tidy data

Saying a non-tidy data is "messy" = an oversimplification b/c there are lots of useful + well-founded data structures that are not tidy 

2 main reasons to use other data structures:

<ul>
<li> Alternative representations may have substantial performance or space advantages. </li> 
<li> Specialised fields have evolved their own conventions for storing data that may be quite different to conventions of tidy data </li>
</ul> 

Either of these reasons means you'll need something other than a tibble/data frame. 

If data does fit naturally into a rectangular structure composed of observations + variables, tidy data should be default choice, but there are good reasons to use other structures, so tidy data is not the only way.

If you'd like to learn more about non-tidy data, look @ blog post by Jeff Leek: http://simplystatistics.org/2016/02/17/non-tidy-data/
