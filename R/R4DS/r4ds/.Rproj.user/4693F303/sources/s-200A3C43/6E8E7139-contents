---
title: "Ch9_IntroToWrangling_10_Tibbles"
author: "Steve Newns"
date: "October 13, 2017"
output: html_document
---

```{r setup, include=FALSE}
library(tidyverse)
library(ggplot2)
library(lubridate)
```

Data wrangling = **art** of getting data into a useful form for visualisation + modeling. 

* w/out wrangling --> can’t work w/ your own data! 

3 main parts to data wrangling:

* Import
* Tidy
  * consistent way of storing data that makes transorms, viz, + modeling easier
* Transform

4 specific types of data frequently encountered in practice:

* relational = interelated datasets
* string = including RegEx
* factors = categorical data w/ fixed set of possible values
* date/time

# CHAPTER 10 - TIBBLES

**Tibbles** = data frames, but w/ tweaked older behaviours to make life a little easier than w/ `data.frame` 

R = old language + some things useful 10/20 years ago now get in the way + it’s difficult to change base R w/out breaking existing code ==> most innovation occurs in **packages**. 

`tibble` package provides opinionated data frames that make working in the tidyverse a little easier

To learn more about tibbles, look at `vignette("tibble")`.

tibbles = 1 of the unifying features of tidyverse + most other R packages use regular data frames

To coerce a data frame to a tibble --> `as_tibble()`:

```{r}
as.tibble(iris)
```

Create new tibbles from individual vectors w/ `tibble()`

```{r}
tibble(x = 1:5, y = 1, z = x^2 + y) # y will be recycled
```

`tibble()` does less than `data.frame()` --> never changes the inputs type (e.g. never converts strings to factors), never changes variable names, + never creates row names.

It’s possible for a tibble to have column names that are *not* valid R variable names (aka **non-syntactic names** = might not start w/ a letter, or might contain unusual characters like a space). To refer to these variables, you need to surround them with backticks:

* will also need backticks when working w/ these variables in other packages, like ggplot2, dplyr, and tidyr.

```{r}
tibble(`:)` = "smile", ` ` = "space", `2000` = "number")
```

Another way to create a tibble =  `tribble()` = short for **transposed tibble** + is customised for data entry in code w/ column headings defined by formulas (start w/ ~) + entries are separated by commas. This makes it possible to lay out small amounts of data in easy to read form.

```{r}
tribble(~x, ~y, ~z,
        #--/--/----
        "a", 2, 3.6,
        "b", 1, 8.5)
```

 2 main differences in usage of a `tibble` vs. a classic `data.frame`: **printing** and **subsetting**.
 
 ## Printing

Tibbles show only the 1st 10 rows + all columns that can fit on screen (as well as their types, as if w/ `str`) = makes it much easier to work w/ large data.

```{r}
tibble(a = lubridate::now() + runif(1e3) * 86400,
       b = today() + runif(1e3) * 30,
       c = 1:1e3, # integers 1 - 1000
       d = runif(1e3), # generate 1000 random deviations from the uniform distribution
       e = sample(letters, 1e3, replace = T)) # use built-in roman alphabet constants + sample 1000 of time
```

Tibbles = designed so you don’t accidentally overwhelm the console by printing large data frames. But sometimes you need more output than the default display, + there are a few options that can help.

Can explicitly `print()` the data frame + control the # of rows (**n**) + the width of the display, such as **width = Inf** to display all columns:

```{r}
nycflights13::flights %>%
  print(n = 10, width = Inf)
```

Can also control default print behaviour by setting options:

* `options(tibble.print_max = n, tibble.print_min = m)`: if there are more than m rows, print only n rows. 
* Use `options(dplyr.print_min = Inf)` to *always* show *all rows*.
* Use `options(tibble.width = Inf)` to *always* print *all columns*, regardless of the width of the screen.

Can see a complete list of options by looking at the package help with `package?tibble`.

Final option = use RStudio’s built-in **data viewer** to get a scrollable view of the complete (often useful at the end of a long chain of manipulations)

```{r}
nycflights13::flights %>% 
  View() # spreadsheet-like view
```

## Subsetting

To pull out a single variable --> use `$` and ``[[``, where ``[[`` can extract by name *or* by position, while `$` only extracts by name but is a little less typing.

```{r}
df <- tibble(
  x = runif(5),
  y = rnorm(5)
)

# Extract by name
df$x
df[["x"]]

# Extract by position
df[[1]]
```

To use these in a pipe --> need a special placeholder `.`:

```{r}
df %>% .$x

df %>% .[["x"]]
```

Compared to `data.frame`, `tibbles` = more strict --> never do partial matching + will generate a warning if a column you're trying to access does not exist.

## Interacting w/ Older Code

**Some older functions don’t work w/ tibbles**. 

* If you encounter 1 of these functions, use `as.data.frame()` to turn a tibble back to a data.frame:

```{r}
tb <- tibble(
  `:)` = "smile", 
  ` ` = "space",
  `2000` = "number"
)

class(tb) # error
class(as.data.frame(tb))
```

Main reason some older functions don’t work w/ tibble = the **`[` function** --> `dplyr::filter()` + `dplyr::select()` solve the same problems w/ clearer code. In base R data frames, `[` sometimes returns a data frame, but sometimes returns a vector. W/ tibbles, `[` *always returns another tibble*.

# 10.5 Exercises

*How can you tell if an object is a tibble? (Hint: try printing mtcars, which is a regular data frame).*

* `tibbles` tell you that it's a tibble
* We'd see only the top 10 rows and the column data types under the column names
* `data.frames` will also show the row **labels**, while `tibbles` have row numbers

```{r}
print(mtcars)
print(as.tibble(mtcars))
```

*Compare and contrast the following operations on a data.frame and equivalent tibble. What is different? Why might the default data frame behaviours cause you frustration?*

```{r}
df <- data.frame(abc = 1, xyz = "a") # make a 1*2 data frame
df$x 
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
```
```{r}
df <- tibble(abc = 1, xyz = "a") # make a 1*2 data frame
df$x # does not complete column name
df[, "xyz"] # get all rows for xyz col
df[, c("abc", "xyz")] # get all rows for abc and xyz cols
```

*If you have the name of a variable stored in an object, e.g. var <- "mpg", how can you extract the reference variable from a tibble?*

```{r}
var <- "xyz"

# get a tibble
df[var]
class(df[var])

# get a vector
df[[var]]
class(df[[var]])
```

*Practice referring to non-syntactic names in the following data frame by:*

```{r}
annoying <- tibble(
  `1` = 1:10,
  `2` = `1` * 2 + rnorm(length(`1`))
)
```

* Extracting the variable called 1.

```{r}
annoying[[1]]
annoying$'1'
```

* Plotting a scatterplot of 1 vs 2.

```{r}
annoying %>%
  ggplot(aes(.[["1"]],.[["2"]])) + 
  geom_point()
```

* Creating a new column called 3 which is 2 divided by 1.

```{r}
(annoying <- annoying %>%
  mutate(`3` = `2` / `1`))
```

* Renaming the columns to one, two and three.
```{r}
annoying %>%
  rename(one = `1`,
         two = `2`,
         three = `3`)
```
  
*What does tibble::enframe() do? When might you use it?*

It converts lists or atomic vectors that have been named into 2-col data frames

```{r}
nums <- c('one','two',3,'four',5,'apple')
enframe(nums)
```

*What option controls how many additional column names are printed at the footer of a tibble?*

```{r}
nycflights13::flights %>%
  print(n_extra = 1)
```

