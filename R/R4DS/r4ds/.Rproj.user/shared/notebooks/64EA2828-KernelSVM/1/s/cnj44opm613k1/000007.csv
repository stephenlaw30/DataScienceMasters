"0","## Create function to visualize different set results"
"0","plot.svm.model <- function(set) {"
"0","  x1 <- seq(min(set[,1]) - 1, max(set[,1]) + 1, by = 0.05) # get sminimum scaled age + go up to the max by increments of .1"
"0","  x2 <- seq(min(set[,2]) - 1, max(set[,2]) + 1, by = 0.05) # get minimum scaled salary + go up to the max by increments of .1"
"0","  "
"0","  set.grid <- expand.grid(x1,x2) # Create DF from all possible combos of the age + salary vectors to make a grid"
"0","  colnames(set.grid) <- c(""Age"",""EstimatedSalary"")"
"0","  "
"0","  y_pred.svm.grid <- predict(social.svm, set.grid) # use grid to predict values w/ our model"
"0","  "
"0","  plot(set[,-3],"
"0","       main = c(""SVM ("", deparse(substitute(set)),"" set)""), # get set name from argument given"
"0","       xlab = ""Age"","
"0","       ylab = ""Estimated Salary"","
"0","       xlim = range(x1),"
"0","  "
"0","  contour(x1,x2, matrix(as.numeric(y_pred.svm.grid), length(x1), length(x2)), add = T) # add logistic regression ""split"" line"
"0","  "
"0","  points(set.grid, pch = 19, col = if_else(y_pred.svm.grid == 1, ""springgreen3"", ""tomato""))"
"0","  points(set, pch = 19, col = if_else(set[,3] == 1, ""green4"", ""red3""))"
"0","  "
"0","}"
"0","plot.svm.model(training)"
