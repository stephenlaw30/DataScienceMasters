taskscheduleR:::taskschedulerAddin()
ggplot(mpg) +
geom_smooth(aes(displ, hwy))
#R for Data Science
library(tidyverse)
#tidyverse_update()
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
glimpse(mpg)
ggplot(mpg) +
geom_smooth(aes(displ, hwy))
ggplot(mpg) +
geom_smooth(aes(displ, hwy), type = drv)
ggplot(mpg) +
geom_smooth(aes(displ, hwy), linetype = drv)
ggplot(mpg) +
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)))
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)))
ggplot(mpg) +
geom_point(aes(displ, hwy), color = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv))
geom_smooth(aes(displ, hwy, linetype = drv))
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)) +
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)) +
geom_smooth(aes(displ, hwy, linetype = drv, color = drv)))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)) +
geom_smooth(aes(displ, hwy, linetype = drv, color = drv))
ggplot(mpg) +
geom_smooth(aes(displ, hwy, group = drv))
ggplot(mpg, aes(displ, hwy, linetype = drv)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, linetype = drv, color = drv) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, linetype = drv, color = drv)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, linetype = drv, color = drv)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class))
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
#geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
#geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
glimpse(mpg)
library(ggplot2)
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?geom_smooth()
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(se = F)
ggplot(mpg) +
geom_smooth(aes(displ, hwy, group = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(se = F, group = drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(se = F, aes(group = drv))
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = F, aes(group = drv))
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = F)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = F, aes(linetype = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), color = 'white')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), color = drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv), color = 'black')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv))#
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv))#, color = 'black')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white', size = 3)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white', size = 5)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white', size = 5, stroke = 3)
ggplot(diamonds) +
geom_bar(aes(cut))
ggplot(diamonds) +
stat_count(aes(cut))
ggplot(demo) +
geom_bar(aes(cut, freq), stat = "identity")
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(demo) +
geom_bar(aes(cut, freq), stat = "identity")
ggplot(diamonds) +
geom_bar(aes(cut, ..prop.., group = 1))
ggplot(diamonds) +
stat_summary(
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_summary
?geom_pointrange
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth))
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max#,
#fun.y = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max,
y = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max,
x = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max
)
ggplot(diamonds, aes(cut, depth)) +
geom_pointrange(
ymin = min,
ymax = max
)
ggplot(diamonds, aes(cut, depth)) +
geom_pointrange(
ymin = min(depth),
ymax = max(depth)
)
ggplot(diamonds, aes(cut, depth)) +
geom_pointrange(
ymin = min(diamonds$depth),
ymax = max(diamonds$depth)
)
ggplot(diamonds) +
geom_pointrange(stat = 'identity',
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(diamonds) +
geom_pointrange(stat = 'summary',
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?geom_col
?stat_smooth
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
?geom_bar
library(RevoScaleR)
library(RevoScaleR)
library(dplyr)
options("repos" = c(CRAN = "http://cran.r-project.org/"))
install.packages('dplyr')
install.packages('stringr')
install.packages('lubridate')
install.packages('rgeos') # spatial package
install.packages('sp') # spatial package
install.packages('maptools') # spatial package
install.packages('ggmap')
install.packages('ggplot2')
install.packages('gridExtra') # for putting plots side by side
install.packages('ggrepel') # avoid text overlap in plots
install.packages('tidyr')
install.packages('seriation') # package for reordering a distance matrix
options(max.print = 1000, scipen = 999, width = 90)
library(RevoScaleR)
rxOptions(reportProgress = 1) # reduces the amount of output RevoScaleR produces
library(dplyr)
options(dplyr.print_max = 2000)
options(dplyr.width = Inf) # shows all columns of a tbl_df object
library(stringr)
library(lubridate)
library(rgeos) # spatial package
library(sp) # spatial package
library(maptools) # spatial package
library(ggmap)
library(ggplot2)
library(gridExtra) # for putting plots side by side
library(ggrepel) # avoid text overlap in plots
library(tidyr)
library(seriation) # package for reordering a distance matrix
dir()
setwd("C:/Users/Nimz/Dropbox/DataScienceMasters/R/RServer")
jan <- read.csv('yellow_tripsample_2016-01.zip')
jan <- read_csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"))
jan <- read.csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"))
jan <- read.csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), nrow = 1000)
jan <- read.csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), nrow = 1000)
library(dplyr)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("psych")
install.packages("tidyverse")
library(tidyverse)
glimpse(jan)
jan <- read.csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), nrow = 1000,
colClasses = col_classes)
glimpse(jan)
col_classes <- c('VendorID' = "factor",
'tpep_pickup_datetime' = "character",
'tpep_dropoff_datetime' = "character",
'passenger_count' = "integer",
'trip_distance' = "numeric",
'pickup_longitude' = "numeric",
'pickup_latitude' = "numeric",
'RateCodeID' = "factor",
'store_and_fwd_flag' = "factor",
'dropoff_longitude' = "numeric",
'dropoff_latitude' = "numeric",
'payment_type' = "factor",
'fare_amount' = "numeric",
'extra' = "numeric",
'mta_tax' = "numeric",
'tip_amount' = "numeric",
'tolls_amount' = "numeric",
'improvement_surcharge' = "numeric",
'total_amount' = "numeric",
'u' = "numeric")
# load in 1st 1000 rows from january
jan <- read.csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), nrow = 1000,
colClasses = col_classes)
glimpse(jan)
