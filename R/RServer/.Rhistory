ggplot(mpg) +
geom_smooth(aes(displ, hwy))
#R for Data Science
library(tidyverse)
#tidyverse_update()
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
glimpse(mpg)
ggplot(mpg) +
geom_smooth(aes(displ, hwy))
ggplot(mpg) +
geom_smooth(aes(displ, hwy), type = drv)
ggplot(mpg) +
geom_smooth(aes(displ, hwy), linetype = drv)
ggplot(mpg) +
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)))
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)))
ggplot(mpg) +
geom_point(aes(displ, hwy), color = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv))
geom_smooth(aes(displ, hwy, linetype = drv))
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)) +
geom_smooth(aes(displ, hwy, linetype = drv))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)) +
geom_smooth(aes(displ, hwy, linetype = drv, color = drv)))
ggplot(mpg) +
geom_point(aes(displ, hwy, color = drv)) +
geom_smooth(aes(displ, hwy, linetype = drv, color = drv))
ggplot(mpg) +
geom_smooth(aes(displ, hwy, group = drv))
ggplot(mpg, aes(displ, hwy, linetype = drv)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, linetype = drv, color = drv) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, linetype = drv, color = drv)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy, linetype = drv, color = drv)) +
geom_point() +
geom_smooth()
ggplot(mpg, aes(displ, hwy) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class))
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
#geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
#geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy)) +
# override possible global color for the point layer
geom_point(aes(color = class)) +
# subset data for smooth line for this layer only
geom_smooth(data = filter(mpg, class == 'subcompact'), se = FALSE)
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
glimpse(mpg)
library(ggplot2)
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
?geom_smooth()
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(se = F)
ggplot(mpg) +
geom_smooth(aes(displ, hwy, group = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(se = F, group = drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(se = F, aes(group = drv))
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = F, aes(group = drv))
ggplot(mpg, aes(displ, hwy, color = drv)) +
geom_point() +
geom_smooth(se = F)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = F)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = F, aes(linetype = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), color = 'white')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), color = drv)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv), color = 'black')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = drv))#
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv))#, color = 'black')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white')
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white', size = 3)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white', size = 5)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(fill = drv), pch = 21, color = 'white', size = 5, stroke = 3)
ggplot(diamonds) +
geom_bar(aes(cut))
ggplot(diamonds) +
stat_count(aes(cut))
ggplot(demo) +
geom_bar(aes(cut, freq), stat = "identity")
demo <- tribble(
~cut,         ~freq,
"Fair",       1610,
"Good",       4906,
"Very Good",  12082,
"Premium",    13791,
"Ideal",      21551
)
ggplot(demo) +
geom_bar(aes(cut, freq), stat = "identity")
ggplot(diamonds) +
geom_bar(aes(cut, ..prop.., group = 1))
ggplot(diamonds) +
stat_summary(
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_summary
?geom_pointrange
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth))
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max#,
#fun.y = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max,
y = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max,
x = median
)
ggplot(diamonds) +
geom_pointrange(
aes(cut, depth),
ymin = min,
ymax = max
)
ggplot(diamonds, aes(cut, depth)) +
geom_pointrange(
ymin = min,
ymax = max
)
ggplot(diamonds, aes(cut, depth)) +
geom_pointrange(
ymin = min(depth),
ymax = max(depth)
)
ggplot(diamonds, aes(cut, depth)) +
geom_pointrange(
ymin = min(diamonds$depth),
ymax = max(diamonds$depth)
)
ggplot(diamonds) +
geom_pointrange(stat = 'identity',
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
ggplot(diamonds) +
geom_pointrange(stat = 'summary',
aes(cut, depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?geom_col
?stat_smooth
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
?geom_bar
setwd("C:/Users/Nimz/Dropbox/DataScienceMasters/R/RServer")
library(RevoScaleR)
library(tidyverse)
col_classes <- c('VendorID' = "factor",
'tpep_pickup_datetime' = "character",
'tpep_dropoff_datetime' = "character",
'passenger_count' = "integer",
'trip_distance' = "numeric",
'pickup_longitude' = "numeric",
'pickup_latitude' = "numeric",
'RateCodeID' = "factor",
'store_and_fwd_flag' = "factor",
'dropoff_longitude' = "numeric",
'dropoff_latitude' = "numeric",
'payment_type' = "factor",
'fare_amount' = "numeric",
'extra' = "numeric",
'mta_tax' = "numeric",
'tip_amount' = "numeric",
'tolls_amount' = "numeric",
'improvement_surcharge' = "numeric",
'total_amount' = "numeric",
'u' = "numeric")
# load in 1st 1000 rows from january as a test data frame before deploying code to big data in RevoScaleR
jan <- read.csv(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), nrow = 1000,
colClasses = col_classes)
glimpse(jan)
library(lubridate) #dates and times
most_recent_date <- ymd("2016-07-01") # most recent CSV
time <- Sys.time()
?months
?sprintf
?rxImport
## read in all 6 csv files + create an XDF file - stored on disk like CSV + is an object uniquely recognized by R
library(lubridate) #dates and times
most_recent_date <- ymd("2016-07-01") # most recent CSV
time <- Sys.time()
# get each month's date + appned to 1st month's data
for(i in 1:6) {
file_date <- most_recent_date - months(i)
# return character vector with a combo of text & variable values + store in variable input_csv
input_csv <- sprintf('yellow_trip_sample_%s.csv', substr(file_date, 1, 7))
# don't append if january data
append <- if (i == 1) "none" else "rows"
# import csv data into xdf file
rxImport(inData = input_csv, outFile = input_xdf, colClasses = col_classes, overwrite = T, append = append)
print(input_csv)
}
# store time it took to import
Sys.time() - time
time <- Sys.time()
# get each month's date + appned to 1st month's data
for(i in 1:6) {
file_date <- most_recent_date - months(i)
# return character vector with a combo of text & variable values + store in variable input_csv
input_csv <- sprintf('yellow_trip_sample_%s.csv', substr(file_date, 1, 7))
# don't append if january data
append <- if (i == 1) "none" else "rows"
# import csv data into xdf file
rxImport(inData = input_csv, outFile = "yellow_tripdata_2016.xdf", colClasses = col_classes, overwrite = T, append = append)
print(input_csv)
}
# store time it took to import
Sys.time() - time
most_recent_date <- ymd("2016-07-01") # most recent CSV
substr(file_date, 1, 7)
library(lubridate) #dates and times
most_recent_date <- ymd("2016-07-01") # most recent CSV
time <- Sys.time()
# get each month's date + appned to 1st month's data
for(i in 1:6) {
file_date <- most_recent_date - months(i)
# return character vector with a combo of text & variable values + store in variable input_csv
input_csv <- sprintf('yellow_tripsample_%s.csv', substr(file_date, 1, 7))
# don't append if january data
append <- if (i == 1) "none" else "rows"
# import csv data into xdf file
rxImport(inData = input_csv, outFile = "yellow_tripdata_2016.xdf", colClasses = col_classes, overwrite = T, append = append)
print(input_csv)
}
# store time it took to import
Sys.time() - time
input_csv <- sprintf(unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv"), substr(file_date, 1, 7))
unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv"), substr(file_date, 1, 7))
unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv")
unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv"), substr(file_date, 1, 7))
input_csv <- sprintf(unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), substr(file_date, 1, 7))
unz("yellow_tripsample_2016-01.zip", "yellow_tripsample_2016-01.csv"), substr(file_date, 1, 7)
input_csv <- sprintf(unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv"), substr(file_date, 1, 7))
input_csv <- sprintf(unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv", substr(file_date, 1, 7)))
time <- Sys.time()
# get each month's date + appned to 1st month's data
for(i in 1:6) {
file_date <- most_recent_date - months(i)
# return character vector with a combo of text & variable values + store in variable input_csv
input_csv <- sprintf(unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv", substr(file_date, 1, 7)))
#input_csv <- sprintf("yellow_tripsample_%s.csv", substr(file_date, 1, 7))
# don't append if january data
append <- if (i == 1) "none" else "rows"
# import csv data into xdf file
rxImport(inData = input_csv, outFile = "yellow_tripdata_2016.xdf", colClasses = col_classes, overwrite = T, append = append)
print(input_csv)
}
# store time it took to import
Sys.time() - time
most_recent_date <- ymd("2016-07-01") # most recent CSV
time <- Sys.time()
# get each month's date + appned to 1st month's data
for(i in 1:6) {
file_date <- most_recent_date - months(i)
# return character vector with a combo of text & variable values + store in variable input_csv
input_csv <- sprintf(unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv", substr(file_date, 1, 7)))
#input_csv <- sprintf("yellow_tripsample_%s.csv", substr(file_date, 1, 7))
# don't append if january data
append <- if (i == 1) "none" else "rows"
# import csv data into xdf file
rxImport(inData = input_csv, outFile = "yellow_tripdata_2016.xdf", colClasses = col_classes, overwrite = T, append = append)
print(input_csv)
}
# store time it took to import
Sys.time() - time
unz("yellow_tripsample_%s.zip", "yellow_tripsample_%s.csv", substr(file_date, 1, 7))
zip.file.extract(file1, zipname = "yellow_tripsample_2016-01.zip", unzip = getOption("unzip"))
library(utils)
zip.file.extract(file1, zipname = "yellow_tripsample_2016-01.zip", unzip = getOption("unzip"))
install.packages("utils")
install.packages("utils")
library(utils)
zip.file.extract(file1, zipname = "yellow_tripsample_2016-01.zip", unzip = getOption("unzip"))
unzip(file1, zipname = "yellow_tripsample_2016-01.zip", unzip = getOption("unzip"))
unzip(zipfile = "yellow_tripsample_2016-01.zip")
unlink("yellow_tripsample_2016-01.csv")
# get each month's date + appned to 1st month's data
for(i in 1:6) {
file_date <- most_recent_date - months(i)
# return character vector with a combo of text & variable values + store in variable input_csv
input_zip <- sprintf("yellow_tripsample_%s.zip", substr(file_date, 1, 7))
unzip(zipfile = input_zip)
input_csv <- sprintf("yellow_tripsample_%s.csv", substr(file_date, 1, 7))
# don't append if january data
append <- if (i == 1) "none" else "rows"
# import csv data into xdf file
rxImport(inData = input_csv, outFile = "yellow_tripdata_2016.xdf", colClasses = col_classes, overwrite = T, append = append)
print(input_csv)
unlink(input_csv)
}
# store time it took to import
Sys.time() - time
setwd("C:\Users\Nimz\Dropbox")
nyc_xdf <- sprintf("C:/Users/Nimz/Dropbox/yellow_tripdata_2016.xdf")
nyc_xdf <- RxXdfData("C:/Users/Nimz/Dropbox/yellow_tripdata_2016.xdf")
system.time(
# get statistical summary of fare amount variable
rxsum_xdf <- rxSummary( ~ fare_amount, nyc_xdf)
)
rxsum_xdf
unzip("yellow_tripsample_2016-01.zip")
input_csv <- RxTextData("yellow_tripsample_2016-01.csv")
unlink("yellow_tripsample_2016-01.csv")
unzip("yellow_tripsample_2016-01.zip")
nyc_csv <- RxTextData("yellow_tripsample_2016-01.csv")
unlink("yellow_tripsample_2016-01.csv"
)
system.time(
# get statistical summary of fare amount variable
rxsum_xdf <- rxSummary( ~ fare_amount, nyc_csv)
)
nyc_csv
nyc_csv
unzip("yellow_tripsample_2016-01.zip")
nyc_csv <- RxTextData("yellow_tripsample_2016-01.csv")
unlink("yellow_tripsample_2016-01.csv")
system.time(
# get statistical summary of fare amount variable
rxsum_xdf <- rxSummary( ~ fare_amount, nyc_csv)
)
# check time to run with CSV
unzip("yellow_tripsample_2016-01.zip")
nyc_csv <- RxTextData("yellow_tripsample_2016-01.csv")
system.time(
# get statistical summary of fare amount variable
rxsum_xdf <- rxSummary( ~ fare_amount, nyc_csv)
)
unlink("yellow_tripsample_2016-01.csv")
nyc_csv
unzip("yellow_tripsample_2016-01.zip")
nyc_csv <- RxTextData("yellow_tripsample_2016-01.csv", colClasses = col_classes)
system.time(
# get statistical summary of fare amount variable
rxsum_xdf <- rxSummary( ~ fare_amount, nyc_csv)
)
'Rows Read: 544498, Total Rows Processed: 544498, Total Chunk Time: 2.312 seconds
Computation time: 2.319 seconds.
user  system elapsed
0.01    0.00    3.07'
# took much longer
unlink("yellow_tripsample_2016-01.csv")
nyc_csv
# read in XDF file
nyc_xdf <- RxXdfData("C:/Users/Nimz/Dropbox/yellow_tripdata_2016.xdf")
# get time it took to run code within
system.time(
# get statistical summary of fare amount variable
rxsum_xdf <- rxSummary( ~ fare_amount, nyc_xdf)
)
'Rows Read: 3467953, Total Rows Processed: 3467953, Total Chunk Time: 0.086 seconds
Computation time: 0.132 seconds.
user  system elapsed
0.03    0.00    0.16'
rxsum_xdf
# relatively high SD of fare amounts, also why are there negative fares? Refunds? Why a $2500 max fare amount?
# check time to run with CSV
unzip("yellow_tripsample_2016-01.zip")
nyc_csv <- RxTextData("yellow_tripsample_2016-01.csv", colClasses = col_classes)
system.time(
# get statistical summary of fare amount variable
rxsum_csv <- rxSummary( ~ fare_amount, nyc_csv)
)
'Rows Read: 544498, Total Rows Processed: 544498, Total Chunk Time: 2.312 seconds
Computation time: 2.319 seconds.
user  system elapsed
0.01    0.00    3.07'
# took much longer, so XDF is much more efficient + runs faster
# take up less space = reduced I/O
unlink("yellow_tripsample_2016-01.csv")
rxsum_csv
?rxImport
?rxSummary
library(RevoScaleR)
library(tidyverse)
nyc_xdf <- RxXdfData("C:/Users/Nimz/Dropbox/yellow_tripdata_2016.xdf")
rxGetInfo(nyc_xdf, getVarInfo = T, numRows = 10)
?rxDataStep
rxDataStep(inData = nyc_xdf, outFile = nyc_xdf,
transforms = list(tip_percent =
ifelse(fare_amount > 0 & tip_amount < fare_amount,
round((tip_amount / fare_amount)*100, 0), NA)),
overwrite = T)
rxSummary(~tip_percent,nyc_xdf)
rxSummary(~tip_percent2, nyc_xdf,
transforms = list(tip_percent =
ifelse(fare_amount > 0 & tip_amount < fare_amount,
round((tip_amount / fare_amount)*100, 0), NA)))
rxSummary(~ tip_percent2, nyc_xdf,
transforms = list(tip_percent2 =
ifelse(fare_amount > 0 & tip_amount < fare_amount,
round((tip_amount / fare_amount)*100, 0), NA)))
rxCrossTabs( ~ monthYear, nyc_xdf,
transforms = list(
year = factor(as.integer(substr(tpep_pickup_datetime, 1, 4)), levels = 2014:2016),
month = factor(as.integer(substr(tpep_pickup_datetime, 6, 7)), levels = 1:12)
))
rxCrossTabs( ~ month:year, nyc_xdf,
transforms = list(
year = factor(as.integer(substr(tpep_pickup_datetime, 1, 4)), levels = 2014:2016),
month = factor(as.integer(substr(tpep_pickup_datetime, 6, 7)), levels = 1:12)
))
rxCrossTabs( ~ month:year, nyc_xdf,
transforms = list(
year = factor(year(ymd_hms(tpep_pickup_datetime)), levels = 2014:2016),
month = factor(month(ymd_hms(tpep_pickup_datetime)), levels = 1:12)),
transformPackages = "lubridate"
)
