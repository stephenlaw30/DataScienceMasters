?ave
setwd('C:/Users/Nimz/Dropbox/DataScienceMasters/R/MachineLearningAZ/01_Data_Preprocessing')
dataset = read.csv('Data.csv')
# Taking care of missing data by imputting the mean of the missing value from the entire dataset, ignoring that NA
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset = read.csv('Data.csv')
dataset$Age
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Age
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),mean(dataset$Age, na.rm = TRUE),dataset$Age)
dataset$Age
setwd('C:/Users/Nimz/Dropbox/DataScienceMasters/R/MachineLearningAZ/01_Data_Preprocessing')
dataset = read.csv('Data.csv')
#check for NA's
summary(dataset)
str(dataset)
dataset$Country <- factor(dataset$Country, levels = c['France','Spain','Germany'], labels = c(1,2,3))
dataset$Purchased <- factor(dataset$Purchased, levels = c['No','Yes'], labels = c(0,1))
factor(dataset$Country, levels = c['France','Spain','Germany'], labels = c(1,2,3))
dataset$Country <- factor(dataset$Country, levels = c('France','Spain','Germany'), labels = c(1,2,3))
dataset$Purchased <- factor(dataset$Purchased, levels = c('No','Yes'), labels = c(0,1))
str(dataset)
library(caTools)
?sample.split
library(caTools)
set.seed(123)
#split so that 80% of data is in training, 20% in test and preserve relative rations (0.8) of Purchased Dep Var
spl = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, spl == TRUE)
test_set = subset(dataset, spl == FALSE)
training_set.std <- training_set
test_set.std <- test_set
training_set.std[,2:3] <- scale(training_set.std[,2:3])
test_set.std[,2:3] <- scale(test_set.std[,2:3])
test_set.std
training_set.std
test_set.std
library(lubridate)
runs$Time <- as.POSIXct(runs$Time)#, format = '%H:%M:%S')
runs <- read.csv("cleanedMarathonTrainingData.csv")
str(runs)
runs$X <- NULL
head(runs,2)
library(lubridate)
runs$Time <- as.POSIXct(runs$Time)#, format = '%H:%M:%S')
runs$Avg.Pace <- as.POSIXct(runs$Avg.Pace)#, format = '%H:%M:%S')
runs$Date <- as.POSIXct(runs$Date)
runs$StartTime <- hour(strptime(runs$StartTime, format = '%H:%M'))
str(runs)
library(lubridate)
runs$Time <- as.POSIXct(runs$Time)#, format = '%H:%M:%S')
runs$Avg.Pace <- as.POSIXct(runs$Avg.Pace)#, format = '%H:%M:%S')
runs$Date <- as.POSIXct(runs$Date)
runs$StartTime <- as.POSIXct(runs$Avg.Pace)#, format = '%H:%M'))
str(runs)
summary(runs$Distance)
#miles by month bars
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Total Miles") +
guides(fill=FALSE) +
ggtitle("Total Miles by Month")
library(ggplot2)
library(RColorBrewer)
#distance histogram
ggplot(data = runs, aes(x = Distance)) +
geom_histogram(binwidth = 2, aes(fill = ..count..), colour = "black", boundary = 2) +
scale_x_continuous(limits=c(0, 30)) +
xlab("Distance (mi)") +
ylab("Frequency") +
ggtitle("Distribution of Miles Ran in All Runs") +
guides(fill=FALSE)
#miles by month bars
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Total Miles") +
guides(fill=FALSE) +
ggtitle("Total Miles by Month")
ggplot(data = runs, aes(x = weekNumber, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Week of Plan") +
ylab("Total Miles") +
#guides(fill=FALSE) +
ggtitle("Total Miles by Week of Plan")
runs$Month <- factor(runs$Month, ordered = TRUE, levels = c("Jul","Aug","Sep","Oct","Nov"))
#miles by month bars
ggplot(data = runs, aes(x = Month, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("") +
ylab("Total Miles") +
guides(fill=FALSE) +
ggtitle("Total Miles by Month")
ggplot(data = runs, aes(x = weekNumber, y = Distance, fill = Month)) +
geom_bar(stat="identity") +
xlab("Week of Plan") +
ylab("Total Miles") +
#guides(fill=FALSE) +
ggtitle("Total Miles by Week of Plan")
runs[runs$weekNumber == 11,c('Name','weekNumber','Date','DOW','Distance')]
runs[runs$weekNumber == 11,c('Name','weekNumber','Date','DOW','Distance')]
#avg. cadence grouped by month
ggplot(data = runs, aes(Month, Cad)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("") +
ylab("Cadence (Steps/Min") +
guides(fill=FALSE) +
ggtitle("Cadence per Month")
#avg. HR grouped by month
ggplot(data = runs, aes(Month, Avg.HR)) +
geom_jitter(aes(colour = Month)) +
geom_boxplot(aes(fill = Month),
outlier.colour = "black", alpha = 0.5) + #geom_jitter()
xlab("Month") +
ylab("Avg. Heart Rate") +
ggtitle("Average Heart Rate per Month")
#avg. cadence grouped by month
ggplot(data = runs, aes(RunType, Cad)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Cadence") +
guides(fill=FALSE) +
coord_flip() +
ggtitle("Cadence per Run Type")
#avg. cadence grouped by month
ggplot(data = runs, aes(RunType, Avg.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType),
outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Avg Heart Rate") +
guides(fill=FALSE) +
ggtitle("Average Heart Rate per Run Type")
runs[which.max(runs$Avg.HR),]
ggplot(data = runs, aes(x = Date, y = Avg.HR)) +
geom_line(aes(group=1)) +
theme(axis.text.x = element_blank()) +
xlab("Time") +
ylab("Average Heart Rate") +
ggtitle("Average Heart Rate Over Time")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
table(runs$RunType)
#apply(runs$Cadence, runs$RunType, function(x) (Cad*(hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60)))
ggplot(data = runs, aes(RunType, (Cad*((hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60))))) +
geom_bar(aes(fill = RunType), stat = "identity") +
xlab("Run Type") +
ylab("Steps") +
guides(fill=FALSE) +
ggtitle("Total Steps Taken by Run Type")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
#scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
scale_colour_brewer(palette = "Set1") +
#scale_fill_brewer(palette = "Set1") +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="")
ggplot(data = runs, aes(x = Date, y = Avg.Pace, colour = RunType)) +
geom_point() +
geom_smooth(fill = NA) +
scale_colour_brewer(palette = "Set1") +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_blank()) +
xlab("Date") +
ylab("Average Pace (mile/minute)") +
ggtitle("Average Pace Over Time") +
labs(caption="") +
facet_grid(RunType~.)
table(runs$RunType)
#apply(runs$Cadence, runs$RunType, function(x) (Cad*(hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60)))
ggplot(data = runs, aes(RunType, (Cad*((hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60))))) +
geom_bar(aes(fill = RunType), stat = "identity") +
scale_colour_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Steps") +
guides(fill=FALSE) +
ggtitle("Total Steps Taken by Run Type")
table(runs$RunType)
#apply(runs$Cadence, runs$RunType, function(x) (Cad*(hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60)))
ggplot(data = runs, aes(RunType, (Cad*((hour(runs$Time)*60)+(minute(runs$Time))+(second(runs$Time)/60))))) +
geom_bar(aes(fill = RunType), stat = "identity") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Steps") +
guides(fill=FALSE) +
ggtitle("Total Steps Taken by Run Type")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
xlab("Cadence") +
ylab("Average Heart Rate") +
ggtitle("Average Hear Rate by Cadence")
ggplot(data = runs, aes(x=Cad, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
scale_colour_brewer(palette = "Set1") +
xlab("Cadence") +
ylab("Average Heart Rate") +
ggtitle("Average Hear Rate by Cadence")
ggplot(data = runs, aes(x=Elevation.Gain, y=Avg.HR)) +
geom_point(aes(colour = RunType)) +
scale_colour_brewer(palette = "Set1") +
geom_smooth(fill = NA) +
xlab("Elevation Gain (ft.)") +
ylab("Average Heart Rate (BPM)") +
ggtitle("Average Heart Rate by Elevation Gain")
ggplot(data = runs, aes(x=RunType, y=Max.HR)) +
geom_jitter(aes(colour = RunType)) +
geom_boxplot(aes(fill = RunType), outlier.colour = "black", alpha = 0.5) +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
xlab("Run Type") +
ylab("Max Heart Rate (BPM)") +
ggtitle("Max Heart Rate by Run Type")
