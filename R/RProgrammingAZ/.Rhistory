variable are as follows:
- `mean`
- `median`
- `sd`
- `var`
- `IQR`
- `range`
- `min`
- `max`
</div>
We can also filter based on multiple criteria. Suppose we\'re interested in flights headed to SF (SFO)
in February:'
#```{r}
sfo_feb_flights <- nycflights %>% filter(dest == "SFO", month == 2)
#```
#We filer all flights from nycflights with a destination of SF AND in the month of Feb
'Note we separates the conditions using commas to get flights that are BOTH headed to SFO **AND** in
February. If interested in either flights headed to SFO **OR** in February, use `|` instead'
'1. Create a new data frame for flights headed to SFO in February, `sfo_feb_flights`. How many
flights meet these criteria? '
#```{r sfo-feb-flights}
str(sfo_feb_flights)
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) + geom_histogram()
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
nycflights %>% group_by(month) %>% summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) + geom_boxplot()
ggplot(data = nycflights, aes(x = dep_delay)) + geom_histogram()
nycflights <- nycflights %>% mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>% group_by(origin) %>% summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) + geom_bar()
nycflights <- nycflights %>% mutate(avg_speed = (distance / air_time/60))
nycflights %>% arrange(desc(avg_speed)) %>% select(avg_speed,tailnum)
ggplot(nycflights, aes(x = distance, y = avg_speed)) + geom_point()
nycflights <- nycflights %>% mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
nycflights %>% group_by(dep_type) %>% summarise(ot_arr_rate = sum(arr_type == "on time") / n()) %>%
arrange(desc(ot_arr_rate))
- You\'re only recommending similar things to what the user has already liked, so the recommendations are often not surprising
rm(list=ls(all=TRUE))
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
dept <- read.csv("department.csv")
dx <- read.csv("diagnosis.csv")
medOrdrs <- read.csv("medication_order.csv")
visit <- read.csv("visit.csv")
visit_Dx <- read.csv("visit_diagnosis.csv")
#inspect
str(dept)
str(dx)
str(medOrdrs)
head(medOrdrs)
str(visit)
head(visit)
str(visit_Dx)
#subset data frame into only hospital encounters
#hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83
hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83)
str(hospital_visits)
class(hospital_visits$CONTACT_DT_KEY)
#subset hospital encounters after to August 1 2014
afterAug14 <- subset(hospital_visits, hospital_visits$CONTACT_DT_KEY > 20140801)
str(afterAug14)
class(afterAug14$AGE)
#patients between 1 and 18 years of age
children <- subset(afterAug14, afterAug14$AGE >= 1 & afterAug14$AGE <= 18)
summary(children)
head(children)
#INNER JOIN children with the visit diagnoses dataset to get all diagnoses that occured within each visit
#visit_Dx[visit_Dx$VISIT_KEY == 83068068,]
#children[children$VISIT_KEY == 83250029,]
children <- merge(children,visit_Dx[c("VISIT_KEY","DX_KEY","SEQ_NUM","DX_CMT","HSP_ACCT_KEY","DICT_DX_STS_KEY")]
, by = "VISIT_KEY")
str(children)
head(children)
#INNER JOIN children with the diagnoses codes dataset to get all ICD9 diagnoses codes
class(dx$ICD9_CD)
children_dx <- merge(children,dx[c("DX_ID","DX_KEY","DX_NM","ICD9_CD")],on="DX_KEY",all.x = TRUE)
str(children_dx)
#children_dx[children_dx$VISIT_KEY == 83692613,]
#subset data into only an Emergency Department diagnosis (primary or secondary)  of anaphylaxis or allergic reaction
children_dx <- subset(children_dx, children_dx$DICT_DX_STS_KEY %in% c(313,314))
codes <- c("995.0", "995.3", "995.6", "995.60", "995.61", "995.62", "995.63", "995.64", "995.65", "995.66", "995.67", "995.68",
"995.69","995.7","999.4","999.41","999.42","999.49")
#children_dx[children_dx$VISIT_KEY == 83692613,]
children_dx <- subset(children_dx, children_dx$ICD9_CD %in% codes)
str(children_dx)
head(children_dx)
#LEFT JOIN children with the department dataset to get all department of the encounter
#children_dx <- merge(children_dx,dept[c("DEPT_KEY","DEPT_NM","SPECIALTY","DEBT_ABBR","DEPT_GROUP")],on="DEPT_KEY")
children_dx <- merge(children_dx,dept,on="DEPT_KEY",all.x = TRUE)
str(children_dx)
#remove all urgent care cases
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$SPECIALTY)))
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$DEPT_NM)))
#FULL JOIN in the medical orders from the visit
children_dx <- merge(children_dx,medOrdrs,on="VISIT_KEY")
str(children_dx)
#make indicator for anaphylaxis within at least one of the diagnosis lines
children_dx$ANAPH_DX_IND <- as.integer(
ave(tolower(children_dx$DX_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("anaphylaxis", x))))
)
#make indicator for epinephrine within at least one of the medical order lines
children_dx$EPI_ORDER_IND <- as.integer(
ave(tolower(children_dx$MED_ORD_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("epinephrine", x))))
)
#get data frame of only outpatient encounter after Aug 1 2014 for patients between the age of 1 and 18
outpatient_visits <- visit[visit$DICT_ENC_TYPE_KEY == 108,]
outpatient_visits <- subset(outpatient_visits, outpatient_visits$CONTACT_DT_KEY > 20140801)
outpatient_visits <- subset(outpatient_visits, outpatient_visits$AGE >= 1 & outpatient_visits$AGE <= 18)
children_dx[children_dx$PAT_KEY == 10366753,]
outpatient_visits[outpatient_visits$PAT_KEY == 10366753,]
children_dx[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","APPT_CHECKIN_DT","MED_ORD_KEY")]
test_pt_hospital_visits[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","HOSP_DISCHRG_DT","MED_ORD_ID")]
outpatient_visits$APPT_CHECKIN_DT <- strptime(x = as.character(outpatient_visits$APPT_CHECKIN_DT),
format = "%Y-%m-%d %H:%M:%S")
children_dx$HOSP_DISCHRG_DT <- strptime(x = as.character(children_dx$HOSP_DISCHRG_DT),
format = "%Y-%m-%d %H:%M:%S")
#create indicator if patient has a follow up
for (i in 1:length(outpatient_visits$APPT_CHECKIN_DT)) {
children_dx$HAD_FOLLOWUP[i] <-
ifelse(children_dx$PAT_KEY[i] %in% outpatient_visits$PAT_KEY,#print(1),print(0))}
1,0)
}
table(children_dx$HAD_FOLLOWUP)
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
dept <- read.csv("department.csv")
dx <- read.csv("diagnosis.csv")
medOrdrs <- read.csv("medication_order.csv")
visit <- read.csv("visit.csv")
visit_Dx <- read.csv("visit_diagnosis.csv")
#inspect
str(dept)
str(dx)
str(medOrdrs)
head(medOrdrs)
str(visit)
head(visit)
str(visit_Dx)
#subset data frame into only hospital encounters
#hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83
hospital_visits <- subset(visit, visit$DICT_ENC_TYPE_KEY == 83)
str(hospital_visits)
class(hospital_visits$CONTACT_DT_KEY)
#subset hospital encounters after to August 1 2014
afterAug14 <- subset(hospital_visits, hospital_visits$CONTACT_DT_KEY > 20140801)
str(afterAug14)
class(afterAug14$AGE)
#patients between 1 and 18 years of age
children <- subset(afterAug14, afterAug14$AGE >= 1 & afterAug14$AGE <= 18)
summary(children)
head(children)
#INNER JOIN children with the visit diagnoses dataset to get all diagnoses that occured within each visit
#visit_Dx[visit_Dx$VISIT_KEY == 83068068,]
#children[children$VISIT_KEY == 83250029,]
children <- merge(children,visit_Dx[c("VISIT_KEY","DX_KEY","SEQ_NUM","DX_CMT","HSP_ACCT_KEY","DICT_DX_STS_KEY")]
, by = "VISIT_KEY")
str(children)
head(children)
#INNER JOIN children with the diagnoses codes dataset to get all ICD9 diagnoses codes
class(dx$ICD9_CD)
children_dx <- merge(children,dx[c("DX_ID","DX_KEY","DX_NM","ICD9_CD")],on="DX_KEY",all.x = TRUE)
str(children_dx)
#children_dx[children_dx$VISIT_KEY == 83692613,]
#subset data into only an Emergency Department diagnosis (primary or secondary)  of anaphylaxis or allergic reaction
children_dx <- subset(children_dx, children_dx$DICT_DX_STS_KEY %in% c(313,314))
codes <- c("995.0", "995.3", "995.6", "995.60", "995.61", "995.62", "995.63", "995.64", "995.65", "995.66", "995.67", "995.68",
"995.69","995.7","999.4","999.41","999.42","999.49")
#children_dx[children_dx$VISIT_KEY == 83692613,]
children_dx <- subset(children_dx, children_dx$ICD9_CD %in% codes)
str(children_dx)
head(children_dx)
#LEFT JOIN children with the department dataset to get all department of the encounter
#children_dx <- merge(children_dx,dept[c("DEPT_KEY","DEPT_NM","SPECIALTY","DEBT_ABBR","DEPT_GROUP")],on="DEPT_KEY")
children_dx <- merge(children_dx,dept,on="DEPT_KEY",all.x = TRUE)
str(children_dx)
#remove all urgent care cases
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$SPECIALTY)))
children_dx <- subset(children_dx,!('urgent' %in% tolower(children_dx$DEPT_NM)))
#FULL JOIN in the medical orders from the visit
children_dx <- merge(children_dx,medOrdrs,on="VISIT_KEY")
str(children_dx)
#make indicator for anaphylaxis within at least one of the diagnosis lines
children_dx$ANAPH_DX_IND <- as.integer(
ave(tolower(children_dx$DX_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("anaphylaxis", x))))
)
#make indicator for epinephrine within at least one of the medical order lines
children_dx$EPI_ORDER_IND <- as.integer(
ave(tolower(children_dx$MED_ORD_NM), children_dx$VISIT_KEY,FUN=function(x) as.integer(any(grep("epinephrine", x))))
)
#get data frame of only outpatient encounter after Aug 1 2014 for patients between the age of 1 and 18
outpatient_visits <- visit[visit$DICT_ENC_TYPE_KEY == 108,]
outpatient_visits <- subset(outpatient_visits, outpatient_visits$CONTACT_DT_KEY > 20140801)
outpatient_visits <- subset(outpatient_visits, outpatient_visits$AGE >= 1 & outpatient_visits$AGE <= 18)
children_dx[children_dx$PAT_KEY == 10366753,]
outpatient_visits[outpatient_visits$PAT_KEY == 10366753,]
children_dx[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","APPT_CHECKIN_DT","MED_ORD_KEY")]
test_pt_hospital_visits[,c("VISIT_KEY","PAT_KEY","DICT_ENC_TYPE_KEY","HOSP_DISCHRG_DT","MED_ORD_ID")]
outpatient_visits$APPT_CHECKIN_DT <- strptime(x = as.character(outpatient_visits$APPT_CHECKIN_DT),
format = "%Y-%m-%d %H:%M:%S")
children_dx$HOSP_DISCHRG_DT <- strptime(x = as.character(children_dx$HOSP_DISCHRG_DT),
format = "%Y-%m-%d %H:%M:%S")
#create indicator if patient has a follow up
for (i in 1:length(outpatient_visits$APPT_CHECKIN_DT)) {
children_dx$HAD_FOLLOWUP[i] <-
ifelse(children_dx$PAT_KEY[i] %in% outpatient_visits$PAT_KEY,#print(1),print(0))}
1,0)
}
table(children_dx$HAD_FOLLOWUP)
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
dept <- read.csv("department.csv")
getwd()
setwd("C:/Users/Nimz/Desktop/Healthcare Data Analyst Exercise")
numbers <- rnorm(1000)
summary(numbers)
sd(numbers)
mean(numbers)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
if (numbers[i] <= 1 & numbers[i] >= -1) {#|| numbers[i] <= sd(numbers)) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
if (numbers[i] <= 1 && numbers[i] >= -1) {#|| numbers[i] <= sd(numbers)) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
numbers <- rnorm(1000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
#if (num(bers[i]) <= 1 && numbers[i] >= -1) {#|| numbers[i] <= sd(numbers)) {
#   betweenNegPosOne <- betweenNegPosOne + 1
#}
print(i)
}
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#print(numbers[i])
if (i <= 1 && i >= -1) {#|| numbers[i] <= sd(numbers)) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount
numbers <- rnorm(10000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#if within 1 SD of the mean = 0 for normal distribution
if (i <= 1 && i >= -1) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount #= 0.678 which is close to our expected .682
numbers <- rnorm(100000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#if within 1 SD of the mean = 0 for normal distribution
if (i <= 1 && i >= -1) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount #= 0.6856 which is close to our expected .682
numbers <- rnorm(1000000)
summary(numbers)
head(numbers)
stdd
#numbers[1] <= mean(numbers)-sd(numbers)
i <- 0
betweenNegPosOne <- 0;
for(i in numbers){
#if within 1 SD of the mean = 0 for normal distribution
if (i <= 1 && i >= -1) {
betweenNegPosOne <- betweenNegPosOne + 1
}
}
totalCount <- betweenNegPosOne/length(numbers)
totalCount #= 0.68309 which is close to our expected .682
# have only been supplied vectors + need to create the matrices yourself.
# Matrices:
# - FreeThrows
# - FreeThrowAttempts
#Seasons are labeled based on the first year in the season
#   E.g. the 2012-2013 season is preseneted as simply 2012
#Notes and Corrections to the data:
#Kevin Durant: 2006 - College Data Used
#Kevin Durant: 2005 - Proxied With 2006 Data
#Derrick Rose: 2012 - Did Not Play
#Derrick Rose: 2007 - College Data Used
#Derrick Rose: 2006 - Proxied With 2007 Data
#Derrick Rose: 2005 - Proxied With 2007 Data
#Seasons
Seasons <- c("2005","2006","2007","2008","2009","2010","2011","2012","2013","2014")
#Players
Players <- c("KobeBryant","JoeJohnson","LeBronJames","CarmeloAnthony","DwightHoward","ChrisBosh","ChrisPaul","KevinDurant","DerrickRose","DwayneWade")
#Free Throws
KobeBryant_FT <- c(696,667,623,483,439,483,381,525,18,196)
JoeJohnson_FT <- c(261,235,316,299,220,195,158,132,159,141)
LeBronJames_FT <- c(601,489,549,594,593,503,387,403,439,375)
CarmeloAnthony_FT <- c(573,459,464,371,508,507,295,425,459,189)
DwightHoward_FT <- c(356,390,529,504,483,546,281,355,349,143)
ChrisBosh_FT <- c(474,463,472,504,470,384,229,241,223,179)
ChrisPaul_FT <- c(394,292,332,455,161,337,260,286,295,289)
KevinDurant_FT <- c(209,209,391,452,756,594,431,679,703,146)
DerrickRose_FT <- c(146,146,146,197,259,476,194,0,27,152)
DwayneWade_FT <- c(629,432,354,590,534,494,235,308,189,284)
#Matrix
freeThrows <- rbind(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT, DwightHoward_FT, ChrisBosh_FT,
ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT, DwayneWade_FT)
rownames(freeThrows) <- Players
colnames(freeThrows) <- Seasons
rm(KobeBryant_FT, JoeJohnson_FT, LeBronJames_FT, CarmeloAnthony_FT, DwightHoward_FT, ChrisBosh_FT,
ChrisPaul_FT, KevinDurant_FT, DerrickRose_FT, DwayneWade_FT)
#Free Throw Attempts
KobeBryant_FTA <- c(819,768,742,564,541,583,451,626,21,241)
JoeJohnson_FTA <- c(330,314,379,362,269,243,186,161,195,176)
LeBronJames_FTA <- c(814,701,771,762,773,663,502,535,585,528)
CarmeloAnthony_FTA <- c(709,568,590,468,612,605,367,512,541,237)
DwightHoward_FTA <- c(598,666,897,849,816,916,572,721,638,271)
ChrisBosh_FTA <- c(581,590,559,617,590,471,279,302,272,232)
ChrisPaul_FTA <- c(465,357,390,524,190,384,302,323,345,321)
KevinDurant_FTA <- c(256,256,448,524,840,675,501,750,805,171)
DerrickRose_FTA <- c(205,205,205,250,338,555,239,0,32,187)
DwayneWade_FTA <- c(803,535,467,771,702,652,297,425,258,370)
#Matrix
freeThrowAttempts <- rbind(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA, DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA, DwayneWade_FTA)
rownames(freeThrowAttempts) <- Players
colnames(freeThrowAttempts) <- Seasons
rm(KobeBryant_FTA, JoeJohnson_FTA, LeBronJames_FTA, CarmeloAnthony_FTA, DwightHoward_FTA, ChrisBosh_FTA,
ChrisPaul_FTA, KevinDurant_FTA, DerrickRose_FTA, DwayneWade_FTA)
#Games
KobeBryant_G <- c(80,77,82,82,73,82,58,78,6,35)
JoeJohnson_G <- c(82,57,82,79,76,72,60,72,79,80)
LeBronJames_G <- c(79,78,75,81,76,79,62,76,77,69)
CarmeloAnthony_G <- c(80,65,77,66,69,77,55,67,77,40)
DwightHoward_G <- c(82,82,82,79,82,78,54,76,71,41)
ChrisBosh_G <- c(70,69,67,77,70,77,57,74,79,44)
ChrisPaul_G <- c(78,64,80,78,45,80,60,70,62,82)
KevinDurant_G <- c(35,35,80,74,82,78,66,81,81,27)
DerrickRose_G <- c(40,40,40,81,78,81,39,0,10,51)
DwayneWade_G <- c(75,51,51,79,77,76,49,69,54,62)
#Matrix
Games <- rbind(KobeBryant_G, JoeJohnson_G, LeBronJames_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, ChrisPaul_G, KevinDurant_G, DerrickRose_G, DwayneWade_G)
colnames(Games) <- Seasons
rownames(Games) <- Players
rm(KobeBryant_G, JoeJohnson_G, CarmeloAnthony_G, DwightHoward_G, ChrisBosh_G, LeBronJames_G, ChrisPaul_G, DerrickRose_G, DwayneWade_G, KevinDurant_G)
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
#Field Goals
KobeBryant_FG <- c(978,813,775,800,716,740,574,738,31,266)
JoeJohnson_FG <- c(632,536,647,620,635,514,423,445,462,446)
LeBronJames_FG <- c(875,772,794,789,768,758,621,765,767,624)
CarmeloAnthony_FG <- c(756,691,728,535,688,684,441,669,743,358)
DwightHoward_FG <- c(468,526,583,560,510,619,416,470,473,251)
ChrisBosh_FG <- c(549,543,507,615,600,524,393,485,492,343)
ChrisPaul_FG <- c(407,381,630,631,314,430,425,412,406,568)
KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
#default parameter in case user doesn't pass an arg
defCustomPlot <- function(dataset.data, dataset.lines= Players, rows=1:10){
Data <- dataset.data[rows,,drop=FALSE]
matplot(t(Data), type="b", pch=15:18, col=(c(1:4,6)))
legend("bottomleft", inset = 0.01, legend = dataset.lines[rows], pch=15:18, col=(c(1:4,6)))
}
#FT Attempts Per Game
defCustomPlot(freeThrowAttempts/Games)
#wide variety, shart drop for Kobe + Rose b/c injury, drops for Howards and Durant too
#FT %
defCustomPlot(freeThrows/freeThrowAttempts)
#Howard has by far worst FT% despite having high # of , all others quite high (75%+)
#Player playing style (2 vs. 3 pt. preference), excluding FT's
defCustomPlot((Points-freeThrows)/FieldGoals)
#Joe Johnson has most 3FG's, Howard w/ least, Jobe, Paul, Rose, next highest
#and Wade next lowest
defCustomPlot(freeThrowAttempts/Games)
setwd("C:/Users/Nimz/Dropbox/NewLearn/UDEMY/R/RProgrammingAZ")
worldBank  <- read.csv("Section5-Homework-Data.csv")
head(worldBank)
Country_Code <- c("ABW","AFG","AGO","ALB","ARE","ARG","ARM","ATG","AUS","AUT","AZE","BDI","BEL","BEN","BFA","BGD","BGR","BHR","BHS","BIH","BLR","BLZ","BOL","BRA","BRB","BRN","BTN","BWA","CAF","CAN","CHE","CHL","CHN","CIV","CMR","COG","COL","COM","CPV","CRI","CUB","CYP","CZE","DEU","DJI","DNK","DOM","DZA","ECU","EGY","ERI","ESP","EST","ETH","FIN","FJI","FRA","FSM","GAB","GBR","GEO","GHA","GIN","GMB","GNB","GNQ","GRC","GRD","GTM","GUM","GUY","HKG","HND","HRV","HTI","HUN","IDN","IND","IRL","IRN","IRQ","ISL","ITA","JAM","JOR","JPN","KAZ","KEN","KGZ","KHM","KIR","KOR","KWT","LAO","LBN","LBR","LBY","LCA","LKA","LSO","LTU","LUX","LVA","MAC","MAR","MDA","MDG","MDV","MEX","MKD","MLI","MLT","MMR","MNE","MNG","MOZ","MRT","MUS","MWI","MYS","NAM","NCL","NER","NGA","NIC","NLD","NOR","NPL","NZL","OMN","PAK","PAN","PER","PHL","PNG","POL","PRI","PRT","PRY","PYF","QAT","ROU","RUS","RWA","SAU","SDN","SEN","SGP","SLB","SLE","SLV","SOM","SSD","STP","SUR","SVK","SVN","SWE","SWZ","SYR","TCD","TGO","THA","TJK","TKM","TLS","TON","TTO","TUN","TUR","TZA","UGA","UKR","URY","USA","UZB","VCT","VEN","VIR","VNM","VUT","WSM","YEM","ZAF","COD","ZMB","ZWE")
Life_Expectancy_At_Birth_1960 <- c(65.5693658536586,32.328512195122,32.9848292682927,62.2543658536585,52.2432195121951,65.2155365853659,65.8634634146342,61.7827317073171,70.8170731707317,68.5856097560976,60.836243902439,41.2360487804878,69.7019512195122,37.2782682926829,34.4779024390244,45.8293170731707,69.2475609756098,52.0893658536585,62.7290487804878,60.2762195121951,67.7080975609756,59.9613658536585,42.1183170731707,54.2054634146342,60.7380487804878,62.5003658536585,32.3593658536585,50.5477317073171,36.4826341463415,71.1331707317073,71.3134146341463,57.4582926829268,43.4658048780488,36.8724146341463,41.523756097561,48.5816341463415,56.716756097561,41.4424390243903,48.8564146341463,60.5761951219512,63.9046585365854,69.5939268292683,70.3487804878049,69.3129512195122,44.0212682926829,72.1765853658537,51.8452682926829,46.1351219512195,53.215,48.0137073170732,37.3629024390244,69.1092682926829,67.9059756097561,38.4057073170732,68.819756097561,55.9584878048781,69.8682926829268,57.5865853658537,39.5701219512195,71.1268292682927,63.4318536585366,45.8314634146342,34.8863902439024,32.0422195121951,37.8404390243902,36.7330487804878,68.1639024390244,59.8159268292683,45.5316341463415,61.2263414634146,60.2787317073171,66.9997073170732,46.2883170731707,64.6086585365854,42.1000975609756,68.0031707317073,48.6403170731707,41.1719512195122,69.691756097561,44.945512195122,48.0306829268293,73.4286585365854,69.1239024390244,64.1918292682927,52.6852682926829,67.6660975609756,58.3675853658537,46.3624146341463,56.1280731707317,41.2320243902439,49.2159756097561,53.0013170731707,60.3479512195122,43.2044634146342,63.2801219512195,34.7831707317073,42.6411951219512,57.303756097561,59.7471463414634,46.5107073170732,69.8473170731707,68.4463902439024,69.7868292682927,64.6609268292683,48.4466341463415,61.8127804878049,39.9746829268293,37.2686341463415,57.0656341463415,60.6228048780488,28.2116097560976,67.6017804878049,42.7363902439024,63.7056097560976,48.3688048780488,35.0037073170732,43.4830975609756,58.7452195121951,37.7736341463415,59.4753414634146,46.8803902439024,58.6390243902439,35.5150487804878,37.1829512195122,46.9988292682927,73.3926829268293,73.549756097561,35.1708292682927,71.2365853658537,42.6670731707317,45.2904634146342,60.8817073170732,47.6915853658537,57.8119268292683,38.462243902439,67.6804878048781,68.7196097560976,62.8089268292683,63.7937073170732,56.3570487804878,61.2060731707317,65.6424390243903,66.0552926829268,42.2492926829268,45.6662682926829,48.1876341463415,38.206,65.6598292682927,49.3817073170732,30.3315365853659,49.9479268292683,36.9658780487805,31.6767073170732,50.4513658536585,59.6801219512195,69.9759268292683,68.9780487804878,73.0056097560976,44.2337804878049,52.768243902439,38.0161219512195,40.2728292682927,54.6993170731707,56.1535365853659,54.4586829268293,33.7271219512195,61.3645365853659,62.6575853658537,42.009756097561,45.3844146341463,43.6538780487805,43.9835609756098,68.2995365853659,67.8963902439025,69.7707317073171,58.8855365853659,57.7238780487805,59.2851219512195,63.7302195121951,59.0670243902439,46.4874878048781,49.969512195122,34.3638048780488,49.0362926829268,41.0180487804878,45.1098048780488,51.5424634146342)
Life_Expectancy_At_Birth_2013 <- c(75.3286585365854,60.0282682926829,51.8661707317073,77.537243902439,77.1956341463415,75.9860975609756,74.5613658536585,75.7786585365854,82.1975609756098,80.890243902439,70.6931463414634,56.2516097560976,80.3853658536585,59.3120243902439,58.2406341463415,71.245243902439,74.4658536585366,76.5459512195122,75.0735365853659,76.2769268292683,72.4707317073171,69.9820487804878,67.9134390243903,74.1224390243903,75.3339512195122,78.5466585365854,69.1029268292683,64.3608048780488,49.8798780487805,81.4011219512195,82.7487804878049,81.1979268292683,75.3530243902439,51.2084634146342,55.0418048780488,61.6663902439024,73.8097317073171,62.9321707317073,72.9723658536585,79.2252195121951,79.2563902439025,79.9497804878049,78.2780487804878,81.0439024390244,61.6864634146342,80.3024390243903,73.3199024390244,74.5689512195122,75.648512195122,70.9257804878049,63.1778780487805,82.4268292682927,76.4243902439025,63.4421951219512,80.8317073170732,69.9179268292683,81.9682926829268,68.9733902439024,63.8435853658537,80.9560975609756,74.079512195122,61.1420731707317,58.216487804878,59.9992682926829,54.8384146341464,57.2908292682927,80.6341463414634,73.1935609756098,71.4863902439024,78.872512195122,66.3100243902439,83.8317073170732,72.9428536585366,77.1268292682927,62.4011463414634,75.2682926829268,68.7046097560976,67.6604146341463,81.0439024390244,75.1259756097561,69.4716829268293,83.1170731707317,82.290243902439,73.4689268292683,73.9014146341463,83.3319512195122,70.45,60.9537804878049,70.2024390243902,67.7720487804878,65.7665853658537,81.459756097561,74.462756097561,65.687243902439,80.1288780487805,60.5203902439024,71.6576829268293,74.9127073170732,74.2402926829268,49.3314634146342,74.1634146341464,81.7975609756098,73.9804878048781,80.3391463414634,73.7090487804878,68.811512195122,64.6739024390244,76.6026097560976,76.5326585365854,75.1870487804878,57.5351951219512,80.7463414634146,65.6540975609756,74.7583658536585,69.0618048780488,54.641512195122,62.8027073170732,74.46,61.466,74.567512195122,64.3438780487805,77.1219512195122,60.8281463414634,52.4421463414634,74.514756097561,81.1048780487805,81.4512195121951,69.222,81.4073170731707,76.8410487804878,65.9636829268293,77.4192195121951,74.2838536585366,68.1315609756097,62.4491707317073,76.8487804878049,78.7111951219512,80.3731707317073,72.7991707317073,76.3340731707317,78.4184878048781,74.4634146341463,71.0731707317073,63.3948292682927,74.1776341463415,63.1670487804878,65.878756097561,82.3463414634146,67.7189268292683,50.3631219512195,72.4981463414634,55.0230243902439,55.2209024390244,66.259512195122,70.99,76.2609756097561,80.2780487804878,81.7048780487805,48.9379268292683,74.7157804878049,51.1914878048781,59.1323658536585,74.2469268292683,69.4001707317073,65.4565609756098,67.5223658536585,72.6403414634147,70.3052926829268,73.6463414634147,75.1759512195122,64.2918292682927,57.7676829268293,71.159512195122,76.8361951219512,78.8414634146341,68.2275853658537,72.8108780487805,74.0744146341464,79.6243902439024,75.756487804878,71.669243902439,73.2503902439024,63.583512195122,56.7365853658537,58.2719268292683,59.2373658536585,55.633)
worldBank1960 <- worldBank[worldBank$Year == 1960]
worldBank1960 <- worldBank[worldBank$Year == 1960,]
nrow(worldBank1960)
nrow(worldBank)
worldBank2013 <- worldBank[worldBank$Year == 2013,]
df1960 <- data.frame(Country.Code=Country_Code, LifeExpectancy=Life_Expectancy_At_Birth_1960)
df2013 <- data.frame(Country.Code=Country_Code, LifeExpectancy=Life_Expectancy_At_Birth_2013)
?merge
?merge(worldBank1960, df1960, by.x = Country.Code, by.y = Country.Code)
merge(worldBank1960, df1960, by.x = Country.Code, by.y = Country.Code)
fullData1960 <- merge(worldBank1960, df1960, by.x = Country.Code, by.y = Country.Code)
fullData1960 <- merge(x = worldBank1960, y = df1960, by.x = Country.Code, by.y = Country.Code)
worldBank1960
fullData1960 <- merge(x = worldBank1960, y = df1960, by.x = Country.Code, by.y = Country.Code)
merge(x = worldBank1960, y = df1960)
df1960
fullData2013 <- merge(x = worldBank2013, y = df2013)
fullData2013
fullData1960
fullData1960 <- merge(x = worldBank1960, y = df1960)#, by.x = Country.Code, by.y = Country.Code)
fullData1960
fullData2013
?rbind
fullDate <- rbind(fullData1960,fullData2013)
nrow(fullDate)
nrow(fullData)
fullData <- rbind(fullData1960,fullData2013)
nrow(fullData)
fullData
function (x, ...)
head(fullData)
tail(fullData)
fullData[fullData$Country.Code == 'SLV']
fullData[fullData$Country.Code == 'SLV',]
library(ggplot2)
qplot(data=fullData1960, x = LifeExpectancy, y = Fertility.Rate, col = Region)
qplot(data=fullData1960, x = LifeExpectancy, y = Fertility.Rate, col = Region)
qplot(data=fullData1960, x = LifeExpectancy, y = Fertility.Rate, col = Region, size = I(3))
qplot(data=fullData2013, x = LifeExpectancy, y = Fertility.Rate, col = Region, size = I(3))
setwd("C:/Users/Nimz/Dropbox/NewLearn/UDEMY/R/RProgrammingAZ")
movies <- read.csv("Section6-Homework-Data.csv")
str(movies)
colnames(movies) <- c("releaseDayOfWeek","Director","Genre","Movie","releaseDate","Studio","adjustedGrossInMillions",
"budgetinMillions","grossInMillions","ratingIMDB","ratingMovieLens","overseasProfitInMillions",
"overseasProfitMargin","usProfitInMillions","usProfitMargin","runtimeInMinutes",
"usGrossInMillions","usGrossMargin")
str(movies)
library(ggplot2)
install.packages("extrafont")
library(extrafont)
font_import()
pl <- ggplot(data = movies, aes(x = Genre, y = usGrossMargin, colour = Studio, size = budgetinMillions))
pl + geom_boxplot()
summary(movies$Genre)
table(movies$Studio)
filteredGenres <- subset(movies, Genre %in% c("action","adventure","animation","comedy","drama"))
filteredMovies <- subset(filteredGenres, Studio %in% c("Buena Vista Studios","Fox","Paramount Pictures","Sony",
"Universal","WB"))
windowsFonts(Times=windowsFont("TT Times New Roman"))
pl <- ggplot(data = filteredMovies, aes(x = Genre, y = usGrossMargin))
pl + geom_jitter(aes(size = budgetinMillions, colour = Studio)) +
geom_boxplot(alpha = 0.5) +
ggtitle("Domestic Gross % by Genre") +
theme(text = element_text(family = "Comic Sans MS"),
axis.title.x = element_text(colour = "Blue", size = 30), #axis title
axis.title.y = element_text(colour = "Blue", size = 30),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 30),
legend.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 40))
